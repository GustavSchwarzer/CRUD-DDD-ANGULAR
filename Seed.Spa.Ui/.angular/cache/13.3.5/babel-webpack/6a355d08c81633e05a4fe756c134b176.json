{"ast":null,"code":"import _assertThisInitialized from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\assertThisInitialized.js\";\nimport _inherits from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, InjectionToken, forwardRef, PLATFORM_ID, Component, Inject, Optional, Input, NgModule } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { fromEvent, defer, Subject } from 'rxjs';\nimport { takeUntil, take, mapTo, shareReplay } from 'rxjs/operators';\n/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction EditorComponent_ng_template_0_Template(rf, ctx) {}\n\nvar getTinymce = function getTinymce() {\n  var w = typeof window !== 'undefined' ? window : undefined;\n  return w && w.tinymce ? w.tinymce : null;\n};\n\nvar Events = /*#__PURE__*/(function () {\n  var Events = /*#__PURE__*/_createClass(function Events() {\n    _classCallCheck(this, Events);\n\n    this.onBeforePaste = new EventEmitter();\n    this.onBlur = new EventEmitter();\n    this.onClick = new EventEmitter();\n    this.onContextMenu = new EventEmitter();\n    this.onCopy = new EventEmitter();\n    this.onCut = new EventEmitter();\n    this.onDblclick = new EventEmitter();\n    this.onDrag = new EventEmitter();\n    this.onDragDrop = new EventEmitter();\n    this.onDragEnd = new EventEmitter();\n    this.onDragGesture = new EventEmitter();\n    this.onDragOver = new EventEmitter();\n    this.onDrop = new EventEmitter();\n    this.onFocus = new EventEmitter();\n    this.onFocusIn = new EventEmitter();\n    this.onFocusOut = new EventEmitter();\n    this.onKeyDown = new EventEmitter();\n    this.onKeyPress = new EventEmitter();\n    this.onKeyUp = new EventEmitter();\n    this.onMouseDown = new EventEmitter();\n    this.onMouseEnter = new EventEmitter();\n    this.onMouseLeave = new EventEmitter();\n    this.onMouseMove = new EventEmitter();\n    this.onMouseOut = new EventEmitter();\n    this.onMouseOver = new EventEmitter();\n    this.onMouseUp = new EventEmitter();\n    this.onPaste = new EventEmitter();\n    this.onSelectionChange = new EventEmitter();\n    this.onActivate = new EventEmitter();\n    this.onAddUndo = new EventEmitter();\n    this.onBeforeAddUndo = new EventEmitter();\n    this.onBeforeExecCommand = new EventEmitter();\n    this.onBeforeGetContent = new EventEmitter();\n    this.onBeforeRenderUI = new EventEmitter();\n    this.onBeforeSetContent = new EventEmitter();\n    this.onChange = new EventEmitter();\n    this.onClearUndos = new EventEmitter();\n    this.onDeactivate = new EventEmitter();\n    this.onDirty = new EventEmitter();\n    this.onExecCommand = new EventEmitter();\n    this.onGetContent = new EventEmitter();\n    this.onHide = new EventEmitter();\n    this.onInit = new EventEmitter();\n    this.onInitNgModel = new EventEmitter();\n    this.onLoadContent = new EventEmitter();\n    this.onNodeChange = new EventEmitter();\n    this.onPostProcess = new EventEmitter();\n    this.onPostRender = new EventEmitter();\n    this.onPreInit = new EventEmitter();\n    this.onPreProcess = new EventEmitter();\n    this.onProgressState = new EventEmitter();\n    this.onRedo = new EventEmitter();\n    this.onRemove = new EventEmitter();\n    this.onReset = new EventEmitter();\n    this.onResizeEditor = new EventEmitter();\n    this.onSaveContent = new EventEmitter();\n    this.onSetAttrib = new EventEmitter();\n    this.onObjectResizeStart = new EventEmitter();\n    this.onObjectResized = new EventEmitter();\n    this.onObjectSelected = new EventEmitter();\n    this.onSetContent = new EventEmitter();\n    this.onShow = new EventEmitter();\n    this.onSubmit = new EventEmitter();\n    this.onUndo = new EventEmitter();\n    this.onVisualAid = new EventEmitter();\n  });\n\n  Events.ɵfac = function Events_Factory(t) {\n    return new (t || Events)();\n  };\n\n  Events.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: Events,\n    outputs: {\n      onBeforePaste: \"onBeforePaste\",\n      onBlur: \"onBlur\",\n      onClick: \"onClick\",\n      onContextMenu: \"onContextMenu\",\n      onCopy: \"onCopy\",\n      onCut: \"onCut\",\n      onDblclick: \"onDblclick\",\n      onDrag: \"onDrag\",\n      onDragDrop: \"onDragDrop\",\n      onDragEnd: \"onDragEnd\",\n      onDragGesture: \"onDragGesture\",\n      onDragOver: \"onDragOver\",\n      onDrop: \"onDrop\",\n      onFocus: \"onFocus\",\n      onFocusIn: \"onFocusIn\",\n      onFocusOut: \"onFocusOut\",\n      onKeyDown: \"onKeyDown\",\n      onKeyPress: \"onKeyPress\",\n      onKeyUp: \"onKeyUp\",\n      onMouseDown: \"onMouseDown\",\n      onMouseEnter: \"onMouseEnter\",\n      onMouseLeave: \"onMouseLeave\",\n      onMouseMove: \"onMouseMove\",\n      onMouseOut: \"onMouseOut\",\n      onMouseOver: \"onMouseOver\",\n      onMouseUp: \"onMouseUp\",\n      onPaste: \"onPaste\",\n      onSelectionChange: \"onSelectionChange\",\n      onActivate: \"onActivate\",\n      onAddUndo: \"onAddUndo\",\n      onBeforeAddUndo: \"onBeforeAddUndo\",\n      onBeforeExecCommand: \"onBeforeExecCommand\",\n      onBeforeGetContent: \"onBeforeGetContent\",\n      onBeforeRenderUI: \"onBeforeRenderUI\",\n      onBeforeSetContent: \"onBeforeSetContent\",\n      onChange: \"onChange\",\n      onClearUndos: \"onClearUndos\",\n      onDeactivate: \"onDeactivate\",\n      onDirty: \"onDirty\",\n      onExecCommand: \"onExecCommand\",\n      onGetContent: \"onGetContent\",\n      onHide: \"onHide\",\n      onInit: \"onInit\",\n      onInitNgModel: \"onInitNgModel\",\n      onLoadContent: \"onLoadContent\",\n      onNodeChange: \"onNodeChange\",\n      onPostProcess: \"onPostProcess\",\n      onPostRender: \"onPostRender\",\n      onPreInit: \"onPreInit\",\n      onPreProcess: \"onPreProcess\",\n      onProgressState: \"onProgressState\",\n      onRedo: \"onRedo\",\n      onRemove: \"onRemove\",\n      onReset: \"onReset\",\n      onResizeEditor: \"onResizeEditor\",\n      onSaveContent: \"onSaveContent\",\n      onSetAttrib: \"onSetAttrib\",\n      onObjectResizeStart: \"onObjectResizeStart\",\n      onObjectResized: \"onObjectResized\",\n      onObjectSelected: \"onObjectSelected\",\n      onSetContent: \"onSetContent\",\n      onShow: \"onShow\",\n      onSubmit: \"onSubmit\",\n      onUndo: \"onUndo\",\n      onVisualAid: \"onVisualAid\"\n    }\n  });\n  return Events;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar validEvents = ['onActivate', 'onAddUndo', 'onBeforeAddUndo', 'onBeforeExecCommand', 'onBeforeGetContent', 'onBeforeRenderUI', 'onBeforeSetContent', 'onBeforePaste', 'onBlur', 'onChange', 'onClearUndos', 'onClick', 'onContextMenu', 'onCopy', 'onCut', 'onDblclick', 'onDeactivate', 'onDirty', 'onDrag', 'onDragDrop', 'onDragEnd', 'onDragGesture', 'onDragOver', 'onDrop', 'onExecCommand', 'onFocus', 'onFocusIn', 'onFocusOut', 'onGetContent', 'onHide', 'onInit', 'onKeyDown', 'onKeyPress', 'onKeyUp', 'onLoadContent', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp', 'onNodeChange', 'onObjectResizeStart', 'onObjectResized', 'onObjectSelected', 'onPaste', 'onPostProcess', 'onPostRender', 'onPreProcess', 'onProgressState', 'onRedo', 'onRemove', 'onReset', 'onResizeEditor', 'onSaveContent', 'onSelectionChange', 'onSetAttrib', 'onSetContent', 'onShow', 'onSubmit', 'onUndo', 'onVisualAid'];\n/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// Caretaker note: `fromEvent` supports passing JQuery-style event targets, the editor has `on` and `off` methods which\n// will be invoked upon subscription and teardown.\n\nvar listenTinyMCEEvent = function listenTinyMCEEvent(editor, eventName, destroy$) {\n  return fromEvent(editor, eventName).pipe(takeUntil(destroy$));\n};\n\nvar bindHandlers = function bindHandlers(ctx, editor, destroy$) {\n  var allowedEvents = getValidEvents(ctx);\n  allowedEvents.forEach(function (eventName) {\n    var eventEmitter = ctx[eventName];\n    listenTinyMCEEvent(editor, eventName.substring(2), destroy$).subscribe(function (event) {\n      // Caretaker note: `ngZone.run()` runs change detection since it notifies the forked Angular zone that it's\n      // being re-entered. We don't want to run `ApplicationRef.tick()` if anyone listens to the specific event\n      // within the template. E.g. if the `onSelectionChange` is not listened within the template like:\n      // `<editor (onSelectionChange)=\"...\"></editor>`\n      // then its `observers` array will be empty, and we won't run \"dead\" change detection.\n      if (eventEmitter.observers.length > 0) {\n        ctx.ngZone.run(function () {\n          return eventEmitter.emit({\n            event: event,\n            editor: editor\n          });\n        });\n      }\n    });\n  });\n};\n\nvar getValidEvents = function getValidEvents(ctx) {\n  var ignoredEvents = parseStringProperty(ctx.ignoreEvents, []);\n  var allowedEvents = parseStringProperty(ctx.allowedEvents, validEvents).filter(function (event) {\n    return validEvents.includes(event) && !ignoredEvents.includes(event);\n  });\n  return allowedEvents;\n};\n\nvar parseStringProperty = function parseStringProperty(property, defaultValue) {\n  if (typeof property === 'string') {\n    return property.split(',').map(function (value) {\n      return value.trim();\n    });\n  }\n\n  if (Array.isArray(property)) {\n    return property;\n  }\n\n  return defaultValue;\n};\n\nvar unique = 0;\n\nvar uuid = function uuid(prefix) {\n  var date = new Date();\n  var time = date.getTime();\n  var random = Math.floor(Math.random() * 1000000000);\n  unique++;\n  return prefix + '_' + random + unique + String(time);\n};\n\nvar isTextarea = function isTextarea(element) {\n  return typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';\n};\n\nvar normalizePluginArray = function normalizePluginArray(plugins) {\n  if (typeof plugins === 'undefined' || plugins === '') {\n    return [];\n  }\n\n  return Array.isArray(plugins) ? plugins : plugins.split(' ');\n};\n\nvar mergePlugins = function mergePlugins(initPlugins, inputPlugins) {\n  return normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));\n}; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\nvar noop = function noop() {};\n\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value === null || value === undefined;\n};\n/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\nvar createState = function createState() {\n  return {\n    script$: null\n  };\n};\n\nvar CreateScriptLoader = function CreateScriptLoader() {\n  var state = createState();\n\n  var load = function load(doc, url) {\n    return state.script$ || ( // Caretaker note: the `script$` is a multicast observable since it's piped with `shareReplay`,\n    // so if there're multiple editor components simultaneously on the page, they'll subscribe to the internal\n    // `ReplaySubject`. The script will be loaded only once, and `ReplaySubject` will cache the result.\n    state.script$ = defer(function () {\n      var scriptTag = doc.createElement('script');\n      scriptTag.referrerPolicy = 'origin';\n      scriptTag.type = 'application/javascript';\n      scriptTag.src = url;\n      doc.head.appendChild(scriptTag);\n      return fromEvent(scriptTag, 'load').pipe(take(1), mapTo(undefined));\n    }).pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    })));\n  }; // Only to be used by tests.\n\n\n  var reinitialize = function reinitialize() {\n    state = createState();\n  };\n\n  return {\n    load: load,\n    reinitialize: reinitialize\n  };\n};\n\nvar ScriptLoader = CreateScriptLoader();\n/* eslint-disable @typescript-eslint/no-parameter-properties */\n\nvar TINYMCE_SCRIPT_SRC = new InjectionToken('TINYMCE_SCRIPT_SRC');\nvar EDITOR_COMPONENT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return EditorComponent;\n  }),\n  multi: true\n};\nvar EditorComponent = /*#__PURE__*/(function () {\n  var EditorComponent = /*#__PURE__*/function (_Events) {\n    _inherits(EditorComponent, _Events);\n\n    var _super = _createSuper(EditorComponent);\n\n    function EditorComponent(elementRef, ngZone, platformId, tinymceScriptSrc) {\n      var _this;\n\n      _classCallCheck(this, EditorComponent);\n\n      _this = _super.call(this);\n      _this.platformId = platformId;\n      _this.tinymceScriptSrc = tinymceScriptSrc;\n      _this.cloudChannel = '6';\n      _this.apiKey = 'no-api-key';\n      _this.id = '';\n      _this.modelEvents = 'change input undo redo';\n      _this.onTouchedCallback = noop;\n      _this.destroy$ = new Subject();\n\n      _this.initialise = function () {\n        var finalInit = Object.assign(Object.assign({}, _this.init), {\n          selector: undefined,\n          target: _this._element,\n          inline: _this.inline,\n          readonly: _this.disabled,\n          plugins: mergePlugins(_this.init && _this.init.plugins, _this.plugins),\n          toolbar: _this.toolbar || _this.init && _this.init.toolbar,\n          setup: function setup(editor) {\n            _this._editor = editor;\n            listenTinyMCEEvent(editor, 'init', _this.destroy$).subscribe(function () {\n              _this.initEditor(editor);\n            });\n            bindHandlers(_assertThisInitialized(_this), editor, _this.destroy$);\n\n            if (_this.init && typeof _this.init.setup === 'function') {\n              _this.init.setup(editor);\n            }\n          }\n        });\n\n        if (isTextarea(_this._element)) {\n          _this._element.style.visibility = '';\n        }\n\n        _this.ngZone.runOutsideAngular(function () {\n          getTinymce().init(finalInit);\n        });\n      };\n\n      _this._elementRef = elementRef;\n      _this.ngZone = ngZone;\n      return _this;\n    }\n\n    _createClass(EditorComponent, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(val) {\n        var _a;\n\n        this._disabled = val;\n\n        if (this._editor && this._editor.initialized) {\n          if (typeof ((_a = this._editor.mode) === null || _a === void 0 ? void 0 : _a.set) === 'function') {\n            this._editor.mode.set(val ? 'readonly' : 'design');\n          } else {\n            this._editor.setMode(val ? 'readonly' : 'design');\n          }\n        }\n      }\n    }, {\n      key: \"editor\",\n      get: function get() {\n        return this._editor;\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        if (this._editor && this._editor.initialized) {\n          this._editor.setContent(isNullOrUndefined(value) ? '' : value);\n        } else {\n          this.initialValue = value === null ? undefined : value;\n        }\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChangeCallback = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouchedCallback = fn;\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _a;\n\n        if (isPlatformBrowser(this.platformId)) {\n          this.id = this.id || uuid('tiny-angular');\n          this.inline = this.inline !== undefined ? this.inline !== false : !!((_a = this.init) === null || _a === void 0 ? void 0 : _a.inline);\n          this.createElement();\n\n          if (getTinymce() !== null) {\n            this.initialise();\n          } else if (this._element && this._element.ownerDocument) {\n            // Caretaker note: the component might be destroyed before the script is loaded and its code is executed.\n            // This will lead to runtime exceptions if `initialise` will be called when the component has been destroyed.\n            ScriptLoader.load(this._element.ownerDocument, this.getScriptSrc()).pipe(takeUntil(this.destroy$)).subscribe(this.initialise);\n          }\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroy$.next();\n\n        if (getTinymce() !== null) {\n          getTinymce().remove(this._editor);\n        }\n      }\n    }, {\n      key: \"createElement\",\n      value: function createElement() {\n        var tagName = typeof this.tagName === 'string' ? this.tagName : 'div';\n        this._element = document.createElement(this.inline ? tagName : 'textarea');\n\n        if (this._element) {\n          if (document.getElementById(this.id)) {\n            /* eslint no-console: [\"error\", { allow: [\"warn\"] }] */\n            console.warn(\"TinyMCE-Angular: an element with id [\".concat(this.id, \"] already exists. Editors with duplicate Id will not be able to mount\"));\n          }\n\n          this._element.id = this.id;\n\n          if (isTextarea(this._element)) {\n            this._element.style.visibility = 'hidden';\n          }\n\n          this._elementRef.nativeElement.appendChild(this._element);\n        }\n      }\n    }, {\n      key: \"getScriptSrc\",\n      value: function getScriptSrc() {\n        return isNullOrUndefined(this.tinymceScriptSrc) ? \"https://cdn.tiny.cloud/1/\".concat(this.apiKey, \"/tinymce/\").concat(this.cloudChannel, \"/tinymce.min.js\") : this.tinymceScriptSrc;\n      }\n    }, {\n      key: \"initEditor\",\n      value: function initEditor(editor) {\n        var _this2 = this;\n\n        listenTinyMCEEvent(editor, 'blur', this.destroy$).subscribe(function () {\n          _this2.ngZone.run(function () {\n            return _this2.onTouchedCallback();\n          });\n        });\n        listenTinyMCEEvent(editor, this.modelEvents, this.destroy$).subscribe(function () {\n          _this2.ngZone.run(function () {\n            return _this2.emitOnChange(editor);\n          });\n        });\n\n        if (typeof this.initialValue === 'string') {\n          this.ngZone.run(function () {\n            editor.setContent(_this2.initialValue);\n\n            if (editor.getContent() !== _this2.initialValue) {\n              _this2.emitOnChange(editor);\n            }\n\n            if (_this2.onInitNgModel !== undefined) {\n              _this2.onInitNgModel.emit(editor);\n            }\n          });\n        }\n      }\n    }, {\n      key: \"emitOnChange\",\n      value: function emitOnChange(editor) {\n        if (this.onChangeCallback) {\n          this.onChangeCallback(editor.getContent({\n            format: this.outputFormat\n          }));\n        }\n      }\n    }]);\n\n    return EditorComponent;\n  }(Events);\n\n  EditorComponent.ɵfac = function EditorComponent_Factory(t) {\n    return new (t || EditorComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(TINYMCE_SCRIPT_SRC, 8));\n  };\n\n  EditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: EditorComponent,\n    selectors: [[\"editor\"]],\n    inputs: {\n      cloudChannel: \"cloudChannel\",\n      apiKey: \"apiKey\",\n      init: \"init\",\n      id: \"id\",\n      initialValue: \"initialValue\",\n      outputFormat: \"outputFormat\",\n      inline: \"inline\",\n      tagName: \"tagName\",\n      plugins: \"plugins\",\n      toolbar: \"toolbar\",\n      modelEvents: \"modelEvents\",\n      allowedEvents: \"allowedEvents\",\n      ignoreEvents: \"ignoreEvents\",\n      disabled: \"disabled\"\n    },\n    features: [i0.ɵɵProvidersFeature([EDITOR_COMPONENT_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    template: function EditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, EditorComponent_ng_template_0_Template, 0, 0, \"ng-template\");\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{display:block}\"]\n  });\n  return EditorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar EditorModule = /*#__PURE__*/(function () {\n  var EditorModule = /*#__PURE__*/_createClass(function EditorModule() {\n    _classCallCheck(this, EditorModule);\n  });\n\n  EditorModule.ɵfac = function EditorModule_Factory(t) {\n    return new (t || EditorModule)();\n  };\n\n  EditorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: EditorModule\n  });\n  EditorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule]]\n  });\n  return EditorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { EditorComponent, EditorModule, TINYMCE_SCRIPT_SRC }; //# sourceMappingURL=tinymce-tinymce-angular.mjs.map","map":null,"metadata":{},"sourceType":"module"}