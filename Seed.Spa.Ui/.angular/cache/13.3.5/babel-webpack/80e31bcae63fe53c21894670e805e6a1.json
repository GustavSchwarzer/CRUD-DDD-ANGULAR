{"ast":null,"code":"import _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { EventEmitter } from '@angular/core';\nimport { ECacheType } from './common/type-cache.enum';\nimport { ETypeLogin } from './common/type-login.enum';\nexport var GlobalService = /*#__PURE__*/function () {\n  function GlobalService() {\n    _classCallCheck(this, GlobalService);\n  }\n\n  _createClass(GlobalService, null, [{\n    key: \"messageShow\",\n    value: function messageShow(message) {\n      GlobalService.getOperationExecutedEmitter().emit(GlobalService.operationExecutedParameters(\"message-modal\", null, message));\n    }\n  }, {\n    key: \"getNotificationEmitter\",\n    value: function getNotificationEmitter() {\n      if (!this.notification) this.notification = new EventEmitter();\n      return this.notification;\n    }\n  }, {\n    key: \"getOperationExecutedEmitter\",\n    value: function getOperationExecutedEmitter() {\n      if (!this.operationExecuted) this.operationExecuted = new EventEmitter();\n      return this.operationExecuted;\n    }\n  }, {\n    key: \"getOperationRequestingEmitter\",\n    value: function getOperationRequestingEmitter() {\n      if (!this.operationRequesting) this.operationRequesting = new EventEmitter();\n      return this.operationRequesting;\n    }\n  }, {\n    key: \"getChangeCultureEmitter\",\n    value: function getChangeCultureEmitter() {\n      if (!this.changeCulture) this.changeCulture = new EventEmitter();\n      return this.changeCulture;\n    }\n  }, {\n    key: \"getEndPoints\",\n    value: function getEndPoints() {\n      if (!this._endpoint) {\n        this._endpoint = new EndPoints();\n        return this._endpoint;\n      }\n\n      return this._endpoint;\n    }\n  }, {\n    key: \"setAppsettings\",\n    value: function setAppsettings(config) {\n      GlobalService.getEndPoints().setConfigSettings(config.ConfigSettings);\n      GlobalService.getAuthSettings().setSSO(config.SSO);\n    }\n  }, {\n    key: \"getAuthSettings\",\n    value: function getAuthSettings() {\n      return new AuthSettings();\n    }\n  }, {\n    key: \"getGlobalSettings\",\n    value: function getGlobalSettings() {\n      return new GlobalSettings();\n    }\n  }, {\n    key: \"operationExecutedParameters\",\n    value: function operationExecutedParameters(_selector, _operation) {\n      var _message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      return new OperationExecutedParameters(_selector, _operation, _message);\n    }\n  }]);\n\n  return GlobalService;\n}();\nGlobalService.operationExecuted = new EventEmitter();\nGlobalService.operationRequesting = new EventEmitter();\nGlobalService.notification = new EventEmitter();\nGlobalService.changeCulture = new EventEmitter();\n;\nexport var OperationExecutedParameters = /*#__PURE__*/_createClass(function OperationExecutedParameters(_selector, _operation, _message) {\n  _classCallCheck(this, OperationExecutedParameters);\n\n  this.selector = _selector;\n  this.operation = _operation;\n  this.message = _message;\n});\nexport var OperationRequest = /*#__PURE__*/_createClass(function OperationRequest(resourceName, count, value) {\n  _classCallCheck(this, OperationRequest);\n\n  this.resourceName = resourceName;\n  this.count = count;\n  this.value = value;\n});\nexport var NotificationParameters = /*#__PURE__*/_createClass(function NotificationParameters(_event, _data, _otherEvents) {\n  _classCallCheck(this, NotificationParameters);\n\n  this.event = _event;\n  this.data = _data;\n  this.otherEvents = _otherEvents || [\"\"];\n});\nexport var EndPoints = /*#__PURE__*/function () {\n  function EndPoints() {\n    _classCallCheck(this, EndPoints);\n  }\n\n  _createClass(EndPoints, [{\n    key: \"setConfigSettings\",\n    value: function setConfigSettings(configSettings) {\n      if (configSettings) {\n        this.init(configSettings);\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init(configSettings) {\n      this.DEFAULT = configSettings.DEFAULT;\n      this.AUTHAPI = configSettings.AUTHAPI;\n      this.AUTH = configSettings.AUTH;\n      this.APP = configSettings.APP;\n      this.DOWNLOAD = this.DEFAULT + \"/document/download\";\n    }\n  }]);\n\n  return EndPoints;\n}();\n;\nexport var GlobalSettings = /*#__PURE__*/_createClass(function GlobalSettings() {\n  _classCallCheck(this, GlobalSettings);\n\n  this.enabledSelect2 = true;\n  this.actionLeft = true;\n  this.CACHE_TYPE = ECacheType.LOCAL;\n  this.enabledOldBack = false;\n  this.translateStrategy = {\n    type: \"SERVICE-FIELD\"\n  };\n});\nexport var AuthSettings = /*#__PURE__*/function () {\n  function AuthSettings() {\n    _classCallCheck(this, AuthSettings);\n\n    this.TYPE_LOGIN = ETypeLogin.SSO;\n    this.CLIENT_ID = 'Seed-spa';\n    this.CLIENT_ID_RO = 'Seed-spa';\n    this.CLIENT_ID_CC = 'Seed-spa';\n    this.CLIENT_ID_CC = \"Seed-spa-anonymous\";\n    this.CLIENT_SECRET_CC = \"4aa288ca-1603-45c2-85c3-b41a08d2bd0a\";\n    this.SCOPE = \"openid ssosa profile email\";\n    this.CACHE_TYPE = ECacheType.LOCAL;\n    this.NAME_TOKEN = \"TOKEN_AUTH\";\n    this.NAME_TOKEN_ANONYMOUS = \"TOKEN_AUTH_ANONYMOUS\";\n  }\n\n  _createClass(AuthSettings, [{\n    key: \"setSSO\",\n    value: function setSSO(sso) {\n      if (sso) {\n        this.init(sso);\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init(sso) {\n      this.CLIENT_ID = sso.CLIENT_ID;\n      this.SCOPE = sso.SCOPE;\n    }\n  }]);\n\n  return AuthSettings;\n}();\n;","map":null,"metadata":{},"sourceType":"module"}