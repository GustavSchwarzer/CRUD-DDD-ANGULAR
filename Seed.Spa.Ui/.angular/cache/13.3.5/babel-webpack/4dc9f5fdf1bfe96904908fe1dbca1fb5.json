{"ast":null,"code":"import _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { throwError, Observable } from 'rxjs';\nimport { finalize, map, catchError } from 'rxjs/operators'; //import { Http, RequestOptions, Response, Headers, URLSearchParams, ResponseContentType } from '@angular/http';\n\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { GlobalService, OperationRequest } from '../../global.service';\nimport { CacheService } from '../services/cache.service';\nimport { NotificationsService } from 'angular2-notifications';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"angular2-notifications\";\nimport * as i3 from \"@angular/router\";\nexport var ApiService = /*#__PURE__*/(function () {\n  var ApiService = /*#__PURE__*/function () {\n    function ApiService(http, notificationsService, router) {\n      _classCallCheck(this, ApiService);\n\n      this.http = http;\n      this.notificationsService = notificationsService;\n      this.router = router;\n      this._apiDefault = GlobalService.getEndPoints().DEFAULT;\n      this._enableNotifification = true;\n      this._enableLoading = true;\n      this._cacheType = GlobalService.getAuthSettings().CACHE_TYPE;\n      this._enabledOldBack = GlobalService.getGlobalSettings().enabledOldBack;\n    }\n\n    _createClass(ApiService, [{\n      key: \"get\",\n      value: function get(filters, onlyDataResult) {\n        return this.getBase(this.makeBaseUrl(), filters);\n      }\n    }, {\n      key: \"uploadCustom\",\n      value: function uploadCustom(formData, folder, url) {\n        var _url = url || this.makeBaseUrl();\n\n        var _count = 0;\n        this.loading(this.getResource(), true, _count);\n        var post = this.http.post(_url, formData, this.requestOptions(false));\n        return this.processResponse(post, _count, true, true);\n      }\n    }, {\n      key: \"upload\",\n      value: function upload(file, folder, rename) {\n        var formData = new FormData();\n        formData.append('files', file, file.name);\n        formData.append('folder', folder);\n        formData.append('rename', rename ? \"true\" : \"false\");\n        var url = this.makeUrlUpload();\n        return this.uploadCustom(formData, folder, url);\n      }\n    }, {\n      key: \"deleteUpload\",\n      value: function deleteUpload(folder, fileName) {\n        var url = this.makeUrlDeleteUpload(folder, fileName);\n        var _count = 0;\n        this.loading(this.getResource(), true, _count);\n        return this.processResponse(this.http.delete(url, this.requestOptions()), _count, true, true);\n      }\n    }, {\n      key: \"post\",\n      value: function post(data, messageCustom) {\n        var url = this.makeBaseUrl();\n        var _count = 0;\n        this.loading(this.getResource(), true, _count);\n        var json = JSON.stringify(data, function (key, value) {\n          if (value !== null) return value;\n        });\n        return this.processResponse(this.http.post(url, json, this.requestOptions()), _count, true, true);\n      }\n    }, {\n      key: \"postMany\",\n      value: function postMany(data, messageCustom) {\n        var url = this.makeUrlMore();\n        var _count = 0;\n        this.loading(this.getResource(), true, _count);\n        var json = JSON.stringify(data, function (key, value) {\n          if (value !== null) return value;\n        });\n        return this.processResponse(this.http.post(url, json, this.requestOptions()), _count, true, true);\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(data) {\n        var url = this.makeBaseUrl();\n        var _count = 0;\n\n        if (data != null && data.id != null) {\n          url += '/' + data.id;\n        }\n\n        this.loading(this.getResource(), true, _count);\n        var ro = this.requestOptions().merge(this.makeSearchParams(data));\n        return this.processResponse(this.http.delete(url, ro), _count, true, true);\n      }\n    }, {\n      key: \"put\",\n      value: function put(data) {\n        var url = this.makeBaseUrl();\n        var _count = 0;\n        this.loading(this.getResource(), true, _count);\n        var json = JSON.stringify(data, function (key, value) {\n          if (value !== null) return value;\n        });\n        return this.processResponse(this.http.put(url, json, this.requestOptions()), _count, true, true);\n      }\n    }, {\n      key: \"export\",\n      value: function _export(filters) {\n        if (filters == null) filters = {};\n        filters.filterBehavior = 'Export';\n        var url = this.makeUrlMore();\n        var _count = 0;\n        this.loading(this.getResource(), true, _count);\n        return this.processResponse(this.http.get(url, this.requestOptionsBlob().merge({\n          params: this.makeSearchParams(filters)\n        })), _count, true, false);\n      }\n    }, {\n      key: \"getDataitem\",\n      value: function getDataitem(filters) {\n        this._enableLoading = false;\n        return this.processResponseDataItem(this.getMethodCustom('GetDataItem', filters));\n      }\n    }, {\n      key: \"getDataListCustom\",\n      value: function getDataListCustom(filters) {\n        return this.getMethodCustom('GetDataListCustom', filters);\n      }\n    }, {\n      key: \"getDetails\",\n      value: function getDetails(filters) {\n        return this.getMethodCustom('GetDetails', filters);\n      }\n    }, {\n      key: \"getDataCustom\",\n      value: function getDataCustom(filters) {\n        return this.getMethodCustom('GetDataCustom', filters);\n      }\n    }, {\n      key: \"getDataListCustomPaging\",\n      value: function getDataListCustomPaging(filters) {\n        return this.getMethodCustom('GetDataListCustomPaging', filters);\n      }\n    }, {\n      key: \"getFile\",\n      value: function getFile(file) {\n        return this.processResponseFile(this.http.get(file));\n      }\n    }, {\n      key: \"getUrlConfig\",\n      value: function getUrlConfig(more, filterFieldName, filterBehavior, filters, processResultsCustom, labelInitial) {\n        var urlMore = this.makeUrlMore();\n        var urlMethod = this.makeGetCustomMethodBaseUrl(filterBehavior);\n        var authConfig = this.defaultHeaders();\n        var url = this._enabledOldBack ? urlMethod : urlMore;\n        var filterNew = filters;\n\n        var processResultsDefault = function processResultsDefault(result, params) {\n          var dataList = result.dataList.map(function (item) {\n            var data = {\n              id: item.id,\n              text: item.name\n            };\n            return data;\n          });\n\n          if (labelInitial) {\n            dataList.unshift({\n              id: '',\n              text: labelInitial\n            });\n          }\n\n          if (filterBehavior == \"GetDataListCustomPaging\") {\n            params.page = params.page || 1;\n            return {\n              results: dataList,\n              pagination: {\n                more: params.page * result.summary.pageSize < result.summary.total\n              }\n            };\n          }\n\n          return {\n            results: dataList\n          };\n        };\n\n        if (processResultsCustom) processResultsDefault = processResultsCustom;\n        return {\n          url: url,\n          dataType: 'json',\n          headers: authConfig,\n          data: function data(params) {\n            var filterComposite = Object.assign(filterNew || {}, {\n              filterBehavior: filterBehavior\n            });\n            filterComposite[\"ids\"] = null;\n            filterComposite[filterFieldName] = params.term;\n            filterComposite.pageIndex = params.page || 1;\n            return toQueryString(filterComposite);\n\n            function toQueryString(filters) {\n              if (filters != null) {\n                var queryString = \"\";\n\n                for (var key in filters) {\n                  if (key.toLowerCase().startsWith(\"collection\")) {\n                    if (filters[key]) {\n                      var values = filters[key].toString().split(\",\");\n                      var params = \"\";\n\n                      for (var value in values) {\n                        if (values[value]) queryString += key + \"=\" + values[value] + \"&\";\n                      }\n                    }\n                  } else {\n                    if (filters[key]) queryString += key + \"=\" + filters[key] + \"&\";\n                  }\n                }\n              }\n\n              return queryString;\n            }\n          },\n          processResults: processResultsDefault\n        };\n      }\n    }, {\n      key: \"enableNotification\",\n      value: function enableNotification(enable) {\n        this._enableNotifification = enable;\n        return this;\n      }\n    }, {\n      key: \"enableLoading\",\n      value: function enableLoading(enable) {\n        this._enableLoading = enable;\n        return this;\n      }\n    }, {\n      key: \"setResource\",\n      value: function setResource(resource, endpoint) {\n        this._resource = resource;\n        this._apiDefault = GlobalService.getEndPoints().DEFAULT;\n        if (endpoint) this._apiDefault = endpoint;\n        return this;\n      }\n    }, {\n      key: \"getResource\",\n      value: function getResource() {\n        if (this._resource == null) {\n          throw new Error('resource nÃ£o definido');\n        }\n\n        return this._resource;\n      }\n    }, {\n      key: \"getMethodCustom\",\n      value: function getMethodCustom(method, filters) {\n        if (filters == null) filters = {};\n        if (this._enabledOldBack) return this.getBase(this.makeGetCustomMethodBaseUrl(method), filters);\n        filters.filterBehavior = method;\n        return this.getBase(this.makeUrlMore(), filters);\n      }\n    }, {\n      key: \"getBase\",\n      value: function getBase(url, filters, onlyDataResult) {\n        if (filters != null && filters.id != null) {\n          url += '/' + filters.id;\n        }\n\n        var _count = 0;\n        this.loading(this.getResource(), true, _count);\n        return this.processResponse(this.http.get(url, this.requestOptions().merge({\n          params: this.makeSearchParams(filters)\n        })), _count, false, true);\n      }\n    }, {\n      key: \"requestOptions\",\n      value: function requestOptions() {\n        var contentType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        return {\n          headers: this.defaultHeaders(contentType)\n        };\n      }\n    }, {\n      key: \"requestOptionsBlob\",\n      value: function requestOptionsBlob() {\n        var contentType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var headers = new Headers(this.defaultHeaders(contentType));\n        return {\n          headers: headers //responseType: ResponseContentType.Blob\n\n        };\n      }\n    }, {\n      key: \"defaultHeaders\",\n      value: function defaultHeaders() {\n        var contentType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        if (contentType) return Object.assign(this.HeaderAuth(), this.HeaderContentType());\n        return Object.assign(this.HeaderAuth());\n      }\n    }, {\n      key: \"HeaderAuth\",\n      value: function HeaderAuth() {\n        this._tokenAuth = CacheService.get(GlobalService.getAuthSettings().NAME_TOKEN, this._cacheType);\n        this._tokenAuthAnonymous = CacheService.get(GlobalService.getAuthSettings().NAME_TOKEN_ANONYMOUS, this._cacheType);\n        var TOKEN_AUTH = this._tokenAuthAnonymous || this._tokenAuth;\n\n        if (!TOKEN_AUTH) {\n          return {};\n        }\n\n        if (this._enabledOldBack) {\n          return {\n            'TOKEN_AUTH': CacheService.get('TOKEN_AUTH', this._cacheType)\n          };\n        } else {\n          return {\n            'Authorization': \"Bearer \" + TOKEN_AUTH\n          };\n        }\n      }\n    }, {\n      key: \"HeaderContentType\",\n      value: function HeaderContentType() {\n        return {\n          'Content-Type': 'application/json'\n        };\n      }\n    }, {\n      key: \"makeGetCustomMethodBaseUrl\",\n      value: function makeGetCustomMethodBaseUrl(method) {\n        return this.makeBaseUrl() + \"/\".concat(method);\n      }\n    }, {\n      key: \"makeUrlMore\",\n      value: function makeUrlMore() {\n        return this.makeBaseUrl() + \"/more\";\n      }\n    }, {\n      key: \"makeUrlUpload\",\n      value: function makeUrlUpload() {\n        return this.makeBaseUrl(\"document\");\n      }\n    }, {\n      key: \"makeUrlDeleteUpload\",\n      value: function makeUrlDeleteUpload(folder, fileName) {\n        return this.makeBaseUrl(\"document\") + \"/\" + folder + \"/\" + fileName;\n      }\n    }, {\n      key: \"makeBaseUrl\",\n      value: function makeBaseUrl(subDominio) {\n        var url = \"\";\n        if (subDominio) url = \"\".concat(this._apiDefault, \"/\").concat(subDominio, \"/\").concat(this.getResource());else url = \"\".concat(this._apiDefault, \"/\").concat(this.getResource());\n        return url;\n      }\n    }, {\n      key: \"makeSearchParams\",\n      value: function makeSearchParams(filters) {\n        var params = new HttpParams();\n\n        if (filters != null) {\n          for (var key in filters) {\n            if (key.toLowerCase().startsWith(\"collection\")) {\n              if (filters[key]) {\n                var values = filters[key].toString().split(\",\");\n\n                for (var value in values) {\n                  params.append(key, values[value]);\n                }\n              }\n            } else if (filters.hasOwnProperty(key)) {\n              params.set(key, filters[key]);\n            }\n          }\n        }\n\n        return params;\n      }\n    }, {\n      key: \"successJsonResult\",\n      value: function successJsonResult(response) {\n        var _response = response;\n        return _response;\n      }\n    }, {\n      key: \"successResult\",\n      value: function successResult(response) {\n        return response;\n      }\n    }, {\n      key: \"errorResult\",\n      value: function errorResult(response) {\n        if (response.status == 401) {\n          this.router.navigate([\"/login\"]);\n        }\n\n        if (response.status == 403) {\n          this.router.navigate([\"/unauthorized\"]);\n        }\n\n        var _response = response.json();\n\n        var erros = \"ocorreu um erro!\"; //if (_response.result != null) {\n        //  erros = _response.result.errors[0];\n        //}\n\n        if (!this._enableNotifification) return;\n        this.notificationsService.error('Erro', erros, {\n          timeOut: 5000,\n          showProgressBar: true,\n          pauseOnHover: true,\n          clickToClose: false\n        });\n        return this.riseThrow(erros);\n      }\n    }, {\n      key: \"notification\",\n      value: function notification(response) {\n        var messageCustom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (!this._enableNotifification) return;\n\n        var _response = response.json();\n\n        if (_response.warning && _response.warning.warnings && _response.warning.warnings.length > 0) {\n          for (var index in _response.warning.warnings) {\n            this.notificationsService.warn('AtenÃ§Ã£o', _response.warning.warnings[index], {\n              timeOut: 3000,\n              showProgressBar: true,\n              pauseOnHover: true,\n              clickToClose: false\n            });\n          }\n        } else {\n          var msg = \"OperaÃ§Ã£o realizado com sucesso!\";\n\n          if (_response.result != null) {\n            msg = _response.result.message;\n          }\n\n          if (messageCustom) {\n            msg = messageCustom;\n          }\n\n          this.notificationsService.success('Sucesso', msg, {\n            timeOut: 1000,\n            showProgressBar: true,\n            pauseOnHover: true,\n            clickToClose: false\n          });\n        }\n      }\n    }, {\n      key: \"loading\",\n      value: function loading(resourceName, value, count) {\n        if (this._enableLoading || value == false) {\n          setTimeout(function () {\n            GlobalService.getOperationRequestingEmitter().emit(new OperationRequest(resourceName, count, value));\n          }, 150);\n        }\n      }\n    }, {\n      key: \"countReponse\",\n      value: function countReponse(res) {\n        return res.json().dataList ? res.json().dataList.length : res.json().data ? 1 : 0;\n      }\n    }, {\n      key: \"processResponse\",\n      value: function processResponse(response, _count, notification, jsonResult) {\n        var _this = this;\n\n        return response.pipe(map(function (res) {\n          _count = _this.countReponse(res);\n          if (notification) _this.notification(res);\n          return jsonResult ? _this.successJsonResult(res) : _this.successResult(res);\n        }), catchError(function (error) {\n          return _this.errorResult(error);\n        }), finalize(function () {\n          _this.loading(_this.getResource(), false, _count);\n        }));\n      }\n    }, {\n      key: \"processResponseDataItem\",\n      value: function processResponseDataItem(response) {\n        var _this2 = this;\n\n        return response.pipe(map(function (res) {\n          _this2._enableLoading = true;\n          return res;\n        }));\n      }\n    }, {\n      key: \"processResponseFile\",\n      value: function processResponseFile(response) {\n        return response.pipe(map(function (res) {\n          return res.json();\n        }));\n      }\n    }, {\n      key: \"riseThrow\",\n      value: function riseThrow(erros) {\n        return throwError(erros);\n      }\n    }]);\n\n    return ApiService;\n  }();\n\n  ApiService.Éµfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ÉµÉµinject(i1.HttpClient), i0.ÉµÉµinject(i2.NotificationsService), i0.ÉµÉµinject(i3.Router));\n  };\n\n  ApiService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: ApiService,\n    factory: ApiService.Éµfac\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}