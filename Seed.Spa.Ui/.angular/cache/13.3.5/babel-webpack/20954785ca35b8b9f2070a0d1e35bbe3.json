{"ast":null,"code":"import _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Router } from '@angular/router'; //import { URLSearchParams, } from '@angular/http';\n\nimport { ApiService } from '../services/api.service';\nimport { GlobalService } from '../../global.service';\nimport { CacheService } from '../services/cache.service';\nimport { StartupService } from '../../startup.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/api.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../startup.service\";\nexport var AuthService = /*#__PURE__*/(function () {\n  var AuthService = /*#__PURE__*/function () {\n    function AuthService(apiAuth, api, router, startupService) {\n      _classCallCheck(this, AuthService);\n\n      this.apiAuth = apiAuth;\n      this.api = api;\n      this.router = router;\n      this.startupService = startupService;\n      this._nameToken = GlobalService.getAuthSettings().NAME_TOKEN;\n      this._nameTokenAnonymous = GlobalService.getAuthSettings().NAME_TOKEN_ANONYMOUS;\n      this._nameEndPointAuthApi = \"AUTHAPI\";\n      this._typeLogin = GlobalService.getAuthSettings().TYPE_LOGIN;\n      this._authorizationUrl = GlobalService.getEndPoints().AUTH + '/connect/authorize';\n      this._authorizationClaimsAddUrl = GlobalService.getEndPoints().AUTH + '/AccountAfterAuth/ClaimsAdd';\n      this._authorizationAfterLogin = GlobalService.getEndPoints().AUTH + '/Funnel/Register';\n      this._client_id = GlobalService.getAuthSettings().CLIENT_ID;\n      this._client_id_ro = GlobalService.getAuthSettings().CLIENT_ID_RO;\n      this._client_id_cc = GlobalService.getAuthSettings().CLIENT_ID_CC;\n      this._client_secret_cc = GlobalService.getAuthSettings().CLIENT_SECRET_CC;\n      this._redirect_uri = GlobalService.getEndPoints().APP;\n      this._response_type = \"id_token token\";\n      this._scope = GlobalService.getAuthSettings().SCOPE;\n      this._nameCurrentUser = \"CURRENT_USER\" + GlobalService.getAuthSettings().CLIENT_ID;\n      this._cacheType = GlobalService.getAuthSettings().CACHE_TYPE;\n    }\n\n    _createClass(AuthService, [{\n      key: \"getTypeLogin\",\n      value: function getTypeLogin() {\n        return this._typeLogin;\n      }\n    }, {\n      key: \"processTokenCallback\",\n      value: function processTokenCallback() {\n        if (window.location.href.indexOf(\"access_token\") > -1) {\n          var hash = window.location.hash.substr(1);\n          var result = hash.split('&').reduce(function (result, item) {\n            var parts = item.split('=');\n            result[parts[0]] = parts[1];\n            return result;\n          }, {});\n\n          if (!result.error) {\n            if (result.state !== localStorage[\"state\"]) {\n              console.log(\"<<<<< INVALID STATE >>>>>>\", result.state, localStorage[\"state\"]);\n              localStorage.removeItem(\"state\");\n              this.router.navigate([\"/login\"]);\n            } else {\n              console.log(\"<<<<< VALID STATE >>>>>>\", result.state, localStorage[\"state\"]);\n              console.log(\"<<<<< TOKEN >>>>>>\", result.access_token);\n              console.log(\"<<<<< ENDPOINTS >>>>>>\", GlobalService.getEndPoints());\n              localStorage.removeItem(\"state\");\n\n              this._acceptlogin(result.access_token, false);\n            }\n          }\n        }\n      }\n    }, {\n      key: \"getCurrentUser\",\n      value: function getCurrentUser(callback) {\n        var _this = this;\n\n        var currentUser = this.currentUser();\n        if (currentUser.isAuth) callback(currentUser, false);else {\n          this.api.setResource('CurrentUser').enableNotification(false).get().subscribe(function (data) {\n            CacheService.add(_this._nameCurrentUser, JSON.stringify(data.data), _this._cacheType);\n            callback(_this.currentUser(), true);\n          }, function (err) {});\n        }\n      }\n    }, {\n      key: \"currentUser\",\n      value: function currentUser() {\n        var currentUser = CacheService.get(this._nameCurrentUser, this._cacheType);\n        return {\n          isAuth: currentUser ? true : false,\n          claims: JSON.parse(currentUser)\n        };\n      }\n    }, {\n      key: \"IsAuthApiVerify\",\n      value: function IsAuthApiVerify() {\n        return this.api.setResource('CurrentUser/isAuth').enableNotification(false).get();\n      }\n    }, {\n      key: \"isAuthenticated\",\n      value: function isAuthenticated() {\n        var token = CacheService.get(this._nameToken, this._cacheType);\n        return token !== null;\n      }\n    }, {\n      key: \"_acceptlogin\",\n      value: function _acceptlogin(token, reload) {\n        console.log(\"<<<<<<< _acceptlogin >>>>>>>>>>\", token);\n        CacheService.add(this._nameToken, token, this._cacheType); //this.router.navigate([\"/home\"]);\n        //  if (reload)\n        //    window.location.reload();\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        CacheService.reset(this._cacheType);\n      }\n    }, {\n      key: \"makeUrl\",\n      value: function makeUrl(url) {\n        var noCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        if (noCache) return url;\n        return url + '?v=' + Math.random();\n      }\n    }]);\n\n    return AuthService;\n  }();\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.StartupService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}