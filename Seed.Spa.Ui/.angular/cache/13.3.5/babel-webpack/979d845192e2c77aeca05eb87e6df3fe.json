{"ast":null,"code":"import _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n//import { ApiService } from \"app/common/services/api.service\";\nimport { GlobalService } from \"../../global.service\";\nimport { ViewModel } from '../model/viewmodel';\nimport { ApiService } from '../services/api.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/api.service\";\n\nfunction MultiSelectComponent_section_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"label\")(2, \"input\", 5);\n    i0.ɵɵlistener(\"ngModelChange\", function MultiSelectComponent_section_0_div_1_Template_input_ngModelChange_2_listener($event) {\n      var restoredCtx = i0.ɵɵrestoreView(_r5);\n      var option_r3 = restoredCtx.$implicit;\n      return option_r3.checked = $event;\n    })(\"change\", function MultiSelectComponent_section_0_div_1_Template_input_change_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      var ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.onChange($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var option_r3 = ctx.$implicit;\n    var ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"name\", ctx_r2.ctrlNameItem);\n    i0.ɵɵpropertyInterpolate(\"value\", option_r3.id);\n    i0.ɵɵproperty(\"ngModel\", option_r3.checked);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r3.name, \" \");\n  }\n}\n\nfunction MultiSelectComponent_section_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"section\", 2);\n    i0.ɵɵtemplate(1, MultiSelectComponent_section_0_div_1_Template, 4, 4, \"div\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0._datasource);\n  }\n}\n\nfunction MultiSelectComponent_select_1_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var option_r8 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", option_r8.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r8.name);\n  }\n}\n\nfunction MultiSelectComponent_select_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"select\", 6);\n    i0.ɵɵtemplate(1, MultiSelectComponent_select_1_option_1_Template, 2, 2, \"option\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r1._ctrlNameNumberId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1._datasource);\n  }\n}\n\nexport var MultiSelectComponent = /*#__PURE__*/(function () {\n  var MultiSelectComponent = /*#__PURE__*/function () {\n    function MultiSelectComponent(api) {\n      _classCallCheck(this, MultiSelectComponent);\n\n      this.api = api;\n      this.type = \"filter\";\n      this._filter = {};\n      this.enabledSelect2 = GlobalService.getGlobalSettings().enabledSelect2;\n      this.fieldFilterName = \"nome\";\n      this.filterBehavior = \"GetDataItem\";\n    }\n\n    _createClass(MultiSelectComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this = this;\n\n        this._numberId = Math.floor(Math.random() * 10000 + 1);\n        this._ctrlNameNumberId = this.ctrlName + this._numberId.toString();\n\n        if (!this.disabledOnInit) {\n          this.init();\n          this.getInstance();\n        }\n\n        this._notificationEmitter = GlobalService.getNotificationEmitter().subscribe(function (not) {\n          if (not.event == \"edit\" || not.event == \"create\" || not.event == \"init\") {\n            _this.init();\n          }\n\n          if (not.event == \"change\") {\n            if (not.data.dataitem == _this.dataitem) _this.getInstance(not.data.parentFilter);\n          }\n        });\n      }\n    }, {\n      key: \"onChange\",\n      value: function onChange(e) {\n        this.updateValue(e.target.value, e.target.checked);\n      }\n    }, {\n      key: \"init\",\n      value: function init() {\n        this._modelOutput = [];\n        this._datasource = [];\n\n        if (this.type.toLowerCase() == \"filter\") {\n          if (this.vm.modelFilter[this.ctrlName]) {\n            this._modelInput = this.transformeCSVModelFiltersInCollection(this.vm.modelFilter[this.ctrlName]);\n          }\n        } else this._modelInput = this.vm.model[this.ctrlName];\n\n        this._collectionjsonTemplate = \"\";\n        $(\"#\" + this._ctrlNameNumberId).val(null).trigger('change');\n      }\n    }, {\n      key: \"transformeCSVModelFiltersInCollection\",\n      value: function transformeCSVModelFiltersInCollection(modelinputFilterCsv) {\n        var modelInputItems = [];\n\n        if (modelinputFilterCsv) {\n          var modelinputFilters = modelinputFilterCsv.split(',');\n\n          for (var i = 0; i < modelinputFilters.length; i++) {\n            var modelInputItem = {};\n            modelInputItem[this.ctrlNameItem] = modelinputFilters[i];\n            modelInputItems.push(modelInputItem);\n          }\n        }\n\n        return modelInputItems;\n      }\n    }, {\n      key: \"updateValue\",\n      value: function updateValue(value, checked) {\n        this.addItem(value, checked);\n        this.updateSerialize();\n      }\n    }, {\n      key: \"updateSerialize\",\n      value: function updateSerialize() {\n        if (this.type.toLowerCase() == \"filter\") return this.vm.modelFilter[this.ctrlName] = this.serializeToFilter();\n        this.vm.model[this.ctrlName] = this.serializeToSave();\n      }\n    }, {\n      key: \"addItems\",\n      value: function addItems(values) {\n        for (var i = 0; i < values.length; i++) {\n          this.updateValue(values[i], true);\n        }\n      }\n    }, {\n      key: \"addItem\",\n      value: function addItem(value, checked) {\n        if (value) {\n          if (checked) {\n            this._modelOutput.push(value);\n          } else {\n            this._modelOutput = this._modelOutput.filter(function (item) {\n              return item != value;\n            });\n          }\n        }\n      }\n    }, {\n      key: \"serializeToSave\",\n      value: function serializeToSave() {\n        var items = [];\n\n        for (var item in this._modelOutput) {\n          items.push(\"{ \\\"\".concat(this.ctrlNameItem, \"\\\" : \\\"\").concat(this._modelOutput[item], \"\\\"}\"));\n        }\n\n        this._collectionjsonTemplate = \"[ \".concat(items.join(), \" ]\");\n        return JSON.parse(this._collectionjsonTemplate);\n      }\n    }, {\n      key: \"serializeToFilter\",\n      value: function serializeToFilter() {\n        return this._modelOutput.join();\n      }\n    }, {\n      key: \"getInstance\",\n      value: function getInstance(parentFilter) {\n        var _this2 = this;\n\n        var filters = Object.assign(this.datafilters || {}, parentFilter || {});\n\n        if (this.enabledSelect2) {\n          if (this._modelInput) {\n            filters.ids = this._modelInput.map(function (item) {\n              return item[_this2.ctrlNameItem];\n            });\n            if (filters.ids.length > 0) this.getInstanceMultiSelect(filters);\n          }\n\n          this.getInstanceMultiSelect2(filters);\n        } else this.getInstanceMultiSelect(filters);\n      }\n    }, {\n      key: \"getInstanceMultiSelect2\",\n      value: function getInstanceMultiSelect2(filters) {\n        var _this3 = this;\n\n        var config = {};\n\n        if (!this.configCustom) {\n          config = {\n            ajax: this.api.setResource(this.dataitem, this.endpoint).getUrlConfig(true, this.fieldFilterName, this.filterBehavior, filters)\n          };\n        }\n\n        if (this.configCustom) {\n          config = {\n            ajax: this.configCustom\n          };\n        }\n\n        setTimeout(function () {\n          $(\"#\" + _this3._ctrlNameNumberId).select2(config).on('select2:select', function (e) {\n            var selcteds = $(\"#\" + _this3._ctrlNameNumberId).val();\n            _this3._modelOutput = [];\n\n            _this3.addItems(selcteds);\n          }).on('select2:unselect', function (e) {\n            var selcteds = $(\"#\" + _this3._ctrlNameNumberId).val();\n\n            if (selcteds.length > 0) {\n              _this3._modelOutput = [];\n\n              _this3.addItems(selcteds);\n            } else {\n              if (_this3.ctrlName) {\n                _this3.vm.model[_this3.ctrlName] = null;\n                _this3.vm.modelFilter[_this3.ctrlName] = null;\n              }\n            }\n          });\n        }, 100);\n      }\n    }, {\n      key: \"getInstanceMultiSelect\",\n      value: function getInstanceMultiSelect(filters) {\n        var _this4 = this;\n\n        this.api.setResource(this.dataitem, this.endpoint).getDataitem(filters).subscribe(function (result) {\n          _this4._datasource = [];\n\n          var _loop = function _loop(item) {\n            _this4._datasource.push({\n              id: result.dataList[item].id,\n              name: result.dataList[item].name,\n              checked: _this4._modelInput ? _this4._modelInput.filter(function (selecteds) {\n                var checked = selecteds[_this4.ctrlNameItem] == result.dataList[item].id;\n                if (checked) _this4.addItem(result.dataList[item].id, checked);\n                return checked;\n              }).length > 0 : false\n            });\n          };\n\n          for (var item in result.dataList) {\n            _loop(item);\n          }\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._notificationEmitter) this._notificationEmitter.unsubscribe();\n      }\n    }]);\n\n    return MultiSelectComponent;\n  }();\n\n  MultiSelectComponent.ɵfac = function MultiSelectComponent_Factory(t) {\n    return new (t || MultiSelectComponent)(i0.ɵɵdirectiveInject(i1.ApiService));\n  };\n\n  MultiSelectComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MultiSelectComponent,\n    selectors: [[\"multiselect\"]],\n    inputs: {\n      dataitem: \"dataitem\",\n      datafilters: \"datafilters\",\n      vm: \"vm\",\n      endpoint: \"endpoint\",\n      ctrlName: \"ctrlName\",\n      ctrlNameItem: \"ctrlNameItem\",\n      type: \"type\",\n      disabledOnInit: \"disabledOnInit\",\n      enabledSelect2: \"enabledSelect2\",\n      fieldFilterName: \"fieldFilterName\",\n      filterBehavior: \"filterBehavior\",\n      configCustom: \"configCustom\"\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[\"class\", \"col-md-12 section-scroll\", 4, \"ngIf\"], [\"class\", \"form-control\", \"multiple\", \"\", 3, \"id\", 4, \"ngIf\"], [1, \"col-md-12\", \"section-scroll\"], [\"class\", \"checkbox\", 4, \"ngFor\", \"ngForOf\"], [1, \"checkbox\"], [\"type\", \"checkbox\", 3, \"ngModel\", \"name\", \"value\", \"ngModelChange\", \"change\"], [\"multiple\", \"\", 1, \"form-control\", 3, \"id\"], [\"selected\", \"\", 3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"selected\", \"\", 3, \"value\"]],\n    template: function MultiSelectComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MultiSelectComponent_section_0_Template, 2, 1, \"section\", 0);\n        i0.ɵɵtemplate(1, MultiSelectComponent_select_1_Template, 2, 2, \"select\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.enabledSelect2);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.enabledSelect2);\n      }\n    },\n    encapsulation: 2\n  });\n  return MultiSelectComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}