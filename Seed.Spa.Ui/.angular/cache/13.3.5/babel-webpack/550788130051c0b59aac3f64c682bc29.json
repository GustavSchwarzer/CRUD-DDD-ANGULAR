{"ast":null,"code":"import _toConsumableArray from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _assertThisInitialized from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\assertThisInitialized.js\";\nimport _inherits from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _defineProperty from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport * as i0 from '@angular/core';\nimport { Pipe, Injectable, Directive, Input, EventEmitter, Component, Output, ViewChild, HostBinding, HostListener, TemplateRef, ContentChildren, forwardRef, ContentChild, ViewChildren, NgModule } from '@angular/core';\nimport * as i1 from '@angular/forms';\nimport { FormControl, FormGroup, NG_VALUE_ACCESSOR, ReactiveFormsModule, FormsModule, COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1$1 from 'ng2-material-dropdown';\nimport { Ng2Dropdown, Ng2DropdownModule } from 'ng2-material-dropdown';\nimport { __awaiter } from 'tslib';\nimport { filter as filter$1, map, first as first$1, debounceTime as debounceTime$1 } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\nimport { first, distinctUntilChanged, debounceTime, filter } from 'rxjs/operators';\nvar _c0 = [\"input\"];\n\nfunction TagComponent_div_1_ng_template_1_Template(rf, ctx) {}\n\nvar _c1 = function _c1(a0, a1) {\n  return {\n    item: a0,\n    index: a1\n  };\n};\n\nfunction TagComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TagComponent_div_1_ng_template_1_Template, 0, 0, \"ng-template\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"contenteditable\", ctx_r0.editing);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(3, _c1, ctx_r0.model, ctx_r0.index))(\"ngTemplateOutlet\", ctx_r0.template);\n  }\n}\n\nfunction TagComponent_div_2_delete_icon_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"delete-icon\", 8);\n    i0.ɵɵlistener(\"click\", function TagComponent_div_2_delete_icon_3_Template_delete_icon_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      var ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.remove($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TagComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 6);\n    i0.ɵɵlistener(\"keydown.enter\", function TagComponent_div_2_Template_div_keydown_enter_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      var ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.disableEditMode($event);\n    })(\"keydown.escape\", function TagComponent_div_2_Template_div_keydown_escape_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      var ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.disableEditMode($event);\n    })(\"click\", function TagComponent_div_2_Template_div_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      var ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.editing ? $event.stopPropagation() : undefined;\n    })(\"blur\", function TagComponent_div_2_Template_div_blur_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      var ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onBlurred($event);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, TagComponent_div_2_delete_icon_3_Template, 1, 0, \"delete-icon\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"contenteditable\", ctx_r1.editing)(\"title\", ctx_r1.getDisplayValue(ctx_r1.model));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.getDisplayValue(ctx_r1.model), \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.isDeleteIconVisible());\n  }\n}\n\nfunction TagComponent_tag_ripple_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tag-ripple\", 9);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"state\", ctx_r2.rippleState);\n    i0.ɵɵattribute(\"tabindex\", -1);\n  }\n}\n\nfunction TagInputDropdown_ng2_menu_item_2_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 6);\n    i0.ɵɵpipe(1, \"highlight\");\n  }\n\n  if (rf & 2) {\n    var item_r1 = i0.ɵɵnextContext().$implicit;\n    var ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(1, 1, item_r1[ctx_r4.displayBy], ctx_r4.tagInput.inputForm.value.value), i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction TagInputDropdown_ng2_menu_item_2_2_ng_template_0_Template(rf, ctx) {}\n\nvar _c2 = function _c2(a0, a1, a2) {\n  return {\n    item: a0,\n    index: a1,\n    last: a2\n  };\n};\n\nfunction TagInputDropdown_ng2_menu_item_2_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TagInputDropdown_ng2_menu_item_2_2_ng_template_0_Template, 0, 0, \"ng-template\", 7);\n  }\n\n  if (rf & 2) {\n    var ctx_r8 = i0.ɵɵnextContext();\n    var item_r1 = ctx_r8.$implicit;\n    var index_r2 = ctx_r8.index;\n    var last_r3 = ctx_r8.last;\n    var ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.templates.first)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction3(2, _c2, item_r1, index_r2, last_r3));\n  }\n}\n\nfunction TagInputDropdown_ng2_menu_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ng2-menu-item\", 3);\n    i0.ɵɵtemplate(1, TagInputDropdown_ng2_menu_item_2_span_1_Template, 2, 4, \"span\", 4);\n    i0.ɵɵtemplate(2, TagInputDropdown_ng2_menu_item_2_2_Template, 1, 6, null, 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r1 = ctx.$implicit;\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", item_r1)(\"ngSwitch\", !!ctx_r0.templates.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", false);\n  }\n}\n\nfunction TagInputComponent_tag_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tag\", 6);\n    i0.ɵɵlistener(\"onSelect\", function TagInputComponent_tag_2_Template_tag_onSelect_0_listener() {\n      var restoredCtx = i0.ɵɵrestoreView(_r6);\n      var item_r3 = restoredCtx.$implicit;\n      var ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.selectItem(item_r3);\n    })(\"onRemove\", function TagInputComponent_tag_2_Template_tag_onRemove_0_listener() {\n      var restoredCtx = i0.ɵɵrestoreView(_r6);\n      var item_r3 = restoredCtx.$implicit;\n      var i_r4 = restoredCtx.index;\n      var ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onRemoveRequested(item_r3, i_r4);\n    })(\"onKeyDown\", function TagInputComponent_tag_2_Template_tag_onKeyDown_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      var ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.handleKeydown($event);\n    })(\"onTagEdited\", function TagInputComponent_tag_2_Template_tag_onTagEdited_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      var ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.updateEditedTag($event);\n    })(\"onBlur\", function TagInputComponent_tag_2_Template_tag_onBlur_0_listener($event) {\n      var restoredCtx = i0.ɵɵrestoreView(_r6);\n      var i_r4 = restoredCtx.index;\n      var ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.onTagBlurred($event, i_r4);\n    })(\"dragstart\", function TagInputComponent_tag_2_Template_tag_dragstart_0_listener($event) {\n      var restoredCtx = i0.ɵɵrestoreView(_r6);\n      var item_r3 = restoredCtx.$implicit;\n      var i_r4 = restoredCtx.index;\n      var ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.dragZone ? ctx_r11.onDragStarted($event, item_r3, i_r4) : undefined;\n    })(\"drop\", function TagInputComponent_tag_2_Template_tag_drop_0_listener($event) {\n      var restoredCtx = i0.ɵɵrestoreView(_r6);\n      var i_r4 = restoredCtx.index;\n      var ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.dragZone ? ctx_r12.onTagDropped($event, i_r4) : undefined;\n    })(\"dragenter\", function TagInputComponent_tag_2_Template_tag_dragenter_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      var ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.dragZone ? ctx_r13.onDragOver($event) : undefined;\n    })(\"dragover\", function TagInputComponent_tag_2_Template_tag_dragover_0_listener($event) {\n      var restoredCtx = i0.ɵɵrestoreView(_r6);\n      var i_r4 = restoredCtx.index;\n      var ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.dragZone ? ctx_r14.onDragOver($event, i_r4) : undefined;\n    })(\"dragleave\", function TagInputComponent_tag_2_Template_tag_dragleave_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      var ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.dragZone ? ctx_r15.dragProvider.onDragEnd() : undefined;\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r3 = ctx.$implicit;\n    var i_r4 = ctx.index;\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"draggable\", ctx_r0.editable);\n    i0.ɵɵproperty(\"canAddTag\", ctx_r0.isTagValid)(\"disabled\", ctx_r0.disable)(\"@animation\", ctx_r0.animationMetadata)(\"hasRipple\", ctx_r0.ripple)(\"index\", i_r4)(\"removable\", ctx_r0.removable)(\"editable\", ctx_r0.editable)(\"displayBy\", ctx_r0.displayBy)(\"identifyBy\", ctx_r0.identifyBy)(\"template\", !!ctx_r0.hasCustomTemplate() ? ctx_r0.templates.first : undefined)(\"draggable\", ctx_r0.dragZone)(\"model\", item_r3);\n    i0.ɵɵattribute(\"tabindex\", 0);\n  }\n}\n\nfunction TagInputComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n}\n\nfunction TagInputComponent_div_6_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 10)(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var error_r17 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(error_r17);\n  }\n}\n\nfunction TagInputComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, TagInputComponent_div_6_p_1_Template, 3, 1, \"p\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.theme);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.errors);\n  }\n}\n\nvar _c3 = [\"*\"];\n\nvar escape = function escape(s) {\n  return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n};\n\nvar HighlightPipe = /*#__PURE__*/(function () {\n  var HighlightPipe = /*#__PURE__*/function () {\n    function HighlightPipe() {\n      _classCallCheck(this, HighlightPipe);\n    }\n\n    _createClass(HighlightPipe, [{\n      key: \"transform\",\n      value:\n      /**\n       * @name transform\n       * @param value {string}\n       * @param arg {string}\n       */\n      function transform(value, arg) {\n        if (!arg.trim()) {\n          return value;\n        }\n\n        try {\n          var regex = new RegExp(\"(\".concat(escape(arg), \")\"), 'i');\n          return value.replace(regex, '<b>$1</b>');\n        } catch (e) {\n          return value;\n        }\n      }\n    }]);\n\n    return HighlightPipe;\n  }();\n\n  HighlightPipe.ɵfac = function HighlightPipe_Factory(t) {\n    return new (t || HighlightPipe)();\n  };\n\n  HighlightPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"highlight\",\n    type: HighlightPipe,\n    pure: true\n  });\n  return HighlightPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n** constants and default values for <tag-input>\n */\n\n\nvar PLACEHOLDER = '+ Tag';\nvar SECONDARY_PLACEHOLDER = 'Enter a new tag';\nvar KEYDOWN = 'keydown';\nvar KEYUP = 'keyup';\nvar FOCUS = 'focus';\nvar MAX_ITEMS_WARNING = 'The number of items specified was greater than the property max-items.';\nvar ACTIONS_KEYS = {\n  DELETE: 'DELETE',\n  SWITCH_PREV: 'SWITCH_PREV',\n  SWITCH_NEXT: 'SWITCH_NEXT',\n  TAB: 'TAB'\n};\nvar KEY_PRESS_ACTIONS = {\n  8: ACTIONS_KEYS.DELETE,\n  46: ACTIONS_KEYS.DELETE,\n  37: ACTIONS_KEYS.SWITCH_PREV,\n  39: ACTIONS_KEYS.SWITCH_NEXT,\n  9: ACTIONS_KEYS.TAB\n};\nvar DRAG_AND_DROP_KEY = 'Text';\nvar NEXT = 'NEXT';\nvar PREV = 'PREV';\nvar DragProvider = /*#__PURE__*/(function () {\n  var DragProvider = /*#__PURE__*/function () {\n    function DragProvider() {\n      _classCallCheck(this, DragProvider);\n\n      this.state = {\n        dragging: false,\n        dropping: false,\n        index: undefined\n      };\n    }\n    /**\n     * @name setDraggedItem\n     * @param event\n     * @param tag\n     */\n\n\n    _createClass(DragProvider, [{\n      key: \"setDraggedItem\",\n      value: function setDraggedItem(event, tag) {\n        if (event && event.dataTransfer) {\n          event.dataTransfer.setData(DRAG_AND_DROP_KEY, JSON.stringify(tag));\n        }\n      }\n      /**\n       * @name getDraggedItem\n       * @param event\n       */\n\n    }, {\n      key: \"getDraggedItem\",\n      value: function getDraggedItem(event) {\n        if (event && event.dataTransfer) {\n          var data = event.dataTransfer.getData(DRAG_AND_DROP_KEY);\n\n          try {\n            return JSON.parse(data);\n          } catch (_a) {\n            return;\n          }\n        }\n      }\n      /**\n       * @name setSender\n       * @param sender\n       */\n\n    }, {\n      key: \"setSender\",\n      value: function setSender(sender) {\n        this.sender = sender;\n      }\n      /**\n       * @name setReceiver\n       * @param receiver\n       */\n\n    }, {\n      key: \"setReceiver\",\n      value: function setReceiver(receiver) {\n        this.receiver = receiver;\n      }\n      /**\n       * @name onTagDropped\n       * @param tag\n       * @param indexDragged\n       * @param indexDropped\n       */\n\n    }, {\n      key: \"onTagDropped\",\n      value: function onTagDropped(tag, indexDragged, indexDropped) {\n        this.onDragEnd();\n        this.sender.onRemoveRequested(tag, indexDragged);\n        this.receiver.onAddingRequested(false, tag, indexDropped);\n      }\n      /**\n       * @name setState\n       * @param state\n       */\n\n    }, {\n      key: \"setState\",\n      value: function setState(state) {\n        this.state = Object.assign(Object.assign({}, this.state), state);\n      }\n      /**\n       * @name getState\n       * @param key\n       */\n\n    }, {\n      key: \"getState\",\n      value: function getState(key) {\n        return key ? this.state[key] : this.state;\n      }\n      /**\n       * @name onDragEnd\n       */\n\n    }, {\n      key: \"onDragEnd\",\n      value: function onDragEnd() {\n        this.setState({\n          dragging: false,\n          dropping: false,\n          index: undefined\n        });\n      }\n    }]);\n\n    return DragProvider;\n  }();\n\n  DragProvider.ɵfac = function DragProvider_Factory(t) {\n    return new (t || DragProvider)();\n  };\n\n  DragProvider.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DragProvider,\n    factory: DragProvider.ɵfac\n  });\n  return DragProvider;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar defaults = {\n  tagInput: {\n    separatorKeys: [],\n    separatorKeyCodes: [],\n    maxItems: Infinity,\n    placeholder: PLACEHOLDER,\n    secondaryPlaceholder: SECONDARY_PLACEHOLDER,\n    validators: [],\n    asyncValidators: [],\n    onlyFromAutocomplete: false,\n    errorMessages: {},\n    theme: '',\n    onTextChangeDebounce: 250,\n    inputId: null,\n    inputClass: '',\n    clearOnBlur: false,\n    hideForm: false,\n    addOnBlur: false,\n    addOnPaste: false,\n    pasteSplitPattern: ',',\n    blinkIfDupe: true,\n    removable: true,\n    editable: false,\n    allowDupes: false,\n    modelAsStrings: false,\n    trimTags: true,\n    ripple: true,\n    tabIndex: '',\n    disable: false,\n    dragZone: '',\n    onRemoving: undefined,\n    onAdding: undefined,\n    displayBy: 'display',\n    identifyBy: 'value',\n    animationDuration: {\n      enter: '250ms',\n      leave: '150ms'\n    }\n  },\n  dropdown: {\n    displayBy: 'display',\n    identifyBy: 'value',\n    appendToBody: true,\n    offset: '50 0',\n    focusFirstElement: false,\n    showDropdownIfEmpty: false,\n    minimumTextLength: 1,\n    limitItemsTo: Infinity,\n    keepOpen: true,\n    dynamicUpdate: true,\n    zIndex: 1000,\n    matchingFn: matchingFn\n  }\n};\n/**\n * @name matchingFn\n * @param this\n * @param value\n * @param target\n */\n\nfunction matchingFn(value, target) {\n  var targetValue = target[this.displayBy].toString();\n  return targetValue && targetValue.toLowerCase().indexOf(value.toLowerCase()) >= 0;\n}\n\nvar OptionsProvider = /*#__PURE__*/(function () {\n  var OptionsProvider = /*#__PURE__*/function () {\n    function OptionsProvider() {\n      _classCallCheck(this, OptionsProvider);\n    }\n\n    _createClass(OptionsProvider, [{\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        OptionsProvider.defaults.tagInput = Object.assign(Object.assign({}, defaults.tagInput), options.tagInput);\n        OptionsProvider.defaults.dropdown = Object.assign(Object.assign({}, defaults.dropdown), options.dropdown);\n      }\n    }]);\n\n    return OptionsProvider;\n  }();\n\n  OptionsProvider.defaults = defaults;\n  return OptionsProvider;\n})();\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\nvar TagInputAccessor = /*#__PURE__*/(function () {\n  var TagInputAccessor = /*#__PURE__*/function () {\n    function TagInputAccessor() {\n      _classCallCheck(this, TagInputAccessor);\n\n      this._items = [];\n      /**\n       * @name displayBy\n       */\n\n      this.displayBy = OptionsProvider.defaults.tagInput.displayBy;\n      /**\n       * @name identifyBy\n       */\n\n      this.identifyBy = OptionsProvider.defaults.tagInput.identifyBy;\n    }\n\n    _createClass(TagInputAccessor, [{\n      key: \"items\",\n      get: function get() {\n        return this._items;\n      },\n      set: function set(items) {\n        this._items = items;\n\n        this._onChangeCallback(this._items);\n      }\n    }, {\n      key: \"onTouched\",\n      value: function onTouched() {\n        this._onTouchedCallback();\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(items) {\n        this._items = items || [];\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this._onChangeCallback = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this._onTouchedCallback = fn;\n      }\n      /**\n       * @name getItemValue\n       * @param item\n       * @param fromDropdown\n       */\n\n    }, {\n      key: \"getItemValue\",\n      value: function getItemValue(item) {\n        var fromDropdown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var property = fromDropdown && this.dropdown ? this.dropdown.identifyBy : this.identifyBy;\n        return isObject(item) ? item[property] : item;\n      }\n      /**\n       * @name getItemDisplay\n       * @param item\n       * @param fromDropdown\n       */\n\n    }, {\n      key: \"getItemDisplay\",\n      value: function getItemDisplay(item) {\n        var fromDropdown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var property = fromDropdown && this.dropdown ? this.dropdown.displayBy : this.displayBy;\n        return isObject(item) ? item[property] : item;\n      }\n      /**\n       * @name getItemsWithout\n       * @param index\n       */\n\n    }, {\n      key: \"getItemsWithout\",\n      value: function getItemsWithout(index) {\n        return this.items.filter(function (item, position) {\n          return position !== index;\n        });\n      }\n    }]);\n\n    return TagInputAccessor;\n  }();\n\n  TagInputAccessor.ɵfac = function TagInputAccessor_Factory(t) {\n    return new (t || TagInputAccessor)();\n  };\n\n  TagInputAccessor.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TagInputAccessor,\n    inputs: {\n      displayBy: \"displayBy\",\n      identifyBy: \"identifyBy\"\n    }\n  });\n  return TagInputAccessor;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @name listen\n * @param listenerType\n * @param action\n * @param condition\n */\n\n\nfunction listen(listenerType, action) {\n  var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  // if the event provided does not exist, throw an error\n  if (!this.listeners.hasOwnProperty(listenerType)) {\n    throw new Error('The event entered may be wrong');\n  } // if a condition is present and is false, exit early\n\n\n  if (!condition) {\n    return;\n  } // fire listener\n\n\n  this.listeners[listenerType].push(action);\n}\n\nvar TagInputForm = /*#__PURE__*/(function () {\n  var TagInputForm = /*#__PURE__*/function () {\n    function TagInputForm() {\n      _classCallCheck(this, TagInputForm);\n\n      /**\n       * @name onSubmit\n       */\n      this.onSubmit = new EventEmitter();\n      /**\n       * @name onBlur\n       */\n\n      this.onBlur = new EventEmitter();\n      /**\n       * @name onFocus\n       */\n\n      this.onFocus = new EventEmitter();\n      /**\n       * @name onKeyup\n       */\n\n      this.onKeyup = new EventEmitter();\n      /**\n       * @name onKeydown\n       */\n\n      this.onKeydown = new EventEmitter();\n      /**\n       * @name inputTextChange\n       */\n\n      this.inputTextChange = new EventEmitter();\n      /**\n       * @name validators\n       */\n\n      this.validators = [];\n      /**\n       * @name asyncValidators\n       * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n       */\n\n      this.asyncValidators = [];\n      /**\n       * @name tabindex\n       * @desc pass through the specified tabindex to the input\n       */\n\n      this.tabindex = '';\n      /**\n       * @name disabled\n       */\n\n      this.disabled = false;\n      this.item = new FormControl({\n        value: '',\n        disabled: this.disabled\n      });\n    }\n    /**\n     * @name inputText\n     */\n\n\n    _createClass(TagInputForm, [{\n      key: \"inputText\",\n      get: function get() {\n        return this.item.value;\n      }\n      /**\n       * @name inputText\n       * @param text {string}\n       */\n      ,\n      set: function set(text) {\n        this.item.setValue(text);\n        this.inputTextChange.emit(text);\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.item.setValidators(this.validators);\n        this.item.setAsyncValidators(this.asyncValidators); // creating form\n\n        this.form = new FormGroup({\n          item: this.item\n        });\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (changes.disabled && !changes.disabled.firstChange) {\n          if (changes.disabled.currentValue) {\n            this.form.controls['item'].disable();\n          } else {\n            this.form.controls['item'].enable();\n          }\n        }\n      }\n      /**\n       * @name value\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this.form.get('item');\n      }\n      /**\n       * @name isInputFocused\n       */\n\n    }, {\n      key: \"isInputFocused\",\n      value: function isInputFocused() {\n        var doc = typeof document !== 'undefined' ? document : undefined;\n        return doc ? doc.activeElement === this.input.nativeElement : false;\n      }\n      /**\n       * @name getErrorMessages\n       * @param messages\n       */\n\n    }, {\n      key: \"getErrorMessages\",\n      value: function getErrorMessages(messages) {\n        var _this = this;\n\n        return Object.keys(messages).filter(function (err) {\n          return _this.value.hasError(err);\n        }).map(function (err) {\n          return messages[err];\n        });\n      }\n      /**\n       * @name hasErrors\n       */\n\n    }, {\n      key: \"hasErrors\",\n      value: function hasErrors() {\n        var _this$form = this.form,\n            dirty = _this$form.dirty,\n            value = _this$form.value,\n            valid = _this$form.valid;\n        return dirty && value.item && !valid;\n      }\n      /**\n       * @name focus\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this.input.nativeElement.focus();\n      }\n      /**\n       * @name blur\n       */\n\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this.input.nativeElement.blur();\n      }\n      /**\n       * @name getElementPosition\n       */\n\n    }, {\n      key: \"getElementPosition\",\n      value: function getElementPosition() {\n        return this.input.nativeElement.getBoundingClientRect();\n      }\n      /**\n       * - removes input from the component\n       * @name destroy\n       */\n\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        var input = this.input.nativeElement;\n        input.parentElement.removeChild(input);\n      }\n      /**\n       * @name onKeyDown\n       * @param $event\n       */\n\n    }, {\n      key: \"onKeyDown\",\n      value: function onKeyDown($event) {\n        this.inputText = this.value.value;\n\n        if ($event.key === 'Enter') {\n          this.submit($event);\n        } else {\n          return this.onKeydown.emit($event);\n        }\n      }\n      /**\n       * @name onKeyUp\n       * @param $event\n       */\n\n    }, {\n      key: \"onKeyUp\",\n      value: function onKeyUp($event) {\n        this.inputText = this.value.value;\n        return this.onKeyup.emit($event);\n      }\n      /**\n       * @name submit\n       */\n\n    }, {\n      key: \"submit\",\n      value: function submit($event) {\n        $event.preventDefault();\n        this.onSubmit.emit($event);\n      }\n    }]);\n\n    return TagInputForm;\n  }();\n\n  TagInputForm.ɵfac = function TagInputForm_Factory(t) {\n    return new (t || TagInputForm)();\n  };\n\n  TagInputForm.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TagInputForm,\n    selectors: [[\"tag-input-form\"]],\n    viewQuery: function TagInputForm_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.input = _t.first);\n      }\n    },\n    inputs: {\n      placeholder: \"placeholder\",\n      validators: \"validators\",\n      asyncValidators: \"asyncValidators\",\n      inputId: \"inputId\",\n      inputClass: \"inputClass\",\n      tabindex: \"tabindex\",\n      disabled: \"disabled\",\n      inputText: \"inputText\"\n    },\n    outputs: {\n      onSubmit: \"onSubmit\",\n      onBlur: \"onBlur\",\n      onFocus: \"onFocus\",\n      onKeyup: \"onKeyup\",\n      onKeydown: \"onKeydown\",\n      inputTextChange: \"inputTextChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 8,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"text\", \"autocomplete\", \"off\", \"minlength\", \"1\", \"formControlName\", \"item\", 1, \"ng2-tag-input__text-input\", 3, \"tabindex\", \"ngClass\", \"focus\", \"blur\", \"keydown\", \"keyup\"], [\"input\", \"\"]],\n    template: function TagInputForm_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function TagInputForm_Template_form_ngSubmit_0_listener($event) {\n          return ctx.submit($event);\n        });\n        i0.ɵɵelementStart(1, \"input\", 1, 2);\n        i0.ɵɵlistener(\"focus\", function TagInputForm_Template_input_focus_1_listener($event) {\n          return ctx.onFocus.emit($event);\n        })(\"blur\", function TagInputForm_Template_input_blur_1_listener($event) {\n          return ctx.onBlur.emit($event);\n        })(\"keydown\", function TagInputForm_Template_input_keydown_1_listener($event) {\n          return ctx.onKeyDown($event);\n        })(\"keyup\", function TagInputForm_Template_input_keyup_1_listener($event) {\n          return ctx.onKeyUp($event);\n        });\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"tabindex\", ctx.disabled ? -1 : ctx.tabindex ? ctx.tabindex : 0);\n        i0.ɵɵproperty(\"ngClass\", ctx.inputClass);\n        i0.ɵɵattribute(\"id\", ctx.inputId)(\"placeholder\", ctx.placeholder)(\"aria-label\", ctx.placeholder)(\"tabindex\", ctx.tabindex)(\"disabled\", ctx.disabled ? ctx.disabled : null);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.DefaultValueAccessor, i1.MinLengthValidator, i1.NgControlStatus, i1.FormControlName, i2.NgClass],\n    styles: [\".dark[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:focus{box-shadow:0 0 0 1px #323232}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]{background-color:#fff;display:inline-block;color:#555;vertical-align:middle;max-width:100%;height:42px;line-height:44px}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:none;box-shadow:none;outline:none;background-color:transparent;padding:0 6px;margin:0;width:auto;max-width:inherit}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::-moz-placeholder{color:#777;opacity:1}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:-ms-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus{border:none;box-shadow:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused[_ngcontent-%COMP%]{box-shadow:inset 0 1px 1px #0006;border:1px solid #ccc}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{box-shadow:inset 0 1px 1px #d9534f}.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;transition:all .25s;padding:.25rem 0;min-height:32px;cursor:text;border-bottom:2px solid #efefef}.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.ng2-tag-input.ng2-tag-input--focused[_ngcontent-%COMP%]{border-bottom:2px solid #2196F3}.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{border-bottom:2px solid #f44336}.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.ng2-tag-input[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{margin:.1em 0}.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.minimal.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:1px solid transparent}.minimal.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.minimal.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.minimal.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.minimal.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.minimal.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.dark.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #444}.dark.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.dark.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.dark.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.dark.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.dark.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.bootstrap.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #efefef}.bootstrap.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.bootstrap.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.bootstrap.ng2-tag-input.ng2-tag-input--focused[_ngcontent-%COMP%]{border-bottom:2px solid #0275d8}.bootstrap.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{border-bottom:2px solid #d9534f}.bootstrap.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.bootstrap.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.bootstrap.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;padding:4px;cursor:text;box-shadow:inset 0 1px 1px #00000013;border-radius:4px}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{border-bottom:1px solid #d9534f}.bootstrap3-info.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{margin:.1em 0}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.error-message[_ngcontent-%COMP%]{font-size:.8em;color:#f44336;margin:.5em 0 0}.bootstrap[_ngcontent-%COMP%]   .error-message[_ngcontent-%COMP%]{color:#d9534f}.ng2-tag-input__text-input[_ngcontent-%COMP%]{display:inline;vertical-align:middle;border:none;padding:0 .5rem;height:38px;font-size:1em;font-family:Roboto,Helvetica Neue,sans-serif}.ng2-tag-input__text-input[_ngcontent-%COMP%]:focus{outline:0}.ng2-tag-input__text-input[disabled=true][_ngcontent-%COMP%]{opacity:.5;background:#fff}\"]\n  });\n  return TagInputForm;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar TagRipple = /*#__PURE__*/(function () {\n  var TagRipple = /*#__PURE__*/_createClass(function TagRipple() {\n    _classCallCheck(this, TagRipple);\n\n    this.state = 'none';\n  });\n\n  TagRipple.ɵfac = function TagRipple_Factory(t) {\n    return new (t || TagRipple)();\n  };\n\n  TagRipple.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TagRipple,\n    selectors: [[\"tag-ripple\"]],\n    inputs: {\n      state: \"state\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[1, \"tag-ripple\"]],\n    template: function TagRipple_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"@ink\", ctx.state);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{width:100%;height:100%;left:0;overflow:hidden;position:absolute}.tag-ripple[_ngcontent-%COMP%]{background:rgba(0,0,0,.1);top:50%;left:50%;height:100%;transform:translate(-50%,-50%);position:absolute}\"],\n    data: {\n      animation: [trigger('ink', [state('none', style({\n        width: 0,\n        opacity: 0\n      })), transition('none => clicked', [animate(300, keyframes([style({\n        opacity: 1,\n        offset: 0,\n        width: '30%',\n        borderRadius: '100%'\n      }), style({\n        opacity: 1,\n        offset: 0.5,\n        width: '50%'\n      }), style({\n        opacity: 0.5,\n        offset: 1,\n        width: '100%',\n        borderRadius: '16px'\n      })]))])])]\n    }\n  });\n  return TagRipple;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar DeleteIconComponent = /*#__PURE__*/(function () {\n  var DeleteIconComponent = /*#__PURE__*/_createClass(function DeleteIconComponent() {\n    _classCallCheck(this, DeleteIconComponent);\n  });\n\n  DeleteIconComponent.ɵfac = function DeleteIconComponent_Factory(t) {\n    return new (t || DeleteIconComponent)();\n  };\n\n  DeleteIconComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DeleteIconComponent,\n    selectors: [[\"delete-icon\"]],\n    decls: 3,\n    vars: 0,\n    consts: [[\"height\", \"16px\", \"viewBox\", \"0 0 32 32\", \"width\", \"16px\"], [\"d\", \"M17.459,16.014l8.239-8.194c0.395-0.391,0.395-1.024,0-1.414c-0.394-0.391-1.034-0.391-1.428,0  l-8.232,8.187L7.73,6.284c-0.394-0.395-1.034-0.395-1.428,0c-0.394,0.396-0.394,1.037,0,1.432l8.302,8.303l-8.332,8.286  c-0.394,0.391-0.394,1.024,0,1.414c0.394,0.391,1.034,0.391,1.428,0l8.325-8.279l8.275,8.276c0.394,0.395,1.034,0.395,1.428,0  c0.394-0.396,0.394-1.037,0-1.432L17.459,16.014z\", \"fill\", \"#121313\"]],\n    template: function DeleteIconComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\");\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(1, \"svg\", 0);\n        i0.ɵɵelement(2, \"path\", 1);\n        i0.ɵɵelementEnd()();\n      }\n    },\n    styles: [\".dark[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:focus{box-shadow:0 0 0 1px #323232}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]{background-color:#fff;display:inline-block;color:#555;vertical-align:middle;max-width:100%;height:42px;line-height:44px}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:none;box-shadow:none;outline:none;background-color:transparent;padding:0 6px;margin:0;width:auto;max-width:inherit}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::-moz-placeholder{color:#777;opacity:1}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:-ms-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus{border:none;box-shadow:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused[_ngcontent-%COMP%]{box-shadow:inset 0 1px 1px #0006;border:1px solid #ccc}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{box-shadow:inset 0 1px 1px #d9534f}.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;transition:all .25s;padding:.25rem 0;min-height:32px;cursor:text;border-bottom:2px solid #efefef}.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.ng2-tag-input.ng2-tag-input--focused[_ngcontent-%COMP%]{border-bottom:2px solid #2196F3}.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{border-bottom:2px solid #f44336}.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.ng2-tag-input[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{margin:.1em 0}.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.minimal.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:1px solid transparent}.minimal.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.minimal.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.minimal.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.minimal.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.minimal.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.dark.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #444}.dark.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.dark.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.dark.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.dark.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.dark.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.bootstrap.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #efefef}.bootstrap.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.bootstrap.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.bootstrap.ng2-tag-input.ng2-tag-input--focused[_ngcontent-%COMP%]{border-bottom:2px solid #0275d8}.bootstrap.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{border-bottom:2px solid #d9534f}.bootstrap.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.bootstrap.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.bootstrap.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;padding:4px;cursor:text;box-shadow:inset 0 1px 1px #00000013;border-radius:4px}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{border-bottom:1px solid #d9534f}.bootstrap3-info.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{margin:.1em 0}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.error-message[_ngcontent-%COMP%]{font-size:.8em;color:#f44336;margin:.5em 0 0}.bootstrap[_ngcontent-%COMP%]   .error-message[_ngcontent-%COMP%]{color:#d9534f}delete-icon[_nghost-%COMP%]{width:20px;height:16px;transition:all .15s;display:inline-block;text-align:right}delete-icon[_nghost-%COMP%]   path[_ngcontent-%COMP%]{fill:#444}delete-icon[_nghost-%COMP%]   svg[_ngcontent-%COMP%]{vertical-align:bottom;height:34px}delete-icon[_nghost-%COMP%]:hover{transform:scale(1.5) translateY(-3px)}.dark[_nghost-%COMP%], .dark   [_nghost-%COMP%]{text-align:right}.dark[_nghost-%COMP%]   path[_ngcontent-%COMP%], .dark   [_nghost-%COMP%]   path[_ngcontent-%COMP%]{fill:#fff}.dark[_nghost-%COMP%]   svg[_ngcontent-%COMP%], .dark   [_nghost-%COMP%]   svg[_ngcontent-%COMP%]{vertical-align:bottom;height:34px}.minimal[_nghost-%COMP%], .minimal   [_nghost-%COMP%]{text-align:right}.minimal[_nghost-%COMP%]   path[_ngcontent-%COMP%], .minimal   [_nghost-%COMP%]   path[_ngcontent-%COMP%]{fill:#444}.minimal[_nghost-%COMP%]   svg[_ngcontent-%COMP%], .minimal   [_nghost-%COMP%]   svg[_ngcontent-%COMP%]{vertical-align:bottom;height:34px}.bootstrap[_nghost-%COMP%], .bootstrap   [_nghost-%COMP%]{text-align:right}.bootstrap[_nghost-%COMP%]   path[_ngcontent-%COMP%], .bootstrap   [_nghost-%COMP%]   path[_ngcontent-%COMP%]{fill:#fff}.bootstrap[_nghost-%COMP%]   svg[_ngcontent-%COMP%], .bootstrap   [_nghost-%COMP%]   svg[_ngcontent-%COMP%]{vertical-align:bottom;height:34px}tag:focus[_nghost-%COMP%]   path[_ngcontent-%COMP%], tag:focus   [_nghost-%COMP%]   path[_ngcontent-%COMP%], tag:active[_nghost-%COMP%]   path[_ngcontent-%COMP%], tag:active   [_nghost-%COMP%]   path[_ngcontent-%COMP%]{fill:#fff}.dark   tag:focus[_nghost-%COMP%]   path[_ngcontent-%COMP%], .dark   tag:focus   [_nghost-%COMP%]   path[_ngcontent-%COMP%], .dark   tag:active[_nghost-%COMP%]   path[_ngcontent-%COMP%], .dark   tag:active   [_nghost-%COMP%]   path[_ngcontent-%COMP%]{fill:#000}.minimal   tag:focus[_nghost-%COMP%]   path[_ngcontent-%COMP%], .minimal   tag:focus   [_nghost-%COMP%]   path[_ngcontent-%COMP%], .minimal   tag:active[_nghost-%COMP%]   path[_ngcontent-%COMP%], .minimal   tag:active   [_nghost-%COMP%]   path[_ngcontent-%COMP%]{fill:#000}.bootstrap   tag:focus[_nghost-%COMP%]   path[_ngcontent-%COMP%], .bootstrap   tag:focus   [_nghost-%COMP%]   path[_ngcontent-%COMP%], .bootstrap   tag:active[_nghost-%COMP%]   path[_ngcontent-%COMP%], .bootstrap   tag:active   [_nghost-%COMP%]   path[_ngcontent-%COMP%]{fill:#fff}.bootstrap3-info[_nghost-%COMP%], .bootstrap3-info   [_nghost-%COMP%]{height:inherit}.bootstrap3-info[_nghost-%COMP%]   path[_ngcontent-%COMP%], .bootstrap3-info   [_nghost-%COMP%]   path[_ngcontent-%COMP%]{fill:#fff}\"]\n  });\n  return DeleteIconComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // mocking navigator\n\n\nvar navigator = typeof window !== 'undefined' ? window.navigator : {\n  userAgent: 'Chrome',\n  vendor: 'Google Inc'\n};\nvar isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\nvar TagComponent = /*#__PURE__*/(function () {\n  var TagComponent = /*#__PURE__*/function () {\n    function TagComponent(element, renderer, cdRef) {\n      _classCallCheck(this, TagComponent);\n\n      this.element = element;\n      this.renderer = renderer;\n      this.cdRef = cdRef;\n      /**\n       * @name disabled\n       */\n\n      this.disabled = false;\n      /**\n       * @name onSelect\n       */\n\n      this.onSelect = new EventEmitter();\n      /**\n       * @name onRemove\n       */\n\n      this.onRemove = new EventEmitter();\n      /**\n       * @name onBlur\n       */\n\n      this.onBlur = new EventEmitter();\n      /**\n       * @name onKeyDown\n       */\n\n      this.onKeyDown = new EventEmitter();\n      /**\n       * @name onTagEdited\n       */\n\n      this.onTagEdited = new EventEmitter();\n      /**\n       * @name editing\n       */\n\n      this.editing = false;\n      /**\n       * @name rippleState\n       */\n\n      this.rippleState = 'none';\n    }\n    /**\n     * @name readonly {boolean}\n     */\n\n\n    _createClass(TagComponent, [{\n      key: \"readonly\",\n      get: function get() {\n        return typeof this.model !== 'string' && this.model.readonly === true;\n      }\n      /**\n       * @name select\n       */\n\n    }, {\n      key: \"select\",\n      value: function select($event) {\n        if (this.readonly || this.disabled) {\n          return;\n        }\n\n        if ($event) {\n          $event.stopPropagation();\n        }\n\n        this.focus();\n        this.onSelect.emit(this.model);\n      }\n      /**\n       * @name remove\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove($event) {\n        $event.stopPropagation();\n        this.onRemove.emit(this);\n      }\n      /**\n       * @name focus\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this.element.nativeElement.focus();\n      }\n    }, {\n      key: \"move\",\n      value: function move() {\n        this.moving = true;\n      }\n      /**\n       * @name keydown\n       * @param event\n       */\n\n    }, {\n      key: \"keydown\",\n      value: function keydown(event) {\n        if (this.editing) {\n          if (event.keyCode === 13) {\n            return this.disableEditMode(event);\n          }\n        } else {\n          this.onKeyDown.emit({\n            event: event,\n            model: this.model\n          });\n        }\n      }\n      /**\n       * @name blink\n       */\n\n    }, {\n      key: \"blink\",\n      value: function blink() {\n        var classList = this.element.nativeElement.classList;\n        classList.add('blink');\n        setTimeout(function () {\n          return classList.remove('blink');\n        }, 50);\n      }\n      /**\n       * @name toggleEditMode\n       */\n\n    }, {\n      key: \"toggleEditMode\",\n      value: function toggleEditMode() {\n        if (this.editable) {\n          return this.editing ? undefined : this.activateEditMode();\n        }\n      }\n      /**\n       * @name onBlurred\n       * @param event\n       */\n\n    }, {\n      key: \"onBlurred\",\n      value: function onBlurred(event) {\n        // Checks if it is editable first before handeling the onBlurred event in order to prevent\n        // a bug in IE where tags are still editable with onlyFromAutocomplete set to true\n        if (!this.editable) {\n          return;\n        }\n\n        this.disableEditMode();\n        var value = event.target.innerText;\n        var result = typeof this.model === 'string' ? value : Object.assign(Object.assign({}, this.model), _defineProperty({}, this.displayBy, value));\n        this.onBlur.emit(result);\n      }\n      /**\n       * @name getDisplayValue\n       * @param item\n       */\n\n    }, {\n      key: \"getDisplayValue\",\n      value: function getDisplayValue(item) {\n        return typeof item === 'string' ? item : item[this.displayBy];\n      }\n      /**\n       * @desc returns whether the ripple is visible or not\n       * only works in Chrome\n       * @name isRippleVisible\n       */\n\n    }, {\n      key: \"isRippleVisible\",\n      get: function get() {\n        return !this.readonly && !this.editing && isChrome && this.hasRipple;\n      }\n      /**\n       * @name disableEditMode\n       * @param $event\n       */\n\n    }, {\n      key: \"disableEditMode\",\n      value: function disableEditMode($event) {\n        var classList = this.element.nativeElement.classList;\n        var input = this.getContentEditableText();\n        this.editing = false;\n        classList.remove('tag--editing');\n\n        if (!input) {\n          this.setContentEditableText(this.model);\n          return;\n        }\n\n        this.storeNewValue(input);\n        this.cdRef.detectChanges();\n\n        if ($event) {\n          $event.preventDefault();\n        }\n      }\n      /**\n       * @name isDeleteIconVisible\n       */\n\n    }, {\n      key: \"isDeleteIconVisible\",\n      value: function isDeleteIconVisible() {\n        return !this.readonly && !this.disabled && this.removable && !this.editing;\n      }\n      /**\n       * @name getContentEditableText\n       */\n\n    }, {\n      key: \"getContentEditableText\",\n      value: function getContentEditableText() {\n        var input = this.getContentEditable();\n        return input ? input.innerText.trim() : '';\n      }\n      /**\n       * @name setContentEditableText\n       * @param model\n       */\n\n    }, {\n      key: \"setContentEditableText\",\n      value: function setContentEditableText(model) {\n        var input = this.getContentEditable();\n        var value = this.getDisplayValue(model);\n        input.innerText = value;\n      }\n      /**\n       * @name\n       */\n\n    }, {\n      key: \"activateEditMode\",\n      value: function activateEditMode() {\n        var classList = this.element.nativeElement.classList;\n        classList.add('tag--editing');\n        this.editing = true;\n      }\n      /**\n       * @name storeNewValue\n       * @param input\n       */\n\n    }, {\n      key: \"storeNewValue\",\n      value: function storeNewValue(input) {\n        var _this2 = this,\n            _ref;\n\n        var exists = function exists(tag) {\n          return typeof tag === 'string' ? tag === input : tag[_this2.displayBy] === input;\n        };\n\n        var hasId = function hasId() {\n          return _this2.model[_this2.identifyBy] !== _this2.model[_this2.displayBy];\n        }; // if the value changed, replace the value in the model\n\n\n        if (exists(this.model)) {\n          return;\n        }\n\n        var model = typeof this.model === 'string' ? input : (_ref = {\n          index: this.index\n        }, _defineProperty(_ref, this.identifyBy, hasId() ? this.model[this.identifyBy] : input), _defineProperty(_ref, this.displayBy, input), _ref);\n\n        if (this.canAddTag(model)) {\n          this.onTagEdited.emit({\n            tag: model,\n            index: this.index\n          });\n        } else {\n          this.setContentEditableText(this.model);\n        }\n      }\n      /**\n       * @name getContentEditable\n       */\n\n    }, {\n      key: \"getContentEditable\",\n      value: function getContentEditable() {\n        return this.element.nativeElement.querySelector('[contenteditable]');\n      }\n    }]);\n\n    return TagComponent;\n  }();\n\n  TagComponent.ɵfac = function TagComponent_Factory(t) {\n    return new (t || TagComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  TagComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TagComponent,\n    selectors: [[\"tag\"]],\n    viewQuery: function TagComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TagRipple, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function TagComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function TagComponent_keydown_HostBindingHandler($event) {\n          return ctx.keydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"moving\", ctx.moving);\n      }\n    },\n    inputs: {\n      model: \"model\",\n      removable: \"removable\",\n      editable: \"editable\",\n      template: \"template\",\n      displayBy: \"displayBy\",\n      identifyBy: \"identifyBy\",\n      index: \"index\",\n      hasRipple: \"hasRipple\",\n      disabled: \"disabled\",\n      canAddTag: \"canAddTag\"\n    },\n    outputs: {\n      onSelect: \"onSelect\",\n      onRemove: \"onRemove\",\n      onBlur: \"onBlur\",\n      onKeyDown: \"onKeyDown\",\n      onTagEdited: \"onTagEdited\"\n    },\n    decls: 4,\n    vars: 8,\n    consts: [[3, \"ngSwitch\", \"click\", \"dblclick\", \"mousedown\", \"mouseup\"], [4, \"ngSwitchCase\"], [\"class\", \"tag-wrapper\", 4, \"ngSwitchCase\"], [3, \"state\", 4, \"ngIf\"], [3, \"ngTemplateOutletContext\", \"ngTemplateOutlet\"], [1, \"tag-wrapper\"], [\"spellcheck\", \"false\", 1, \"tag__text\", \"inline\", 3, \"keydown.enter\", \"keydown.escape\", \"click\", \"blur\"], [\"aria-label\", \"Remove tag\", \"role\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"aria-label\", \"Remove tag\", \"role\", \"button\", 3, \"click\"], [3, \"state\"]],\n    template: function TagComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"click\", function TagComponent_Template_div_click_0_listener($event) {\n          return ctx.select($event);\n        })(\"dblclick\", function TagComponent_Template_div_dblclick_0_listener() {\n          return ctx.toggleEditMode();\n        })(\"mousedown\", function TagComponent_Template_div_mousedown_0_listener() {\n          return ctx.rippleState = \"clicked\";\n        })(\"mouseup\", function TagComponent_Template_div_mouseup_0_listener() {\n          return ctx.rippleState = \"none\";\n        });\n        i0.ɵɵtemplate(1, TagComponent_div_1_Template, 2, 6, \"div\", 1);\n        i0.ɵɵtemplate(2, TagComponent_div_2_Template, 4, 4, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, TagComponent_tag_ripple_3_Template, 1, 2, \"tag-ripple\", 3);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"disabled\", ctx.disabled);\n        i0.ɵɵproperty(\"ngSwitch\", !!ctx.template);\n        i0.ɵɵattribute(\"tabindex\", -1)(\"aria-label\", ctx.getDisplayValue(ctx.model));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isRippleVisible);\n      }\n    },\n    directives: [DeleteIconComponent, TagRipple, i2.NgSwitch, i2.NgSwitchCase, i2.NgTemplateOutlet, i2.NgIf],\n    styles: [\"[_nghost-%COMP%], [_nghost-%COMP%] > div[_ngcontent-%COMP%], [_nghost-%COMP%] > div[_ngcontent-%COMP%]:focus{outline:0;overflow:hidden;transition:opacity 1s;z-index:1}[_nghost-%COMP%]{max-width:400px}.blink[_nghost-%COMP%]{-webkit-animation:blink .3s normal forwards ease-in-out;animation:blink .3s normal forwards ease-in-out}@-webkit-keyframes blink{0%{opacity:.3}}@keyframes blink{0%{opacity:.3}}[_nghost-%COMP%]   .disabled[_ngcontent-%COMP%]{cursor:not-allowed}[_nghost-%COMP%]   [contenteditable=true][_ngcontent-%COMP%]{outline:0}.tag-wrapper[_ngcontent-%COMP%]{flex-direction:row;display:flex}.tag__text[_ngcontent-%COMP%]{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}\"]\n  });\n  return TagComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @name animations\n */\n\n\nvar animations = [trigger('animation', [state('in', style({\n  opacity: 1\n})), state('out', style({\n  opacity: 0\n})), transition(':enter', [animate('{{ enter }}', keyframes([style({\n  opacity: 0,\n  offset: 0,\n  transform: 'translate(0px, 20px)'\n}), style({\n  opacity: 0.3,\n  offset: 0.3,\n  transform: 'translate(0px, -10px)'\n}), style({\n  opacity: 0.5,\n  offset: 0.5,\n  transform: 'translate(0px, 0px)'\n}), style({\n  opacity: 0.75,\n  offset: 0.75,\n  transform: 'translate(0px, 5px)'\n}), style({\n  opacity: 1,\n  offset: 1,\n  transform: 'translate(0px, 0px)'\n})]))]), transition(':leave', [animate('{{ leave }}', keyframes([style({\n  opacity: 1,\n  transform: 'translateX(0)',\n  offset: 0\n}), style({\n  opacity: 1,\n  transform: 'translateX(-15px)',\n  offset: 0.7\n}), style({\n  opacity: 0,\n  transform: 'translateX(100%)',\n  offset: 1.0\n})]))])])];\nvar TagInputDropdown = /*#__PURE__*/(function () {\n  var TagInputDropdown = /*#__PURE__*/function () {\n    function TagInputDropdown(injector) {\n      var _this3 = this;\n\n      _classCallCheck(this, TagInputDropdown);\n\n      this.injector = injector;\n      /**\n       * @name offset\n       */\n\n      this.offset = defaults.dropdown.offset;\n      /**\n       * @name focusFirstElement\n       */\n\n      this.focusFirstElement = defaults.dropdown.focusFirstElement;\n      /**\n       * - show autocomplete dropdown if the value of input is empty\n       * @name showDropdownIfEmpty\n       */\n\n      this.showDropdownIfEmpty = defaults.dropdown.showDropdownIfEmpty;\n      /**\n       * - desc minimum text length in order to display the autocomplete dropdown\n       * @name minimumTextLength\n       */\n\n      this.minimumTextLength = defaults.dropdown.minimumTextLength;\n      /**\n       * - number of items to display in the autocomplete dropdown\n       * @name limitItemsTo\n       */\n\n      this.limitItemsTo = defaults.dropdown.limitItemsTo;\n      /**\n       * @name displayBy\n       */\n\n      this.displayBy = defaults.dropdown.displayBy;\n      /**\n       * @name identifyBy\n       */\n\n      this.identifyBy = defaults.dropdown.identifyBy;\n      /**\n       * @description a function a developer can use to implement custom matching for the autocomplete\n       * @name matchingFn\n       */\n\n      this.matchingFn = defaults.dropdown.matchingFn;\n      /**\n       * @name appendToBody\n       */\n\n      this.appendToBody = defaults.dropdown.appendToBody;\n      /**\n       * @name keepOpen\n       * @description option to leave dropdown open when adding a new item\n       */\n\n      this.keepOpen = defaults.dropdown.keepOpen;\n      /**\n       * @name dynamicUpdate\n       */\n\n      this.dynamicUpdate = defaults.dropdown.dynamicUpdate;\n      /**\n       * @name zIndex\n       */\n\n      this.zIndex = defaults.dropdown.zIndex;\n      /**\n       * list of items that match the current value of the input (for autocomplete)\n       * @name items\n       */\n\n      this.items = [];\n      /**\n       * @name tagInput\n       */\n\n      this.tagInput = this.injector.get(TagInputComponent);\n      /**\n       * @name _autocompleteItems\n       */\n\n      this._autocompleteItems = [];\n      /**\n       *\n       * @name show\n       */\n\n      this.show = function () {\n        var maxItemsReached = _this3.tagInput.items.length === _this3.tagInput.maxItems;\n\n        var value = _this3.getFormValue();\n\n        var hasMinimumText = value.trim().length >= _this3.minimumTextLength;\n\n        var position = _this3.calculatePosition();\n\n        var items = _this3.getMatchingItems(value);\n\n        var hasItems = items.length > 0;\n        var isHidden = _this3.isVisible === false;\n        var showDropdownIfEmpty = _this3.showDropdownIfEmpty && hasItems && !value;\n        var isDisabled = _this3.tagInput.disable;\n        var shouldShow = isHidden && (hasItems && hasMinimumText || showDropdownIfEmpty);\n        var shouldHide = _this3.isVisible && !hasItems;\n\n        if (_this3.autocompleteObservable && hasMinimumText) {\n          return _this3.getItemsFromObservable(value);\n        }\n\n        if (!_this3.showDropdownIfEmpty && !value || maxItemsReached || isDisabled) {\n          return _this3.dropdown.hide();\n        }\n\n        _this3.setItems(items);\n\n        if (shouldShow) {\n          _this3.dropdown.show(position);\n        } else if (shouldHide) {\n          _this3.hide();\n        }\n      };\n      /**\n       * @name requestAdding\n       * @param item {Ng2MenuItem}\n       */\n\n\n      this.requestAdding = function (item) {\n        return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var tag;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  tag = this.createTagModel(item);\n                  _context.next = 3;\n                  return this.tagInput.onAddingRequested(true, tag).catch(function () {});\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      };\n      /**\n       * @name resetItems\n       */\n\n\n      this.resetItems = function () {\n        _this3.items = [];\n      };\n      /**\n       * @name getItemsFromObservable\n       * @param text\n       */\n\n\n      this.getItemsFromObservable = function (text) {\n        _this3.setLoadingState(true);\n\n        var subscribeFn = function subscribeFn(data) {\n          // hide loading animation\n          _this3.setLoadingState(false) // add items\n          .populateItems(data);\n\n          _this3.setItems(_this3.getMatchingItems(text));\n\n          if (_this3.items.length) {\n            _this3.dropdown.show(_this3.calculatePosition());\n          } else {\n            _this3.dropdown.hide();\n          }\n        };\n\n        _this3.autocompleteObservable(text).pipe(first()).subscribe(subscribeFn, function () {\n          return _this3.setLoadingState(false);\n        });\n      };\n    }\n    /**\n     * @name autocompleteItems\n     * @param items\n     */\n\n\n    _createClass(TagInputDropdown, [{\n      key: \"autocompleteItems\",\n      get:\n      /**\n       * @name autocompleteItems\n       * @desc array of items that will populate the autocomplete\n       */\n      function get() {\n        var _this4 = this;\n\n        var items = this._autocompleteItems;\n\n        if (!items) {\n          return [];\n        }\n\n        return items.map(function (item) {\n          var _ref2;\n\n          return typeof item === 'string' ? (_ref2 = {}, _defineProperty(_ref2, _this4.displayBy, item), _defineProperty(_ref2, _this4.identifyBy, item), _ref2) : item;\n        });\n      }\n      /**\n       * @name ngAfterviewInit\n       */\n      ,\n      set: function set(items) {\n        this._autocompleteItems = items;\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this5 = this;\n\n        this.onItemClicked().subscribe(function (item) {\n          _this5.requestAdding(item);\n        }); // reset itemsMatching array when the dropdown is hidden\n\n        this.onHide().subscribe(this.resetItems);\n        var DEBOUNCE_TIME = 200;\n        var KEEP_OPEN = this.keepOpen;\n        this.tagInput.onTextChange.asObservable().pipe(distinctUntilChanged(), debounceTime(DEBOUNCE_TIME), filter(function (value) {\n          if (KEEP_OPEN === false) {\n            return value.length > 0;\n          }\n\n          return true;\n        })).subscribe(this.show);\n      }\n      /**\n       * @name updatePosition\n       */\n\n    }, {\n      key: \"updatePosition\",\n      value: function updatePosition() {\n        var position = this.tagInput.inputForm.getElementPosition();\n        this.dropdown.menu.updatePosition(position, this.dynamicUpdate);\n      }\n      /**\n       * @name isVisible\n       */\n\n    }, {\n      key: \"isVisible\",\n      get: function get() {\n        return this.dropdown.menu.dropdownState.menuState.isVisible;\n      }\n      /**\n       * @name onHide\n       */\n\n    }, {\n      key: \"onHide\",\n      value: function onHide() {\n        return this.dropdown.onHide;\n      }\n      /**\n       * @name onItemClicked\n       */\n\n    }, {\n      key: \"onItemClicked\",\n      value: function onItemClicked() {\n        return this.dropdown.onItemClicked;\n      }\n      /**\n       * @name selectedItem\n       */\n\n    }, {\n      key: \"selectedItem\",\n      get: function get() {\n        return this.dropdown.menu.dropdownState.dropdownState.selectedItem;\n      }\n      /**\n       * @name state\n       */\n\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this.dropdown.menu.dropdownState;\n      }\n      /**\n       * @name hide\n       */\n\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.resetItems();\n        this.dropdown.hide();\n      }\n      /**\n       * @name scrollListener\n       */\n\n    }, {\n      key: \"scrollListener\",\n      value: function scrollListener() {\n        if (!this.isVisible || !this.dynamicUpdate) {\n          return;\n        }\n\n        this.updatePosition();\n      }\n      /**\n       * @name onWindowBlur\n       */\n\n    }, {\n      key: \"onWindowBlur\",\n      value: function onWindowBlur() {\n        this.dropdown.hide();\n      }\n      /**\n       * @name getFormValue\n       */\n\n    }, {\n      key: \"getFormValue\",\n      value: function getFormValue() {\n        var formValue = this.tagInput.formValue;\n        return formValue ? formValue.toString().trim() : '';\n      }\n      /**\n       * @name calculatePosition\n       */\n\n    }, {\n      key: \"calculatePosition\",\n      value: function calculatePosition() {\n        return this.tagInput.inputForm.getElementPosition();\n      }\n      /**\n       * @name createTagModel\n       * @param item\n       */\n\n    }, {\n      key: \"createTagModel\",\n      value: function createTagModel(item) {\n        var _Object$assign2;\n\n        var display = typeof item.value === 'string' ? item.value : item.value[this.displayBy];\n        var value = typeof item.value === 'string' ? item.value : item.value[this.identifyBy];\n        return Object.assign(Object.assign({}, item.value), (_Object$assign2 = {}, _defineProperty(_Object$assign2, this.tagInput.displayBy, display), _defineProperty(_Object$assign2, this.tagInput.identifyBy, value), _Object$assign2));\n      }\n      /**\n       *\n       * @param value {string}\n       */\n\n    }, {\n      key: \"getMatchingItems\",\n      value: function getMatchingItems(value) {\n        var _this6 = this;\n\n        if (!value && !this.showDropdownIfEmpty) {\n          return [];\n        }\n\n        var dupesAllowed = this.tagInput.allowDupes;\n        return this.autocompleteItems.filter(function (item) {\n          var hasValue = dupesAllowed ? false : _this6.tagInput.tags.some(function (tag) {\n            var identifyBy = _this6.tagInput.identifyBy;\n            var model = typeof tag.model === 'string' ? tag.model : tag.model[identifyBy];\n            return model === item[_this6.identifyBy];\n          });\n          return _this6.matchingFn(value, item) && hasValue === false;\n        });\n      }\n      /**\n       * @name setItems\n       */\n\n    }, {\n      key: \"setItems\",\n      value: function setItems(items) {\n        this.items = items.slice(0, this.limitItemsTo || items.length);\n      }\n      /**\n       * @name populateItems\n       * @param data\n       */\n\n    }, {\n      key: \"populateItems\",\n      value: function populateItems(data) {\n        var _this7 = this;\n\n        this.autocompleteItems = data.map(function (item) {\n          var _ref3;\n\n          return typeof item === 'string' ? (_ref3 = {}, _defineProperty(_ref3, _this7.displayBy, item), _defineProperty(_ref3, _this7.identifyBy, item), _ref3) : item;\n        });\n        return this;\n      }\n      /**\n       * @name setLoadingState\n       * @param state\n       */\n\n    }, {\n      key: \"setLoadingState\",\n      value: function setLoadingState(state) {\n        this.tagInput.isLoading = state;\n        return this;\n      }\n    }]);\n\n    return TagInputDropdown;\n  }();\n\n  TagInputDropdown.ɵfac = function TagInputDropdown_Factory(t) {\n    return new (t || TagInputDropdown)(i0.ɵɵdirectiveInject(i0.Injector));\n  };\n\n  TagInputDropdown.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TagInputDropdown,\n    selectors: [[\"tag-input-dropdown\"]],\n    contentQueries: function TagInputDropdown_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, TemplateRef, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function TagInputDropdown_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(Ng2Dropdown, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);\n      }\n    },\n    hostBindings: function TagInputDropdown_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"scroll\", function TagInputDropdown_scroll_HostBindingHandler() {\n          return ctx.scrollListener();\n        }, false, i0.ɵɵresolveWindow)(\"blur\", function TagInputDropdown_blur_HostBindingHandler() {\n          return ctx.onWindowBlur();\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      offset: \"offset\",\n      focusFirstElement: \"focusFirstElement\",\n      showDropdownIfEmpty: \"showDropdownIfEmpty\",\n      autocompleteObservable: \"autocompleteObservable\",\n      minimumTextLength: \"minimumTextLength\",\n      limitItemsTo: \"limitItemsTo\",\n      displayBy: \"displayBy\",\n      identifyBy: \"identifyBy\",\n      matchingFn: \"matchingFn\",\n      appendToBody: \"appendToBody\",\n      keepOpen: \"keepOpen\",\n      dynamicUpdate: \"dynamicUpdate\",\n      zIndex: \"zIndex\",\n      autocompleteItems: \"autocompleteItems\"\n    },\n    decls: 3,\n    vars: 6,\n    consts: [[3, \"dynamicUpdate\"], [3, \"focusFirstElement\", \"zIndex\", \"appendToBody\", \"offset\"], [3, \"value\", \"ngSwitch\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"ngSwitch\"], [3, \"innerHTML\", 4, \"ngSwitchCase\"], [4, \"ngSwitchDefault\"], [3, \"innerHTML\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TagInputDropdown_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ng2-dropdown\", 0)(1, \"ng2-dropdown-menu\", 1);\n        i0.ɵɵtemplate(2, TagInputDropdown_ng2_menu_item_2_Template, 3, 3, \"ng2-menu-item\", 2);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"dynamicUpdate\", ctx.dynamicUpdate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"focusFirstElement\", ctx.focusFirstElement)(\"zIndex\", ctx.zIndex)(\"appendToBody\", ctx.appendToBody)(\"offset\", ctx.offset);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.items);\n      }\n    },\n    directives: [i1$1.Ng2Dropdown, i1$1.Ng2DropdownMenu, i1$1.Ng2MenuItem, i2.NgForOf, i2.NgSwitch, i2.NgSwitchCase, i2.NgSwitchDefault, i2.NgTemplateOutlet],\n    pipes: [HighlightPipe],\n    encapsulation: 2\n  });\n  return TagInputDropdown;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar CUSTOM_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return TagInputComponent;\n  }),\n  multi: true\n};\nvar TagInputComponent = /*#__PURE__*/(function () {\n  var TagInputComponent = /*#__PURE__*/function (_TagInputAccessor) {\n    _inherits(TagInputComponent, _TagInputAccessor);\n\n    var _super = _createSuper(TagInputComponent);\n\n    function TagInputComponent(renderer, dragProvider) {\n      var _this8$listeners;\n\n      var _this8;\n\n      _classCallCheck(this, TagInputComponent);\n\n      _this8 = _super.call(this);\n      _this8.renderer = renderer;\n      _this8.dragProvider = dragProvider;\n      /**\n       * @name separatorKeys\n       * @desc keyboard keys with which a user can separate items\n       */\n\n      _this8.separatorKeys = defaults.tagInput.separatorKeys;\n      /**\n       * @name separatorKeyCodes\n       * @desc keyboard key codes with which a user can separate items\n       */\n\n      _this8.separatorKeyCodes = defaults.tagInput.separatorKeyCodes;\n      /**\n       * @name placeholder\n       * @desc the placeholder of the input text\n       */\n\n      _this8.placeholder = defaults.tagInput.placeholder;\n      /**\n       * @name secondaryPlaceholder\n       * @desc placeholder to appear when the input is empty\n       */\n\n      _this8.secondaryPlaceholder = defaults.tagInput.secondaryPlaceholder;\n      /**\n       * @name maxItems\n       * @desc maximum number of items that can be added\n       */\n\n      _this8.maxItems = defaults.tagInput.maxItems;\n      /**\n       * @name validators\n       * @desc array of Validators that are used to validate the tag before it gets appended to the list\n       */\n\n      _this8.validators = defaults.tagInput.validators;\n      /**\n       * @name asyncValidators\n       * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n       */\n\n      _this8.asyncValidators = defaults.tagInput.asyncValidators;\n      /**\n      * - if set to true, it will only possible to add items from the autocomplete\n      * @name onlyFromAutocomplete\n      */\n\n      _this8.onlyFromAutocomplete = defaults.tagInput.onlyFromAutocomplete;\n      /**\n       * @name errorMessages\n       */\n\n      _this8.errorMessages = defaults.tagInput.errorMessages;\n      /**\n       * @name theme\n       */\n\n      _this8.theme = defaults.tagInput.theme;\n      /**\n       * @name onTextChangeDebounce\n       */\n\n      _this8.onTextChangeDebounce = defaults.tagInput.onTextChangeDebounce;\n      /**\n       * - custom id assigned to the input\n       * @name id\n       */\n\n      _this8.inputId = defaults.tagInput.inputId;\n      /**\n       * - custom class assigned to the input\n       */\n\n      _this8.inputClass = defaults.tagInput.inputClass;\n      /**\n       * - option to clear text input when the form is blurred\n       * @name clearOnBlur\n       */\n\n      _this8.clearOnBlur = defaults.tagInput.clearOnBlur;\n      /**\n       * - hideForm\n       * @name clearOnBlur\n       */\n\n      _this8.hideForm = defaults.tagInput.hideForm;\n      /**\n       * @name addOnBlur\n       */\n\n      _this8.addOnBlur = defaults.tagInput.addOnBlur;\n      /**\n       * @name addOnPaste\n       */\n\n      _this8.addOnPaste = defaults.tagInput.addOnPaste;\n      /**\n       * - pattern used with the native method split() to separate patterns in the string pasted\n       * @name pasteSplitPattern\n       */\n\n      _this8.pasteSplitPattern = defaults.tagInput.pasteSplitPattern;\n      /**\n       * @name blinkIfDupe\n       */\n\n      _this8.blinkIfDupe = defaults.tagInput.blinkIfDupe;\n      /**\n       * @name removable\n       */\n\n      _this8.removable = defaults.tagInput.removable;\n      /**\n       * @name editable\n       */\n\n      _this8.editable = defaults.tagInput.editable;\n      /**\n       * @name allowDupes\n       */\n\n      _this8.allowDupes = defaults.tagInput.allowDupes;\n      /**\n       * @description if set to true, the newly added tags will be added as strings, and not objects\n       * @name modelAsStrings\n       */\n\n      _this8.modelAsStrings = defaults.tagInput.modelAsStrings;\n      /**\n       * @name trimTags\n       */\n\n      _this8.trimTags = defaults.tagInput.trimTags;\n      /**\n       * @name ripple\n       */\n\n      _this8.ripple = defaults.tagInput.ripple;\n      /**\n       * @name tabindex\n       * @desc pass through the specified tabindex to the input\n       */\n\n      _this8.tabindex = defaults.tagInput.tabIndex;\n      /**\n       * @name disable\n       */\n\n      _this8.disable = defaults.tagInput.disable;\n      /**\n       * @name dragZone\n       */\n\n      _this8.dragZone = defaults.tagInput.dragZone;\n      /**\n       * @name onRemoving\n       */\n\n      _this8.onRemoving = defaults.tagInput.onRemoving;\n      /**\n       * @name onAdding\n       */\n\n      _this8.onAdding = defaults.tagInput.onAdding;\n      /**\n       * @name animationDuration\n       */\n\n      _this8.animationDuration = defaults.tagInput.animationDuration;\n      /**\n       * @name onAdd\n       * @desc event emitted when adding a new item\n       */\n\n      _this8.onAdd = new EventEmitter();\n      /**\n       * @name onRemove\n       * @desc event emitted when removing an existing item\n       */\n\n      _this8.onRemove = new EventEmitter();\n      /**\n       * @name onSelect\n       * @desc event emitted when selecting an item\n       */\n\n      _this8.onSelect = new EventEmitter();\n      /**\n       * @name onFocus\n       * @desc event emitted when the input is focused\n       */\n\n      _this8.onFocus = new EventEmitter();\n      /**\n       * @name onFocus\n       * @desc event emitted when the input is blurred\n       */\n\n      _this8.onBlur = new EventEmitter();\n      /**\n       * @name onTextChange\n       * @desc event emitted when the input value changes\n       */\n\n      _this8.onTextChange = new EventEmitter();\n      /**\n       * - output triggered when text is pasted in the form\n       * @name onPaste\n       */\n\n      _this8.onPaste = new EventEmitter();\n      /**\n       * - output triggered when tag entered is not valid\n       * @name onValidationError\n       */\n\n      _this8.onValidationError = new EventEmitter();\n      /**\n       * - output triggered when tag is edited\n       * @name onTagEdited\n       */\n\n      _this8.onTagEdited = new EventEmitter();\n      /**\n       * @name isLoading\n       */\n\n      _this8.isLoading = false;\n      /**\n       * @name listeners\n       * @desc array of events that get fired using @fireEvents\n       */\n\n      _this8.listeners = (_this8$listeners = {}, _defineProperty(_this8$listeners, KEYDOWN, []), _defineProperty(_this8$listeners, KEYUP, []), _this8$listeners);\n      /**\n       * @description emitter for the 2-way data binding inputText value\n       * @name inputTextChange\n       */\n\n      _this8.inputTextChange = new EventEmitter();\n      /**\n       * @description private variable to bind get/set\n       * @name inputTextValue\n       */\n\n      _this8.inputTextValue = '';\n      _this8.errors = [];\n      /**\n       * @name appendTag\n       * @param tag {TagModel}\n       */\n\n      _this8.appendTag = function (tag) {\n        var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this8.items.length;\n        var items = _this8.items;\n        var model = _this8.modelAsStrings ? tag[_this8.identifyBy] : tag;\n        _this8.items = [].concat(_toConsumableArray(items.slice(0, index)), [model], _toConsumableArray(items.slice(index, items.length)));\n      };\n      /**\n       * @name createTag\n       * @param model\n       */\n\n\n      _this8.createTag = function (model) {\n        var _Object$assign3;\n\n        var trim = function trim(val, key) {\n          return typeof val === 'string' ? val.trim() : val[key];\n        };\n\n        return Object.assign(Object.assign({}, typeof model !== 'string' ? model : {}), (_Object$assign3 = {}, _defineProperty(_Object$assign3, _this8.displayBy, _this8.trimTags ? trim(model, _this8.displayBy) : model), _defineProperty(_Object$assign3, _this8.identifyBy, _this8.trimTags ? trim(model, _this8.identifyBy) : model), _Object$assign3));\n      };\n      /**\n       *\n       * @param tag\n       * @param isFromAutocomplete\n       */\n\n\n      _this8.isTagValid = function (tag) {\n        var fromAutocomplete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var selectedItem = _this8.dropdown ? _this8.dropdown.selectedItem : undefined;\n\n        var value = _this8.getItemDisplay(tag).trim();\n\n        if (selectedItem && !fromAutocomplete || !value) {\n          return false;\n        }\n\n        var dupe = _this8.findDupe(tag, fromAutocomplete); // if so, give a visual cue and return false\n\n\n        if (!_this8.allowDupes && dupe && _this8.blinkIfDupe) {\n          var model = _this8.tags.find(function (item) {\n            return _this8.getItemValue(item.model) === _this8.getItemValue(dupe);\n          });\n\n          if (model) {\n            model.blink();\n          }\n        }\n\n        var isFromAutocomplete = fromAutocomplete && _this8.onlyFromAutocomplete;\n        var assertions = [// 1. there must be no dupe OR dupes are allowed\n        !dupe || _this8.allowDupes, // 2. check max items has not been reached\n        !_this8.maxItemsReached, // 3. check item comes from autocomplete or onlyFromAutocomplete is false\n        isFromAutocomplete || !_this8.onlyFromAutocomplete];\n        return assertions.filter(Boolean).length === assertions.length;\n      };\n      /**\n       * @name onPasteCallback\n       * @param data\n       */\n\n\n      _this8.onPasteCallback = function (data) {\n        return __awaiter(_assertThisInitialized(_this8), void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var _this9 = this;\n\n          var getText, text, requests, resetInput;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  getText = function getText() {\n                    var isIE = Boolean(window.clipboardData);\n                    var clipboardData = isIE ? window.clipboardData : data.clipboardData;\n                    var type = isIE ? 'Text' : 'text/plain';\n                    return clipboardData === null ? '' : clipboardData.getData(type) || '';\n                  };\n\n                  text = getText();\n                  requests = text.split(this.pasteSplitPattern).map(function (item) {\n                    var tag = _this9.createTag(item);\n\n                    _this9.setInputValue(tag[_this9.displayBy]);\n\n                    return _this9.onAddingRequested(false, tag);\n                  });\n\n                  resetInput = function resetInput() {\n                    return setTimeout(function () {\n                      return _this9.setInputValue('');\n                    }, 50);\n                  };\n\n                  Promise.all(requests).then(function () {\n                    _this9.onPaste.emit(text);\n\n                    resetInput();\n                  }).catch(resetInput);\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      };\n\n      return _this8;\n    }\n    /**\n     * @name inputText\n     */\n\n\n    _createClass(TagInputComponent, [{\n      key: \"inputText\",\n      get: function get() {\n        return this.inputTextValue;\n      }\n      /**\n       * @name inputText\n       * @param text\n       */\n      ,\n      set: function set(text) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n      }\n      /**\n       * @desc removes the tab index if it is set - it will be passed through to the input\n       * @name tabindexAttr\n       */\n\n    }, {\n      key: \"tabindexAttr\",\n      get: function get() {\n        return this.tabindex !== '' ? '-1' : '';\n      }\n      /**\n       * @name ngAfterViewInit\n       */\n\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this10 = this;\n\n        // set up listeners\n        this.setUpKeypressListeners();\n        this.setupSeparatorKeysListener();\n        this.setUpInputKeydownListeners();\n\n        if (this.onTextChange.observers.length) {\n          this.setUpTextChangeSubscriber();\n        } // if clear on blur is set to true, subscribe to the event and clear the text's form\n\n\n        if (this.clearOnBlur || this.addOnBlur) {\n          this.setUpOnBlurSubscriber();\n        } // if addOnPaste is set to true, register the handler and add items\n\n\n        if (this.addOnPaste) {\n          this.setUpOnPasteListener();\n        }\n\n        var statusChanges$ = this.inputForm.form.statusChanges;\n        statusChanges$.pipe(filter$1(function (status) {\n          return status !== 'PENDING';\n        })).subscribe(function () {\n          _this10.errors = _this10.inputForm.getErrorMessages(_this10.errorMessages);\n        });\n        this.isProgressBarVisible$ = statusChanges$.pipe(map(function (status) {\n          return status === 'PENDING' || _this10.isLoading;\n        })); // if hideForm is set to true, remove the input\n\n        if (this.hideForm) {\n          this.inputForm.destroy();\n        }\n      }\n      /**\n       * @name ngOnInit\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        // if the number of items specified in the model is > of the value of maxItems\n        // degrade gracefully and let the max number of items to be the number of items in the model\n        // though, warn the user.\n        var hasReachedMaxItems = this.maxItems !== undefined && this.items && this.items.length > this.maxItems;\n\n        if (hasReachedMaxItems) {\n          this.maxItems = this.items.length;\n          console.warn(MAX_ITEMS_WARNING);\n        } // Setting editable to false to fix problem with tags in IE still being editable when\n        // onlyFromAutocomplete is true\n\n\n        this.editable = this.onlyFromAutocomplete ? false : this.editable;\n        this.setAnimationMetadata();\n      }\n      /**\n       * @name onRemoveRequested\n       * @param tag\n       * @param index\n       */\n\n    }, {\n      key: \"onRemoveRequested\",\n      value: function onRemoveRequested(tag, index) {\n        var _this11 = this;\n\n        return new Promise(function (resolve) {\n          var subscribeFn = function subscribeFn(model) {\n            _this11.removeItem(model, index);\n\n            resolve(tag);\n          };\n\n          _this11.onRemoving ? _this11.onRemoving(tag).pipe(first$1()).subscribe(subscribeFn) : subscribeFn(tag);\n        });\n      }\n      /**\n       * @name onAddingRequested\n       * @param fromAutocomplete {boolean}\n       * @param tag {TagModel}\n       * @param index? {number}\n       * @param giveupFocus? {boolean}\n       */\n\n    }, {\n      key: \"onAddingRequested\",\n      value: function onAddingRequested(fromAutocomplete, tag, index, giveupFocus) {\n        var _this12 = this;\n\n        return new Promise(function (resolve, reject) {\n          var subscribeFn = function subscribeFn(model) {\n            return _this12.addItem(fromAutocomplete, model, index, giveupFocus).then(resolve).catch(reject);\n          };\n\n          return _this12.onAdding ? _this12.onAdding(tag).pipe(first$1()).subscribe(subscribeFn, reject) : subscribeFn(tag);\n        });\n      }\n      /**\n       * @name selectItem\n       * @desc selects item passed as parameter as the selected tag\n       * @param item\n       * @param emit\n       */\n\n    }, {\n      key: \"selectItem\",\n      value: function selectItem(item) {\n        var emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var isReadonly = item && typeof item !== 'string' && item.readonly;\n\n        if (isReadonly || this.selectedTag === item) {\n          return;\n        }\n\n        this.selectedTag = item;\n\n        if (emit) {\n          this.onSelect.emit(item);\n        }\n      }\n      /**\n       * @name fireEvents\n       * @desc goes through the list of the events for a given eventName, and fires each of them\n       * @param eventName\n       * @param $event\n       */\n\n    }, {\n      key: \"fireEvents\",\n      value: function fireEvents(eventName, $event) {\n        var _this13 = this;\n\n        this.listeners[eventName].forEach(function (listener) {\n          return listener.call(_this13, $event);\n        });\n      }\n      /**\n       * @name handleKeydown\n       * @desc handles action when the user hits a keyboard key\n       * @param data\n       */\n\n    }, {\n      key: \"handleKeydown\",\n      value: function handleKeydown(data) {\n        var event = data.event;\n        var key = event.keyCode || event.which;\n        var shiftKey = event.shiftKey || false;\n\n        switch (KEY_PRESS_ACTIONS[key]) {\n          case ACTIONS_KEYS.DELETE:\n            if (this.selectedTag && this.removable) {\n              var index = this.items.indexOf(this.selectedTag);\n              this.onRemoveRequested(this.selectedTag, index);\n            }\n\n            break;\n\n          case ACTIONS_KEYS.SWITCH_PREV:\n            this.moveToTag(data.model, PREV);\n            break;\n\n          case ACTIONS_KEYS.SWITCH_NEXT:\n            this.moveToTag(data.model, NEXT);\n            break;\n\n          case ACTIONS_KEYS.TAB:\n            if (shiftKey) {\n              if (this.isFirstTag(data.model)) {\n                return;\n              }\n\n              this.moveToTag(data.model, PREV);\n            } else {\n              if (this.isLastTag(data.model) && (this.disable || this.maxItemsReached)) {\n                return;\n              }\n\n              this.moveToTag(data.model, NEXT);\n            }\n\n            break;\n\n          default:\n            return;\n        } // prevent default behaviour\n\n\n        event.preventDefault();\n      }\n    }, {\n      key: \"onFormSubmit\",\n      value: function onFormSubmit() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.prev = 0;\n                  _context3.next = 3;\n                  return this.onAddingRequested(false, this.formValue);\n\n                case 3:\n                  _context3.next = 8;\n                  break;\n\n                case 5:\n                  _context3.prev = 5;\n                  _context3.t0 = _context3[\"catch\"](0);\n                  return _context3.abrupt(\"return\");\n\n                case 8:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this, [[0, 5]]);\n        }));\n      }\n      /**\n       * @name setInputValue\n       * @param value\n       */\n\n    }, {\n      key: \"setInputValue\",\n      value: function setInputValue(value) {\n        var emitEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var control = this.getControl(); // update form value with the transformed item\n\n        control.setValue(value, {\n          emitEvent: emitEvent\n        });\n      }\n      /**\n       * @name getControl\n       */\n\n    }, {\n      key: \"getControl\",\n      value: function getControl() {\n        return this.inputForm.value;\n      }\n      /**\n       * @name focus\n       * @param applyFocus\n       * @param displayAutocomplete\n       */\n\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        var applyFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var displayAutocomplete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (this.dragProvider.getState('dragging')) {\n          return;\n        }\n\n        this.selectItem(undefined, false);\n\n        if (applyFocus) {\n          this.inputForm.focus();\n          this.onFocus.emit(this.formValue);\n        }\n      }\n      /**\n       * @name blur\n       */\n\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this.onTouched();\n        this.onBlur.emit(this.formValue);\n      }\n      /**\n       * @name hasErrors\n       */\n\n    }, {\n      key: \"hasErrors\",\n      value: function hasErrors() {\n        return !!this.inputForm && this.inputForm.hasErrors();\n      }\n      /**\n       * @name isInputFocused\n       */\n\n    }, {\n      key: \"isInputFocused\",\n      value: function isInputFocused() {\n        return !!this.inputForm && this.inputForm.isInputFocused();\n      }\n      /**\n       * - this is the one way I found to tell if the template has been passed and it is not\n       * the template for the menu item\n       * @name hasCustomTemplate\n       */\n\n    }, {\n      key: \"hasCustomTemplate\",\n      value: function hasCustomTemplate() {\n        var template = this.templates ? this.templates.first : undefined;\n        var menuTemplate = this.dropdown && this.dropdown.templates ? this.dropdown.templates.first : undefined;\n        return Boolean(template && template !== menuTemplate);\n      }\n      /**\n       * @name maxItemsReached\n       */\n\n    }, {\n      key: \"maxItemsReached\",\n      get: function get() {\n        return this.maxItems !== undefined && this.items.length >= this.maxItems;\n      }\n      /**\n       * @name formValue\n       */\n\n    }, {\n      key: \"formValue\",\n      get: function get() {\n        var form = this.inputForm.value;\n        return form ? form.value : '';\n      }\n      /**3\n       * @name onDragStarted\n       * @param event\n       * @param index\n       */\n\n    }, {\n      key: \"onDragStarted\",\n      value: function onDragStarted(event, tag, index) {\n        event.stopPropagation();\n        var item = {\n          zone: this.dragZone,\n          tag: tag,\n          index: index\n        };\n        this.dragProvider.setSender(this);\n        this.dragProvider.setDraggedItem(event, item);\n        this.dragProvider.setState({\n          dragging: true,\n          index: index\n        });\n      }\n      /**\n       * @name onDragOver\n       * @param event\n       */\n\n    }, {\n      key: \"onDragOver\",\n      value: function onDragOver(event, index) {\n        this.dragProvider.setState({\n          dropping: true\n        });\n        this.dragProvider.setReceiver(this);\n        event.preventDefault();\n      }\n      /**\n       * @name onTagDropped\n       * @param event\n       * @param index\n       */\n\n    }, {\n      key: \"onTagDropped\",\n      value: function onTagDropped(event, index) {\n        var item = this.dragProvider.getDraggedItem(event);\n\n        if (!item || item.zone !== this.dragZone) {\n          return;\n        }\n\n        this.dragProvider.onTagDropped(item.tag, item.index, index);\n        event.preventDefault();\n        event.stopPropagation();\n      }\n      /**\n       * @name isDropping\n       */\n\n    }, {\n      key: \"isDropping\",\n      value: function isDropping() {\n        var isReceiver = this.dragProvider.receiver === this;\n        var isDropping = this.dragProvider.getState('dropping');\n        return Boolean(isReceiver && isDropping);\n      }\n      /**\n       * @name onTagBlurred\n       * @param changedElement {TagModel}\n       * @param index {number}\n       */\n\n    }, {\n      key: \"onTagBlurred\",\n      value: function onTagBlurred(changedElement, index) {\n        this.items[index] = changedElement;\n        this.blur();\n      }\n      /**\n       * @name trackBy\n       * @param items\n       */\n\n    }, {\n      key: \"trackBy\",\n      value: function trackBy(index, item) {\n        return item[this.identifyBy];\n      }\n      /**\n       * @name updateEditedTag\n       * @param tag\n       */\n\n    }, {\n      key: \"updateEditedTag\",\n      value: function updateEditedTag(tag) {\n        this.onTagEdited.emit(tag);\n      }\n      /**\n       * @name moveToTag\n       * @param item\n       * @param direction\n       */\n\n    }, {\n      key: \"moveToTag\",\n      value: function moveToTag(item, direction) {\n        var isLast = this.isLastTag(item);\n        var isFirst = this.isFirstTag(item);\n        var stopSwitch = direction === NEXT && isLast || direction === PREV && isFirst;\n\n        if (stopSwitch) {\n          this.focus(true);\n          return;\n        }\n\n        var offset = direction === NEXT ? 1 : -1;\n        var index = this.getTagIndex(item) + offset;\n        var tag = this.getTagAtIndex(index);\n        return tag.select.call(tag);\n      }\n      /**\n       * @name isFirstTag\n       * @param item {TagModel}\n       */\n\n    }, {\n      key: \"isFirstTag\",\n      value: function isFirstTag(item) {\n        return this.tags.first.model === item;\n      }\n      /**\n       * @name isLastTag\n       * @param item {TagModel}\n       */\n\n    }, {\n      key: \"isLastTag\",\n      value: function isLastTag(item) {\n        return this.tags.last.model === item;\n      }\n      /**\n       * @name getTagIndex\n       * @param item\n       */\n\n    }, {\n      key: \"getTagIndex\",\n      value: function getTagIndex(item) {\n        var tags = this.tags.toArray();\n        return tags.findIndex(function (tag) {\n          return tag.model === item;\n        });\n      }\n      /**\n       * @name getTagAtIndex\n       * @param index\n       */\n\n    }, {\n      key: \"getTagAtIndex\",\n      value: function getTagAtIndex(index) {\n        var tags = this.tags.toArray();\n        return tags[index];\n      }\n      /**\n       * @name removeItem\n       * @desc removes an item from the array of the model\n       * @param tag {TagModel}\n       * @param index {number}\n       */\n\n    }, {\n      key: \"removeItem\",\n      value: function removeItem(tag, index) {\n        this.items = this.getItemsWithout(index); // if the removed tag was selected, set it as undefined\n\n        if (this.selectedTag === tag) {\n          this.selectItem(undefined, false);\n        } // focus input\n\n\n        this.focus(true, false); // emit remove event\n\n        this.onRemove.emit(tag);\n      }\n      /**\n       * @name addItem\n       * @desc adds the current text model to the items array\n       * @param fromAutocomplete {boolean}\n       * @param item {TagModel}\n       * @param index? {number}\n       * @param giveupFocus? {boolean}\n       */\n\n    }, {\n      key: \"addItem\",\n      value: function addItem() {\n        var _this14 = this;\n\n        var fromAutocomplete = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var item = arguments.length > 1 ? arguments[1] : undefined;\n        var index = arguments.length > 2 ? arguments[2] : undefined;\n        var giveupFocus = arguments.length > 3 ? arguments[3] : undefined;\n        var display = this.getItemDisplay(item);\n        var tag = this.createTag(item);\n\n        if (fromAutocomplete) {\n          this.setInputValue(this.getItemValue(item, true));\n        }\n\n        return new Promise(function (resolve, reject) {\n          /**\n           * @name reset\n           */\n          var reset = function reset() {\n            // reset control and focus input\n            _this14.setInputValue('');\n\n            if (giveupFocus) {\n              _this14.focus(false, false);\n            } else {\n              // focus input\n              _this14.focus(true, false);\n            }\n\n            resolve(display);\n          };\n\n          var appendItem = function appendItem() {\n            _this14.appendTag(tag, index); // emit event\n\n\n            _this14.onAdd.emit(tag);\n\n            if (!_this14.dropdown) {\n              return;\n            }\n\n            _this14.dropdown.hide();\n\n            if (_this14.dropdown.showDropdownIfEmpty) {\n              _this14.dropdown.show();\n            }\n          };\n\n          var status = _this14.inputForm.form.status;\n\n          var isTagValid = _this14.isTagValid(tag, fromAutocomplete);\n\n          var onValidationError = function onValidationError() {\n            _this14.onValidationError.emit(tag);\n\n            return reject();\n          };\n\n          if (status === 'VALID' && isTagValid) {\n            appendItem();\n            return reset();\n          }\n\n          if (status === 'INVALID' || !isTagValid) {\n            reset();\n            return onValidationError();\n          }\n\n          if (status === 'PENDING') {\n            var statusUpdate$ = _this14.inputForm.form.statusChanges;\n            return statusUpdate$.pipe(filter$1(function (statusUpdate) {\n              return statusUpdate !== 'PENDING';\n            }), first$1()).subscribe(function (statusUpdate) {\n              if (statusUpdate === 'VALID' && isTagValid) {\n                appendItem();\n                return reset();\n              } else {\n                reset();\n                return onValidationError();\n              }\n            });\n          }\n        });\n      }\n      /**\n       * @name setupSeparatorKeysListener\n       */\n\n    }, {\n      key: \"setupSeparatorKeysListener\",\n      value: function setupSeparatorKeysListener() {\n        var _this15 = this;\n\n        var useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;\n\n        var listener = function listener($event) {\n          var hasKeyCode = _this15.separatorKeyCodes.indexOf($event.keyCode) >= 0;\n          var hasKey = _this15.separatorKeys.indexOf($event.key) >= 0; // the keyCode of keydown event is 229 when IME is processing the key event.\n\n          var isIMEProcessing = $event.keyCode === 229;\n\n          if (hasKeyCode || hasKey && !isIMEProcessing) {\n            $event.preventDefault();\n\n            _this15.onAddingRequested(false, _this15.formValue).catch(function () {});\n          }\n        };\n\n        listen.call(this, KEYDOWN, listener, useSeparatorKeys);\n      }\n      /**\n       * @name setUpKeypressListeners\n       */\n\n    }, {\n      key: \"setUpKeypressListeners\",\n      value: function setUpKeypressListeners() {\n        var _this16 = this;\n\n        var listener = function listener($event) {\n          var isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\n\n          if (isCorrectKey && !_this16.formValue && _this16.items.length) {\n            _this16.tags.last.select.call(_this16.tags.last);\n          }\n        }; // setting up the keypress listeners\n\n\n        listen.call(this, KEYDOWN, listener);\n      }\n      /**\n       * @name setUpKeydownListeners\n       */\n\n    }, {\n      key: \"setUpInputKeydownListeners\",\n      value: function setUpInputKeydownListeners() {\n        var _this17 = this;\n\n        this.inputForm.onKeydown.subscribe(function (event) {\n          if (event.key === 'Backspace' && _this17.formValue.trim() === '') {\n            event.preventDefault();\n          }\n        });\n      }\n      /**\n       * @name setUpOnPasteListener\n       */\n\n    }, {\n      key: \"setUpOnPasteListener\",\n      value: function setUpOnPasteListener() {\n        var _this18 = this;\n\n        var input = this.inputForm.input.nativeElement; // attach listener to input\n\n        this.renderer.listen(input, 'paste', function (event) {\n          _this18.onPasteCallback(event);\n\n          event.preventDefault();\n          return true;\n        });\n      }\n      /**\n       * @name setUpTextChangeSubscriber\n       */\n\n    }, {\n      key: \"setUpTextChangeSubscriber\",\n      value: function setUpTextChangeSubscriber() {\n        var _this19 = this;\n\n        this.inputForm.form.valueChanges.pipe(debounceTime$1(this.onTextChangeDebounce)).subscribe(function (value) {\n          _this19.onTextChange.emit(value.item);\n        });\n      }\n      /**\n       * @name setUpOnBlurSubscriber\n       */\n\n    }, {\n      key: \"setUpOnBlurSubscriber\",\n      value: function setUpOnBlurSubscriber() {\n        var _this20 = this;\n\n        var filterFn = function filterFn() {\n          var isVisible = _this20.dropdown && _this20.dropdown.isVisible;\n          return !isVisible && !!_this20.formValue;\n        };\n\n        this.inputForm.onBlur.pipe(debounceTime$1(100), filter$1(filterFn)).subscribe(function () {\n          var reset = function reset() {\n            return _this20.setInputValue('');\n          };\n\n          if (_this20.addOnBlur) {\n            return _this20.onAddingRequested(false, _this20.formValue, undefined, true).then(reset).catch(reset);\n          }\n\n          reset();\n        });\n      }\n      /**\n       * @name findDupe\n       * @param tag\n       * @param isFromAutocomplete\n       */\n\n    }, {\n      key: \"findDupe\",\n      value: function findDupe(tag, isFromAutocomplete) {\n        var _this21 = this;\n\n        var identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\n        var id = tag[identifyBy];\n        return this.items.find(function (item) {\n          return _this21.getItemValue(item) === id;\n        });\n      }\n      /**\n       * @name setAnimationMetadata\n       */\n\n    }, {\n      key: \"setAnimationMetadata\",\n      value: function setAnimationMetadata() {\n        this.animationMetadata = {\n          value: 'in',\n          params: Object.assign({}, this.animationDuration)\n        };\n      }\n    }]);\n\n    return TagInputComponent;\n  }(TagInputAccessor);\n\n  TagInputComponent.ɵfac = function TagInputComponent_Factory(t) {\n    return new (t || TagInputComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(DragProvider));\n  };\n\n  TagInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TagInputComponent,\n    selectors: [[\"tag-input\"]],\n    contentQueries: function TagInputComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, TagInputDropdown, 5);\n        i0.ɵɵcontentQuery(dirIndex, TemplateRef, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function TagInputComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TagInputForm, 5);\n        i0.ɵɵviewQuery(TagComponent, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputForm = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tags = _t);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function TagInputComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", ctx.tabindexAttr);\n      }\n    },\n    inputs: {\n      separatorKeys: \"separatorKeys\",\n      separatorKeyCodes: \"separatorKeyCodes\",\n      placeholder: \"placeholder\",\n      secondaryPlaceholder: \"secondaryPlaceholder\",\n      maxItems: \"maxItems\",\n      validators: \"validators\",\n      asyncValidators: \"asyncValidators\",\n      onlyFromAutocomplete: \"onlyFromAutocomplete\",\n      errorMessages: \"errorMessages\",\n      theme: \"theme\",\n      onTextChangeDebounce: \"onTextChangeDebounce\",\n      inputId: \"inputId\",\n      inputClass: \"inputClass\",\n      clearOnBlur: \"clearOnBlur\",\n      hideForm: \"hideForm\",\n      addOnBlur: \"addOnBlur\",\n      addOnPaste: \"addOnPaste\",\n      pasteSplitPattern: \"pasteSplitPattern\",\n      blinkIfDupe: \"blinkIfDupe\",\n      removable: \"removable\",\n      editable: \"editable\",\n      allowDupes: \"allowDupes\",\n      modelAsStrings: \"modelAsStrings\",\n      trimTags: \"trimTags\",\n      inputText: \"inputText\",\n      ripple: \"ripple\",\n      tabindex: \"tabindex\",\n      disable: \"disable\",\n      dragZone: \"dragZone\",\n      onRemoving: \"onRemoving\",\n      onAdding: \"onAdding\",\n      animationDuration: \"animationDuration\"\n    },\n    outputs: {\n      onAdd: \"onAdd\",\n      onRemove: \"onRemove\",\n      onSelect: \"onSelect\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\",\n      onTextChange: \"onTextChange\",\n      onPaste: \"onPaste\",\n      onValidationError: \"onValidationError\",\n      onTagEdited: \"onTagEdited\",\n      inputTextChange: \"inputTextChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([CUSTOM_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c3,\n    decls: 8,\n    vars: 27,\n    consts: [[1, \"ng2-tag-input\", 3, \"ngClass\", \"click\", \"drop\", \"dragenter\", \"dragover\", \"dragend\"], [1, \"ng2-tags-container\"], [3, \"draggable\", \"canAddTag\", \"disabled\", \"hasRipple\", \"index\", \"removable\", \"editable\", \"displayBy\", \"identifyBy\", \"template\", \"model\", \"onSelect\", \"onRemove\", \"onKeyDown\", \"onTagEdited\", \"onBlur\", \"dragstart\", \"drop\", \"dragenter\", \"dragover\", \"dragleave\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"inputText\", \"disabled\", \"validators\", \"asyncValidators\", \"hidden\", \"placeholder\", \"inputClass\", \"inputId\", \"tabindex\", \"onSubmit\", \"onBlur\", \"click\", \"onKeydown\", \"onKeyup\"], [\"class\", \"progress-bar\", 4, \"ngIf\"], [\"class\", \"error-messages\", 3, \"ngClass\", 4, \"ngIf\"], [3, \"draggable\", \"canAddTag\", \"disabled\", \"hasRipple\", \"index\", \"removable\", \"editable\", \"displayBy\", \"identifyBy\", \"template\", \"model\", \"onSelect\", \"onRemove\", \"onKeyDown\", \"onTagEdited\", \"onBlur\", \"dragstart\", \"drop\", \"dragenter\", \"dragover\", \"dragleave\"], [1, \"progress-bar\"], [1, \"error-messages\", 3, \"ngClass\"], [\"class\", \"error-message\", 4, \"ngFor\", \"ngForOf\"], [1, \"error-message\"]],\n    template: function TagInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"click\", function TagInputComponent_Template_div_click_0_listener() {\n          return ctx.focus(true, false);\n        })(\"drop\", function TagInputComponent_Template_div_drop_0_listener($event) {\n          return ctx.dragZone ? ctx.onTagDropped($event, undefined) : undefined;\n        })(\"dragenter\", function TagInputComponent_Template_div_dragenter_0_listener($event) {\n          return ctx.dragZone ? ctx.onDragOver($event) : undefined;\n        })(\"dragover\", function TagInputComponent_Template_div_dragover_0_listener($event) {\n          return ctx.dragZone ? ctx.onDragOver($event) : undefined;\n        })(\"dragend\", function TagInputComponent_Template_div_dragend_0_listener() {\n          return ctx.dragZone ? ctx.dragProvider.onDragEnd() : undefined;\n        });\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtemplate(2, TagInputComponent_tag_2_Template, 1, 14, \"tag\", 2);\n        i0.ɵɵelementStart(3, \"tag-input-form\", 3);\n        i0.ɵɵlistener(\"onSubmit\", function TagInputComponent_Template_tag_input_form_onSubmit_3_listener() {\n          return ctx.onFormSubmit();\n        })(\"onBlur\", function TagInputComponent_Template_tag_input_form_onBlur_3_listener() {\n          return ctx.blur();\n        })(\"click\", function TagInputComponent_Template_tag_input_form_click_3_listener() {\n          return ctx.dropdown ? ctx.dropdown.show() : undefined;\n        })(\"onKeydown\", function TagInputComponent_Template_tag_input_form_onKeydown_3_listener($event) {\n          return ctx.fireEvents(\"keydown\", $event);\n        })(\"onKeyup\", function TagInputComponent_Template_tag_input_form_onKeyup_3_listener($event) {\n          return ctx.fireEvents(\"keyup\", $event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(4, TagInputComponent_div_4_Template, 1, 0, \"div\", 4);\n        i0.ɵɵpipe(5, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, TagInputComponent_div_6_Template, 2, 2, \"div\", 5);\n        i0.ɵɵprojection(7);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ng2-tag-input--dropping\", ctx.isDropping())(\"ng2-tag-input--disabled\", ctx.disable)(\"ng2-tag-input--loading\", ctx.isLoading)(\"ng2-tag-input--invalid\", ctx.hasErrors())(\"ng2-tag-input--focused\", ctx.isInputFocused());\n        i0.ɵɵproperty(\"ngClass\", ctx.theme);\n        i0.ɵɵattribute(\"tabindex\", -1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.items)(\"ngForTrackBy\", ctx.trackBy);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"inputText\", ctx.inputText)(\"disabled\", ctx.disable)(\"validators\", ctx.validators)(\"asyncValidators\", ctx.asyncValidators)(\"hidden\", ctx.maxItemsReached)(\"placeholder\", ctx.items.length ? ctx.placeholder : ctx.secondaryPlaceholder)(\"inputClass\", ctx.inputClass)(\"inputId\", ctx.inputId)(\"tabindex\", ctx.tabindex);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(5, 25, ctx.isProgressBarVisible$));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasErrors());\n      }\n    },\n    directives: [TagComponent, TagInputForm, i2.NgClass, i2.NgForOf, i2.NgIf],\n    pipes: [i2.AsyncPipe],\n    styles: [\".dark[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:focus{box-shadow:0 0 0 1px #323232}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]{background-color:#fff;display:inline-block;color:#555;vertical-align:middle;max-width:100%;height:42px;line-height:44px}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:none;box-shadow:none;outline:none;background-color:transparent;padding:0 6px;margin:0;width:auto;max-width:inherit}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::-moz-placeholder{color:#777;opacity:1}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:-ms-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus{border:none;box-shadow:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused[_ngcontent-%COMP%]{box-shadow:inset 0 1px 1px #0006;border:1px solid #ccc}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{box-shadow:inset 0 1px 1px #d9534f}.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;transition:all .25s;padding:.25rem 0;min-height:32px;cursor:text;border-bottom:2px solid #efefef}.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.ng2-tag-input.ng2-tag-input--focused[_ngcontent-%COMP%]{border-bottom:2px solid #2196F3}.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{border-bottom:2px solid #f44336}.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.ng2-tag-input[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{margin:.1em 0}.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.minimal.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:1px solid transparent}.minimal.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.minimal.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.minimal.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.minimal.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.minimal.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.dark.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #444}.dark.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.dark.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.dark.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.dark.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.dark.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.bootstrap.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #efefef}.bootstrap.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.bootstrap.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.bootstrap.ng2-tag-input.ng2-tag-input--focused[_ngcontent-%COMP%]{border-bottom:2px solid #0275d8}.bootstrap.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{border-bottom:2px solid #d9534f}.bootstrap.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.bootstrap.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.bootstrap.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;padding:4px;cursor:text;box-shadow:inset 0 1px 1px #00000013;border-radius:4px}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{border-bottom:1px solid #d9534f}.bootstrap3-info.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{margin:.1em 0}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.error-message[_ngcontent-%COMP%]{font-size:.8em;color:#f44336;margin:.5em 0 0}.bootstrap[_ngcontent-%COMP%]   .error-message[_ngcontent-%COMP%]{color:#d9534f}.progress-bar[_ngcontent-%COMP%], .progress-bar[_ngcontent-%COMP%]:before{height:2px;width:100%;margin:0}.progress-bar[_ngcontent-%COMP%]{background-color:#2196f3;display:flex;position:absolute;bottom:0}.progress-bar[_ngcontent-%COMP%]:before{background-color:#82c4f8;content:\\\"\\\";-webkit-animation:running-progress 2s cubic-bezier(.4,0,.2,1) infinite;animation:running-progress 2s cubic-bezier(.4,0,.2,1) infinite}@-webkit-keyframes running-progress{0%{margin-left:0;margin-right:100%}50%{margin-left:25%;margin-right:0}to{margin-left:100%;margin-right:0}}@keyframes running-progress{0%{margin-left:0;margin-right:100%}50%{margin-left:25%;margin-right:0}to{margin-left:100%;margin-right:0}}tag[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;font-family:Roboto,Helvetica Neue,sans-serif;font-weight:400;font-size:1em;letter-spacing:.05rem;color:#444;border-radius:16px;transition:all .3s;margin:.1rem .3rem .1rem 0;padding:.08rem .45rem;height:32px;line-height:34px;background:#efefef;-webkit-user-select:none;-moz-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):focus{background:#2196F3;color:#fff;box-shadow:0 2px 3px 1px #d4d1d1}tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):active{background:#0d8aee;color:#fff;box-shadow:0 2px 3px 1px #d4d1d1}tag[_ngcontent-%COMP%]:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#e2e2e2;color:#000;color:initial;box-shadow:0 2px 3px 1px #d4d1d1}tag.readonly[_ngcontent-%COMP%]{cursor:default}tag.readonly[_ngcontent-%COMP%]:focus, tag[_ngcontent-%COMP%]:focus{outline:0}tag.tag--editing[_ngcontent-%COMP%]{background-color:#fff;border:1px solid #ccc;cursor:text}.minimal[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;border-radius:0;background:#f9f9f9;-webkit-user-select:none;-moz-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.minimal[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):focus{background:#d0d0d0;color:#000;color:initial}.minimal[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):active{background:#d0d0d0;color:#000;color:initial}.minimal[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#ececec}.minimal[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]{cursor:default}.minimal[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]:focus, .minimal[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:focus{outline:0}.minimal[_ngcontent-%COMP%]   tag.tag--editing[_ngcontent-%COMP%]{cursor:text}.dark[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;color:#f9f9f9;border-radius:3px;background:#444;-webkit-user-select:none;-moz-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.dark[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):focus{background:#efefef;color:#444}.dark[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#2b2b2b;color:#f9f9f9}.dark[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]{cursor:default}.dark[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]:focus, .dark[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:focus{outline:0}.dark[_ngcontent-%COMP%]   tag.tag--editing[_ngcontent-%COMP%]{cursor:text}.bootstrap[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;color:#f9f9f9;border-radius:.25rem;background:#0275d8;-webkit-user-select:none;-moz-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.bootstrap[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):focus{background:#025aa5}.bootstrap[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):active{background:#025aa5}.bootstrap[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#0267bf;color:#f9f9f9}.bootstrap[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]{cursor:default}.bootstrap[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]:focus, .bootstrap[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:focus{outline:0}.bootstrap[_ngcontent-%COMP%]   tag.tag--editing[_ngcontent-%COMP%]{cursor:text}.bootstrap3-info[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;font-family:inherit;font-weight:400;font-size:95%;color:#fff;border-radius:.25em;background:#5bc0de;-webkit-user-select:none;-moz-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative;padding:.25em .6em;text-align:center;white-space:nowrap}.bootstrap3-info[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):focus{background:#28a1c5}.bootstrap3-info[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):active{background:#28a1c5}.bootstrap3-info[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#46b8da;color:#fff}.bootstrap3-info[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]{cursor:default}.bootstrap3-info[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]:focus, .bootstrap3-info[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:focus{outline:0}.bootstrap3-info[_ngcontent-%COMP%]   tag.tag--editing[_ngcontent-%COMP%]{cursor:text}[_nghost-%COMP%]{display:block}\"],\n    data: {\n      animation: animations\n    }\n  });\n  return TagInputComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar optionsProvider = new OptionsProvider();\nvar TagInputModule = /*#__PURE__*/(function () {\n  var TagInputModule = /*#__PURE__*/function () {\n    function TagInputModule() {\n      _classCallCheck(this, TagInputModule);\n    }\n\n    _createClass(TagInputModule, null, [{\n      key: \"withDefaults\",\n      value:\n      /**\n       * @name withDefaults\n       * @param options {Options}\n       */\n      function withDefaults(options) {\n        optionsProvider.setOptions(options);\n      }\n    }]);\n\n    return TagInputModule;\n  }();\n\n  TagInputModule.ɵfac = function TagInputModule_Factory(t) {\n    return new (t || TagInputModule)();\n  };\n\n  TagInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TagInputModule\n  });\n  TagInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DragProvider, {\n      provide: COMPOSITION_BUFFER_MODE,\n      useValue: false\n    }],\n    imports: [[CommonModule, ReactiveFormsModule, FormsModule, Ng2DropdownModule]]\n  });\n  return TagInputModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DeleteIconComponent, HighlightPipe, TagComponent, TagInputComponent, TagInputDropdown, TagInputForm, TagInputModule, TagRipple }; //# sourceMappingURL=ngx-chips.mjs.map","map":null,"metadata":{},"sourceType":"module"}