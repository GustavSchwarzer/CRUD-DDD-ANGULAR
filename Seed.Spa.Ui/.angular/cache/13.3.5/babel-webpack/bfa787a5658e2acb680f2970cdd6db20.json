{"ast":null,"code":"import _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ServiceBase } from '../services/service.base';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/service.base\";\nexport var TagCustomComponent = /*#__PURE__*/(function () {\n  var TagCustomComponent = /*#__PURE__*/function () {\n    function TagCustomComponent(serviceBase) {\n      _classCallCheck(this, TagCustomComponent);\n\n      this.serviceBase = serviceBase;\n      this.tagChange = new EventEmitter();\n      this.model = {};\n      this.modelJson = null;\n\n      if (this.readOnly) {\n        this.placeholder = \"\";\n        this.secondaryPlaceholder = \"\";\n        this.disabled = true;\n      }\n    } //get accessor\n\n\n    _createClass(TagCustomComponent, [{\n      key: \"value\",\n      get: function get() {\n        if (this.modelJson) {\n          return this.modelJson;\n        }\n\n        if (this.ctrlName) {\n          this.modelJson = this.serviceBase.tagTransformCollectionToShow({\n            model: this.model[this.ctrlName],\n            readOnly: this.readOnly,\n            ctrlName: this.ctrlName,\n            ctrlNameItem: this.ctrlNameItem,\n            ctrlNameItemDisplay: this.ctrlNameItemDisplay\n          });\n          return this.modelJson;\n        }\n\n        this.modelJson = this.serviceBase.tagTransformToShow(this.model, this.readOnly);\n        return this.modelJson;\n      },\n      set: //set accessor including call the onchange callback\n      function set(v) {\n        if (v !== this.model) {\n          if (this.ctrlName) {\n            this.model[this.ctrlName] = this.serviceBase.tagTransformCollectionToSave({\n              model: v,\n              readOnly: this.readOnly,\n              ctrlName: this.ctrlName,\n              ctrlNameItem: this.ctrlNameItem,\n              ctrlNameItemDisplay: this.ctrlNameItemDisplay\n            });\n          } else {\n            this.model = this.serviceBase.tagTransformToSave(v);\n          }\n\n          this.modelJson = null;\n          this.onChange(v);\n        }\n      }\n    }, {\n      key: \"onModelChange\",\n      value: function onModelChange($event) {\n        this.tagChange.emit(this.model);\n      } //From ControlValueAccessor interface\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        if (value !== this.model) {\n          this.model = value;\n        }\n      } //From ControlValueAccessor interface\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      } //From ControlValueAccessor interface\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.model = {};\n      }\n    }]);\n\n    return TagCustomComponent;\n  }();\n\n  TagCustomComponent.ɵfac = function TagCustomComponent_Factory(t) {\n    return new (t || TagCustomComponent)(i0.ɵɵdirectiveInject(i1.ServiceBase));\n  };\n\n  TagCustomComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TagCustomComponent,\n    selectors: [[\"tag-custom\"]],\n    inputs: {\n      readOnly: \"readOnly\",\n      model: \"model\",\n      ctrlName: \"ctrlName\",\n      ctrlNameItem: \"ctrlNameItem\",\n      ctrlNameItemDisplay: \"ctrlNameItemDisplay\"\n    },\n    outputs: {\n      tagChange: \"tagChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: TagCustomComponent,\n      multi: true\n    }])],\n    decls: 1,\n    vars: 4,\n    consts: [[3, \"ngModel\", \"placeholder\", \"secondaryPlaceholder\", \"disabled\", \"ngModelChange\"]],\n    template: function TagCustomComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"tag-input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function TagCustomComponent_Template_tag_input_ngModelChange_0_listener($event) {\n          return ctx.value = $event;\n        })(\"ngModelChange\", function TagCustomComponent_Template_tag_input_ngModelChange_0_listener($event) {\n          return ctx.onModelChange($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.value)(\"placeholder\", ctx.placeholder)(\"secondaryPlaceholder\", ctx.secondaryPlaceholder)(\"disabled\", ctx.disabled);\n      }\n    },\n    encapsulation: 2\n  });\n  return TagCustomComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}