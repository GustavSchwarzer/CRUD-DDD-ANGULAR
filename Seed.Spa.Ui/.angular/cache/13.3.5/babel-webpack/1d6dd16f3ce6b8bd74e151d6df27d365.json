{"ast":null,"code":"import _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { ElementRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nexport var MaskInputDirective = /*#__PURE__*/(function () {\n  var MaskInputDirective = /*#__PURE__*/function () {\n    function MaskInputDirective(_elemetRef) {\n      _classCallCheck(this, MaskInputDirective);\n\n      this._elemetRef = _elemetRef;\n    }\n\n    _createClass(MaskInputDirective, [{\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this._elemetRef.nativeElement.value = null;\n\n        if (value) {\n          this._elemetRef.nativeElement.value = value;\n        }\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n    }, {\n      key: \"onKeyup\",\n      value: function onKeyup($event) {\n        if (this.mask == \"\") return;\n        var valor = $event.target.value.replace(/\\D/g, ''); // retorna caso pressionado backspace\n\n        if ($event.keyCode === 8) {\n          this.onChange(valor);\n          return;\n        }\n\n        var valorComMascara = this.aplicarMascara(valor);\n        $event.target.value = valorComMascara;\n        this.onChange(valorComMascara);\n      }\n    }, {\n      key: \"aplicarMascara\",\n      value: function aplicarMascara(valor) {\n        if (!this.mask) return;\n        var pad = this.mask.toString().replace(/\\D/g, '').replace(/9/g, '_');\n        var valorMask = valor + pad.substring(0, pad.length - valor.length);\n\n        if (valor.length <= pad.length) {\n          this.onChange(valor);\n        }\n\n        var valorMaskPos = 0;\n        valor = '';\n\n        for (var i = 0; i < this.mask.length; i++) {\n          if (isNaN(parseInt(this.mask.charAt(i)))) {\n            valor += this.mask.charAt(i);\n          } else {\n            valor += valorMask[valorMaskPos++];\n          }\n        }\n\n        if (valor.indexOf('_') > -1) {\n          valor = valor.substr(0, valor.indexOf('_'));\n        }\n\n        return valor;\n      }\n    }, {\n      key: \"onBlur\",\n      value: function onBlur($event) {\n        if ($event.target.value.length === this.mask.length) {\n          return;\n        }\n      }\n    }, {\n      key: \"onFocus\",\n      value: function onFocus($event) {}\n    }]);\n\n    return MaskInputDirective;\n  }();\n\n  MaskInputDirective.ɵfac = function MaskInputDirective_Factory(t) {\n    return new (t || MaskInputDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  MaskInputDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: MaskInputDirective,\n    selectors: [[\"\", \"maski\", \"\"]],\n    hostBindings: function MaskInputDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keyup\", function MaskInputDirective_keyup_HostBindingHandler($event) {\n          return ctx.onKeyup($event);\n        })(\"blur\", function MaskInputDirective_blur_HostBindingHandler($event) {\n          return ctx.onBlur($event);\n        })(\"focus\", function MaskInputDirective_focus_HostBindingHandler($event) {\n          return ctx.onFocus($event);\n        });\n      }\n    },\n    inputs: {\n      mask: [\"maski\", \"mask\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: MaskInputDirective,\n      multi: true\n    }])]\n  });\n  return MaskInputDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}