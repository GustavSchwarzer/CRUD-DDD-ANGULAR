{"ast":null,"code":"/**\r\n * Class Cookie - Holds static functions to deal with Cookies\r\n */\nvar Cookie = function () {\n  function Cookie() {}\n  /**\r\n   * Retrieves a single cookie by it's name\r\n   *\r\n   * @param  {string} name Identification of the Cookie\r\n   * @returns The Cookie's value\r\n   */\n\n\n  Cookie.get = function (name) {\n    var myWindow = window;\n    name = myWindow.escape(name);\n    var regexp = new RegExp('(?:^' + name + '|;\\\\s*' + name + ')=(.*?)(?:;|$)', 'g');\n    var result = regexp.exec(document.cookie);\n    return result === null ? null : myWindow.unescape(result[1]);\n  };\n  /**\r\n   * Retrieves a a list of all cookie avaiable\r\n   *\r\n   * @returns Object with all Cookies\r\n   */\n\n\n  Cookie.getAll = function () {\n    var cookies = {};\n\n    if (document.cookie && document.cookie != '') {\n      var split = document.cookie.split(';');\n\n      for (var i = 0; i < split.length; i++) {\n        var currCookie = split[i].split('=');\n        currCookie[0] = currCookie[0].replace(/^ /, '');\n        cookies[decodeURIComponent(currCookie[0])] = decodeURIComponent(currCookie[1]);\n      }\n    }\n\n    return cookies;\n  };\n  /**\r\n   * Save the Cookie\r\n   *\r\n   * @param  {string} name Cookie's identification\r\n   * @param  {string} value Cookie's value\r\n   * @param  {number} expires Cookie's expiration date in days from now. If it's undefined the cookie is a session Cookie\r\n   * @param  {string} path Path relative to the domain where the cookie should be avaiable. Default /\r\n   * @param  {string} domain Domain where the cookie should be avaiable. Default current domain\r\n   */\n\n\n  Cookie.set = function (name, value, expires, path, domain) {\n    var myWindow = window;\n    var cookieStr = myWindow.escape(name) + '=' + myWindow.escape(value) + ';';\n\n    if (expires) {\n      var dtExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\n      cookieStr += 'expires=' + dtExpires.toUTCString() + ';';\n    }\n\n    if (path) {\n      cookieStr += 'path=' + path + ';';\n    }\n\n    if (domain) {\n      cookieStr += 'domain=' + domain + ';';\n    } // console.log(cookieStr);\n\n\n    document.cookie = cookieStr;\n  };\n  /**\r\n   * Removes specified Cookie\r\n   *\r\n   * @param  {string} name Cookie's identification\r\n   * @param  {string} path Path relative to the domain where the cookie should be avaiable. Default /\r\n   * @param  {string} domain Domain where the cookie should be avaiable. Default current domain\r\n   */\n\n\n  Cookie.delete = function (name, path, domain) {\n    // If the cookie exists\n    if (Cookie.get(name)) {\n      Cookie.set(name, '', -1, path, domain);\n    }\n  };\n  /**\r\n   * Delete all cookie avaiable\r\n   */\n\n\n  Cookie.deleteAll = function (path, domain) {\n    var cookies = Cookie.getAll();\n\n    for (var cookieName in cookies) {\n      Cookie.delete(cookieName, path, domain);\n    }\n  };\n\n  return Cookie;\n}();\n\nexports.Cookie = Cookie; //# sourceMappingURL=cookie.js.map","map":null,"metadata":{},"sourceType":"script"}