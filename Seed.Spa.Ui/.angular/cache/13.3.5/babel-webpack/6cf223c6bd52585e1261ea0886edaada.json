{"ast":null,"code":"import _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar _a;\n\nimport { Component, Input, Output, EventEmitter, ChangeDetectorRef, ViewChild } from '@angular/core';\nimport { GlobalService } from \"../../global.service\";\nimport { ApiService } from \"../../common/services/api.service\";\nimport { ViewModel } from '../model/viewmodel';\nimport { NotificationsService } from 'angular2-notifications';\n\nvar UploadCustomComponent = /*#__PURE__*/function () {\n  function UploadCustomComponent(api, notificationsService, ref) {\n    _classCallCheck(this, UploadCustomComponent);\n\n    this.api = api;\n    this.notificationsService = notificationsService;\n    this.ref = ref;\n    this.onChangeUploadExternal = new EventEmitter();\n    this.downloadUri = GlobalService.getEndPoints().DOWNLOAD;\n    this.fileUri = this.downloadUri + this.folder + \"/\" + this.fileName;\n    this.enabledUploadExternal = false;\n    this.accept = \"*.*\";\n    this.rename = true;\n    this.pasteArea = false;\n    this.isImage = false;\n    this.enableCopyLink = false;\n    this.pasteAreaText = \"Arraste e solte arquivos ou cole PrintScreens de telas\";\n    this.maxsize = 2;\n  }\n\n  _createClass(UploadCustomComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      this.edit();\n      this._notificationEmitter = GlobalService.getNotificationEmitter().subscribe(function (not) {\n        if (not.event == \"edit\") {\n          _this.edit();\n        }\n\n        if (not.event == \"init\") {\n          _this.fileNameOld = null;\n          _this.fileName = null;\n        }\n      });\n\n      if (this.pasteArea) {\n        var area = document.getElementById(\"upload-component-paste-area\");\n        area.addEventListener(\"paste\", function (e) {\n          return _this.handlePaste(e);\n        });\n\n        area.ondragover = function () {\n          _this.className = 'upload-component-paste-area';\n          return false;\n        };\n\n        area.ondrop = function (e) {\n          _this.handleDrop(e);\n        };\n      }\n    }\n  }, {\n    key: \"edit\",\n    value: function edit() {\n      this.fileNameOld = this.vm.model[this.ctrlName];\n      this.fileName = this.vm.model[this.ctrlName];\n      this.verifyFileName(this.fileName);\n    }\n  }, {\n    key: \"copyToClipboard\",\n    value: function copyToClipboard(file) {\n      var copyText = document.getElementById(file);\n      copyText.select();\n      document.execCommand(\"Copy\");\n    }\n  }, {\n    key: \"handleDrop\",\n    value: function handleDrop(e) {\n      e.preventDefault();\n      e.dataTransfer.files;\n      this.uploadFileOnPaste(e.dataTransfer.files[0]);\n    }\n  }, {\n    key: \"handlePaste\",\n    value: function handlePaste(e) {\n      for (var i = 0; i < e.clipboardData.items.length; i++) {\n        var item = e.clipboardData.items[i];\n        this.uploadFileOnPaste(item.getAsFile());\n      }\n    }\n  }, {\n    key: \"uploadFileOnPaste\",\n    value: function uploadFileOnPaste(file) {\n      this.fileNameOld = file.name;\n      if (this.enabledUploadExternal) this.uploadCustom(file, this.rename);else this.uploadDefault(file, this.rename);\n    }\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {\n      this.ref.detectChanges();\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(event) {\n      if (event.target.files.length == 0) return false;\n      var file = event.target.files[0];\n      this.fileNameOld = file.name;\n\n      if (this.maxsize) {\n        if (file.size > this.maxsize * 1024 * 1000) {\n          this.notificationsService.error('Atenção', 'A imagem é muito grande', {\n            timeOut: 5000,\n            showProgressBar: true,\n            pauseOnHover: true,\n            clickToClose: false\n          });\n          event.target.files = [];\n          return false;\n        }\n      }\n\n      if (this.enabledUploadExternal) return this.uploadCustom(file, this.rename);\n      return this.uploadDefault(file, this.rename);\n    }\n  }, {\n    key: \"uploadCustom\",\n    value: function uploadCustom(file, rename) {\n      this.onChangeUploadExternal.emit(file);\n      this.vm.model[this.ctrlName] = file.name;\n      this.fileName = file.name;\n      this.pasteArea = false;\n      this.verifyFileType(file);\n      return true;\n    }\n  }, {\n    key: \"verifyFileType\",\n    value: function verifyFileType(file) {\n      this.isImage = false;\n      if (file.type == \"image/png\") this.isImage = true;\n      if (file.type == \"image/jpeg\") this.isImage = true;\n      if (file.type == \"image/gif\") this.isImage = true;\n    }\n  }, {\n    key: \"verifyFileName\",\n    value: function verifyFileName(fileName) {\n      if (fileName) {\n        this.isImage = false;\n        if (fileName.endsWith(\"png\")) this.isImage = true;\n        if (fileName.endsWith(\"jpg\")) this.isImage = true;\n        if (fileName.endsWith(\"gif\")) this.isImage = true;\n      }\n    }\n  }, {\n    key: \"uploadDefault\",\n    value: function uploadDefault(file, rename) {\n      var _this2 = this;\n\n      this.api.setResource('upload').upload(file, this.folder, rename).subscribe(function (result) {\n        _this2.vm.model[_this2.ctrlName] = result.data[0];\n        _this2.fileName = result.data[0];\n        _this2.pasteArea = false;\n\n        _this2.verifyFileType(file);\n      });\n      return true;\n    }\n  }, {\n    key: \"onDelete\",\n    value: function onDelete() {\n      var _this3 = this;\n\n      this.api.setResource('upload').deleteUpload(this.folder, this.fileName).subscribe(function () {\n        _this3.reset();\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.fileUpload.nativeElement.value = '';\n      this.vm.model[this.ctrlName] = null;\n      this.fileName = null;\n      this.fileNameOld = null;\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this.ref.detectChanges();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._notificationEmitter) this._notificationEmitter.unsubscribe();\n    }\n  }]);\n\n  return UploadCustomComponent;\n}();\n\n__decorate([ViewChild('file', {\n  static: false\n}), __metadata(\"design:type\", Object)], UploadCustomComponent.prototype, \"fileUpload\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], UploadCustomComponent.prototype, \"onChangeUploadExternal\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], UploadCustomComponent.prototype, \"label\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], UploadCustomComponent.prototype, \"accept\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], UploadCustomComponent.prototype, \"ctrlName\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", ViewModel)], UploadCustomComponent.prototype, \"vm\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], UploadCustomComponent.prototype, \"folder\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], UploadCustomComponent.prototype, \"enabledUploadExternal\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], UploadCustomComponent.prototype, \"rename\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], UploadCustomComponent.prototype, \"pasteArea\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], UploadCustomComponent.prototype, \"pasteAreaText\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], UploadCustomComponent.prototype, \"enableCopyLink\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], UploadCustomComponent.prototype, \"maxsize\", void 0);\n\nUploadCustomComponent = __decorate([Component({\n  selector: 'upload-custom',\n  template: \"\\n    <div class='row'>     \\n      <section class=\\\"col-md-12\\\" [formGroup]=\\\"vm.form\\\">\\n          <label>{{ label }}</label><br>\\n          <input type='file' accept=\\\"{{accept}}\\\" #file name=\\\"{{ctrlName}}\\\" hidden (change)=\\\"onChange($event)\\\"/>\\n          <div class=\\\"input-group\\\">\\n            <input type=\\\"text\\\" readonly=\\\"readonly\\\" [(ngModel)]='fileNameOld' class=\\\"form-control\\\" placeholder=\\\"Selecionar arquivo...\\\" formControlName=\\\"{{ctrlName}}\\\" />\\n            <span class=\\\"btn-group\\\">\\n              <button class=\\\"btn btn-secondary\\\" (click)=\\\"file.click()\\\" type=\\\"button\\\" style='width:100px'>Procurar</button>\\n              <button class='btn btn-secondary' [hidden]=\\\"!fileName\\\" type='button' (click)='onDelete()' style='width:100px'>Excluir</button>\\n            </span>\\n          </div>\\n          <hr *ngIf='fileName && isImage'>\\n          <div class=\\\"input-group\\\" *ngIf='enableCopyLink'>\\n            <input *ngIf='fileName' type='text' id='{{fileName}}' value='{{downloadUri}}{{folder}}/{{fileName}}' class=\\\"form-control\\\">\\n            <span class=\\\"btn-group\\\">\\n              <button class='btn btn-secondary' [hidden]=\\\"!fileName\\\" type='button' (click)='copyToClipboard(fileName)' style='width:100px'>Copy</button>\\n              <a class='btn btn-secondary' *ngIf='fileName' href='{{downloadUri}}{{folder}}/{{fileName}}' target='_blank' style='width:100px'>Ver</a>\\n            </span>\\n          </div>\\n          <hr *ngIf='fileName && enableCopyLink'>\\n          <img *ngIf='fileName && isImage' src='{{downloadUri}}{{folder}}/{{fileName}}' style='max-width:100%'  />\\n          <hr *ngIf='fileName && isImage'>\\n          <div *ngIf='pasteArea' class='upload-component-paste-area upload-component-drop-area mt-2' id='upload-component-paste-area'>\\n          <p class='muted'>{{pasteAreaText}}<p>\\n          </div>\\n      </section>\\n    </div>\",\n  providers: [ApiService]\n}), __metadata(\"design:paramtypes\", [ApiService, typeof (_a = typeof NotificationsService !== \"undefined\" && NotificationsService) === \"function\" ? _a : Object, ChangeDetectorRef])], UploadCustomComponent);\nexport { UploadCustomComponent };","map":null,"metadata":{},"sourceType":"module"}