{"ast":null,"code":"import _get from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { ServiceBase } from './common/services/service.base';\nimport { CacheService } from './common/services/cache.service';\nimport { GlobalService } from './global.service';\nimport { ApiService } from './common/services/api.service';\nimport { Http } from '@angular/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./common/services/api.service\";\nexport var Translated = /*#__PURE__*/function () {\n  function Translated(translatedFields) {\n    _classCallCheck(this, Translated);\n\n    this._translatedFields = translatedFields;\n  }\n\n  _createClass(Translated, [{\n    key: \"adapterData\",\n    value: function adapterData(resources, culture, key, value) {\n      this._translatedFields = [];\n\n      if (resources) {\n        for (var index in resources) {\n          this._translatedFields.push(new TranslatedField(resources[index][culture], resources[index][key], resources[index][value]));\n        }\n      }\n    }\n  }, {\n    key: \"adapterDataForCulture\",\n    value: function adapterDataForCulture(resources, culture, key, value) {\n      this._translatedFields = [];\n\n      if (resources) {\n        for (var index in resources) {\n          this._translatedFields.push(new TranslatedField(culture, resources[index][key], resources[index][value]));\n        }\n      }\n    }\n  }, {\n    key: \"getFileResource\",\n    value: function getFileResource(grupo, culture) {\n      var v = Math.random();\n      return \"assets/\" + grupo.toLowerCase() + \".service.fields.\" + culture + \".json?v=\" + v;\n    }\n  }, {\n    key: \"get\",\n    value: function get(culture) {\n      return this._translatedFields.filter(function (item) {\n        return item.culture == culture;\n      });\n    }\n  }]);\n\n  return Translated;\n}();\nexport var TranslatedField = /*#__PURE__*/_createClass(function TranslatedField(_culture, _key, _value) {\n  _classCallCheck(this, TranslatedField);\n\n  this.culture = _culture;\n  this.key = _key;\n  this.value = _value;\n});\nexport var GlobalServiceCulture = /*#__PURE__*/(function () {\n  var GlobalServiceCulture = /*#__PURE__*/function (_ServiceBase) {\n    _inherits(GlobalServiceCulture, _ServiceBase);\n\n    var _super = _createSuper(GlobalServiceCulture);\n\n    function GlobalServiceCulture(api, http) {\n      var _this;\n\n      _classCallCheck(this, GlobalServiceCulture);\n\n      _this = _super.call(this);\n      _this.api = api;\n      _this.http = http;\n      _this._cacheType = GlobalService.getGlobalSettings().CACHE_TYPE;\n      return _this;\n    }\n\n    _createClass(GlobalServiceCulture, [{\n      key: \"defineCulture\",\n      value: function defineCulture() {\n        var culture = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        var _culture = this.getCulture();\n\n        if (culture) _culture = culture;\n        this.setCulture(_culture);\n        return _culture;\n      }\n    }, {\n      key: \"setCulture\",\n      value: function setCulture(_culture) {\n        CacheService.add('culture', _culture, this._cacheType);\n      }\n    }, {\n      key: \"getCulture\",\n      value: function getCulture() {\n        var culture = CacheService.get('culture', this._cacheType);\n        return culture ? culture : navigator.language;\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        CacheService.removePartialKey(this.getCulture(), this._cacheType);\n      }\n    }, {\n      key: \"setResource\",\n      value: function setResource(grupo, translatedFields, InfosFields) {\n        var mergeFileds = this.makeInfoFields(translatedFields, InfosFields);\n        console.log(\"mergeFileds\", translatedFields, InfosFields, mergeFileds);\n\n        if (mergeFileds) {\n          this.setResourceCache(grupo, mergeFileds);\n        }\n\n        return mergeFileds;\n      }\n    }, {\n      key: \"getInfosTranslatedStrategy\",\n      value: function getInfosTranslatedStrategy(grupo, culture, infos, translatedFields) {\n        var _this2 = this;\n\n        if (GlobalService.getGlobalSettings().translateStrategy.type == \"API\") {\n          return this.getResource(grupo, culture, infos, function (culture, infosFields) {\n            return new Promise(function (resolve, reject) {\n              _this2.api.setResource(GlobalService.getGlobalSettings().translateStrategy.resource).get({\n                group: grupo\n              }).subscribe(function (result) {\n                var translated = new Translated(result.dataList);\n                return resolve(_this2.setResource(grupo, translated.get(culture), infosFields));\n              });\n            });\n          });\n        } else if (GlobalService.getGlobalSettings().translateStrategy.type == \"JSON\") {\n          return this.getResource(grupo, culture, infos, function (culture, infosFields) {\n            return new Promise(function (resolve, reject) {\n              var v = Math.random();\n\n              _this2.http.get(GlobalService.getGlobalSettings().translateStrategy.resource + \"?v=\" + v).toPromise().then(function (response) {\n                var result = response.json();\n                var translated = new Translated(result);\n                return resolve(_this2.setResource(grupo, translated.get(culture), infosFields));\n              }).catch(function (err) {\n                Promise.reject(err);\n              });\n            });\n          });\n        } else {\n          return this.getResource(grupo, culture, infos, function (culture, infosFields) {\n            return new Promise(function (resolve, reject) {\n              var translated = new Translated(translatedFields);\n              return resolve(_this2.setResource(grupo, translated.get(culture), infosFields));\n            });\n          });\n        }\n      }\n    }, {\n      key: \"getResource\",\n      value: function getResource(grupo, culture, infosFields, callbackData) {\n        var result = CacheService.get(this.makeKeyCacheCulture(culture, grupo), this._cacheType);\n\n        if (result) {\n          return new Promise(function (resolve, reject) {\n            return resolve(JSON.parse(result));\n          });\n        } else return callbackData(culture, infosFields);\n      }\n    }, {\n      key: \"makeKeyCacheCulture\",\n      value: function makeKeyCacheCulture(culture, grupo) {\n        return culture + '-' + grupo;\n      }\n    }, {\n      key: \"makeInfoFields\",\n      value: function makeInfoFields(translatedFields, InfosFields) {\n        var _translatedFields = _get(_getPrototypeOf(GlobalServiceCulture.prototype), \"objectToArray\", this).call(this, translatedFields);\n\n        if (_translatedFields) {\n          var _loop = function _loop(key) {\n            var newField = _translatedFields.filter(function (item) {\n              if (item.key == undefined) return false;\n              return item.key.toUpperCase() == key.toUpperCase();\n            });\n\n            if (newField.length > 0) {\n              InfosFields[key].label = newField[0].value;\n            }\n          };\n\n          for (var key in InfosFields) {\n            _loop(key);\n          }\n        }\n\n        return InfosFields;\n      }\n    }, {\n      key: \"setResourceCache\",\n      value: function setResourceCache(grupo, mergeFileds) {\n        CacheService.add(this.makeKeyCacheCulture(this.getCulture(), grupo), JSON.stringify(mergeFileds), this._cacheType, 1);\n      }\n    }]);\n\n    return GlobalServiceCulture;\n  }(ServiceBase);\n\n  GlobalServiceCulture.ɵfac = function GlobalServiceCulture_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  GlobalServiceCulture.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalServiceCulture,\n    factory: GlobalServiceCulture.ɵfac\n  });\n  return GlobalServiceCulture;\n})();","map":null,"metadata":{},"sourceType":"module"}