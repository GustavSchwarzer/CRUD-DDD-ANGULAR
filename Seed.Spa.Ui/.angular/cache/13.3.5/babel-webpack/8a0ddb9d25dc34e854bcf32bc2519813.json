{"ast":null,"code":"import _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { ElementRef, EventEmitter } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport var DateDirective = /*#__PURE__*/(function () {\n  var DateDirective = /*#__PURE__*/function () {\n    function DateDirective(el, ngModel, controlName) {\n      _classCallCheck(this, DateDirective);\n\n      this.el = el;\n      this.ngModel = ngModel;\n      this.controlName = controlName;\n      this.change = new EventEmitter();\n      this.render();\n    }\n\n    _createClass(DateDirective, [{\n      key: \"render\",\n      value: function render() {\n        var _this = this;\n\n        var element = $(this.el.nativeElement); //iniciando plugin\n\n        $.datetimepicker.setLocale('pt-BR'); //idioma plugin\n\n        var options = $.extend(this.saUiDateTimePicker, {\n          mask: '39/19/2999',\n          format: 'd/m/Y',\n          timepicker: false,\n          todayButton: true,\n          defaultSelect: true,\n          step: 30\n        });\n        element.datetimepicker(options);\n        this.change.emit(); //necessário para emitir o evento change\n\n        var ultimoValor = '';\n        $(element).on('change', function (ret) {\n          var valor = $(element).val();\n\n          if (valor != ultimoValor) {\n            _this.updateValue(valor, ultimoValor);\n\n            ultimoValor = valor;\n          }\n        });\n      }\n    }, {\n      key: \"updateValue\",\n      value: function updateValue(value, valueold) {\n        if (this.ngModel) {\n          this.ngModel.viewToModelUpdate(value);\n\n          if (value != valueold) {\n            this.ngModel.control.markAsDirty();\n          }\n        }\n\n        if (this.hasFormControl()) {\n          this.control.setValue(value);\n\n          if (value != valueold) {\n            this.control.markAsDirty();\n          }\n        }\n\n        this.change.emit(); //necessário para emitir o evento change\n      }\n    }, {\n      key: \"hasFormControl\",\n      value: function hasFormControl() {\n        return this.controlName && this.controlName.control;\n      }\n    }, {\n      key: \"control\",\n      get: function get() {\n        if (!this.controlName) {\n          return null;\n        }\n\n        return this.controlName.control;\n      }\n    }]);\n\n    return DateDirective;\n  }();\n\n  DateDirective.ɵfac = function DateDirective_Factory(t) {\n    return new (t || DateDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.NgModel), i0.ɵɵdirectiveInject(i1.FormControlName, 10));\n  };\n\n  DateDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DateDirective,\n    selectors: [[\"\", \"datepicker\", \"\"]],\n    inputs: {\n      saUiDateTimePicker: \"saUiDateTimePicker\"\n    },\n    outputs: {\n      change: \"change\"\n    },\n    features: [i0.ɵɵProvidersFeature([NgModel])]\n  });\n  return DateDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}