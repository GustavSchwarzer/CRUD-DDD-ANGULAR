{"ast":null,"code":"import _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar _a;\n\nimport { Directive, ElementRef, Renderer, Input, Output, EventEmitter, Optional, Self } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { ApiService } from '../services/api.service';\nimport { GlobalService } from \"../../global.service\";\n\nvar DataSourceDirective = /*#__PURE__*/function () {\n  function DataSourceDirective(_elemetRef, _renderer, api, ngModel, controlName) {\n    _classCallCheck(this, DataSourceDirective);\n\n    this._elemetRef = _elemetRef;\n    this._renderer = _renderer;\n    this.api = api;\n    this.ngModel = ngModel;\n    this.controlName = controlName;\n    this.disabledOnInit = false;\n    this.enabledSelect2 = GlobalService.getGlobalSettings().enabledSelect2;\n    this.change = new EventEmitter();\n    this.fieldFilterName = \"nome\";\n    this.labelInitial = \"Selecione\";\n    this.filterBehavior = \"GetDataItem\";\n  }\n\n  _createClass(DataSourceDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      if (!this.disabledOnInit) this.datasource(this._elemetRef.nativeElement);\n      this._notificationEmitter = GlobalService.notification.subscribe(function (not) {\n        if (not.event == \"create\" || not.event == \"edit\" || not.event == \"init\") {\n          _this.init();\n        }\n\n        if (not.event == \"change\") {\n          if (not.data.dataitem == _this.dataitem) {\n            _this.datasource(_this._elemetRef.nativeElement, not.data.parentFilter);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      $(this._elemetRef.nativeElement).val(null).trigger('change');\n      setTimeout(function () {\n        _this2.datasource(_this2._elemetRef.nativeElement);\n      }, 250);\n    }\n  }, {\n    key: \"control\",\n    get: function get() {\n      if (!this.controlName) {\n        return null;\n      }\n\n      return this.controlName.control;\n    }\n  }, {\n    key: \"hasFormControl\",\n    value: function hasFormControl() {\n      return this.controlName && this.controlName.control;\n    }\n  }, {\n    key: \"datasource\",\n    value: function datasource(el, parentFilter) {\n      el.options.length = 0;\n      var selectedValue = null;\n\n      if (this.ngModel.valueAccessor) {\n        this.accessor = this.ngModel.valueAccessor;\n\n        if (this.accessor.value) {\n          selectedValue = this.accessor.value;\n        }\n      }\n\n      if (!this.existsDefaultItem(el)) this.addOption(el, undefined, this.labelInitial);\n      if (this.enabledSelect2) this.select2(el, selectedValue, parentFilter);else this.select(el, selectedValue, parentFilter);\n    }\n  }, {\n    key: \"select\",\n    value: function select(el, selectedValue, parentFilter) {\n      var _this3 = this;\n\n      var filter = Object.assign(this.datafilters || {}, parentFilter || {});\n      this.api.setResource(this.dataitem, this.endpoint).getDataitem(filter).subscribe(function (data) {\n        for (var i = 0; i < data.dataList.length; i++) {\n          _this3.addOption(el, data.dataList[i].id, data.dataList[i].name);\n        }\n\n        if (selectedValue) el.value = _this3.accessor.value;\n      });\n    }\n  }, {\n    key: \"select2\",\n    value: function select2(el, selectedValue, parentFilter) {\n      var _this4 = this;\n\n      if (selectedValue) {\n        var filterOne = {};\n        filterOne[el.name] = selectedValue;\n        this.api.setResource(this.dataitem, this.endpoint).getDataitem(filterOne).subscribe(function (data) {\n          for (var i = 0; i < data.dataList.length; i++) {\n            _this4.addOption(el, data.dataList[i].id, data.dataList[i].name);\n          }\n\n          if (selectedValue) el.value = _this4.accessor.value;\n\n          _this4.select2Config(Object.assign(_this4.datafilters || {}, parentFilter || {}));\n        });\n      } else {\n        this.select2Config(Object.assign(this.datafilters || {}, parentFilter || {}));\n      }\n    }\n  }, {\n    key: \"select2Config\",\n    value: function select2Config(filters) {\n      var _this5 = this;\n\n      var element = $(this._elemetRef.nativeElement);\n      var ultimoValor = 0;\n      var config = {\n        ajax: this.api.setResource(this.dataitem, this.endpoint).getUrlConfig(true, this.fieldFilterName, this.filterBehavior, filters, null, this.labelInitial)\n      };\n      $(element).select2(config).on(\"select2:select\", function (e) {\n        var valor = $(e.currentTarget).val();\n\n        _this5.updateValue(valor, ultimoValor);\n\n        ultimoValor = valor;\n\n        _this5.change.emit({\n          target: {\n            value: valor\n          }\n        });\n      });\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(value, valueold) {\n      if (this.ngModel) {\n        this.ngModel.viewToModelUpdate(value);\n\n        if (value != valueold) {\n          this.ngModel.control.markAsDirty();\n        }\n      }\n\n      if (this.hasFormControl()) {\n        this.control.setValue(value);\n\n        if (value != valueold) {\n          this.control.markAsDirty();\n        }\n      }\n    }\n  }, {\n    key: \"addOption\",\n    value: function addOption(el, value, text) {\n      if (this.existsItem(el, value)) return;\n      var option = document.createElement(\"option\");\n      option.text = text;\n      option.value = value;\n      el.add(option);\n    }\n  }, {\n    key: \"existsItem\",\n    value: function existsItem(el, value) {\n      var found = false;\n\n      if (el.options) {\n        for (var i = 0; i < el.options.length; i++) {\n          if (el.options[i].value == value) found = true;\n        }\n      }\n\n      return found;\n    }\n  }, {\n    key: \"existsDefaultItem\",\n    value: function existsDefaultItem(el) {\n      var found = false;\n\n      if (el.options) {\n        for (var i = 0; i < el.options.length; i++) {\n          if (el.options[i].text == this.labelInitial) found = true;\n        }\n      }\n\n      return found;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      $(this._elemetRef.nativeElement).select2();\n      $(this._elemetRef.nativeElement).select2('destroy');\n      if (this._notificationEmitter) this._notificationEmitter.unsubscribe();\n    }\n  }]);\n\n  return DataSourceDirective;\n}();\n\n__decorate([Input(), __metadata(\"design:type\", String)], DataSourceDirective.prototype, \"dataitem\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], DataSourceDirective.prototype, \"endpoint\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], DataSourceDirective.prototype, \"datafilters\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], DataSourceDirective.prototype, \"fieldFilterName\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], DataSourceDirective.prototype, \"disabledOnInit\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], DataSourceDirective.prototype, \"enabledSelect2\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], DataSourceDirective.prototype, \"labelInitial\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], DataSourceDirective.prototype, \"filterBehavior\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], DataSourceDirective.prototype, \"change\", void 0);\n\nDataSourceDirective = __decorate([Directive({\n  selector: '[datasource]',\n  providers: [NgModel]\n}), __param(4, Optional()), __param(4, Self()), __metadata(\"design:paramtypes\", [ElementRef, typeof (_a = typeof Renderer !== \"undefined\" && Renderer) === \"function\" ? _a : Object, ApiService, NgModel, FormControlName])], DataSourceDirective);\nexport { DataSourceDirective };","map":null,"metadata":{},"sourceType":"module"}