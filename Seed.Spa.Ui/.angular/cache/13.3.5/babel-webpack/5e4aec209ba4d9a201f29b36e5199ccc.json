{"ast":null,"code":"import _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { map } from 'rxjs/operators';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport var AuthGuard = /*#__PURE__*/(function () {\n  var AuthGuard = /*#__PURE__*/function () {\n    function AuthGuard(authService, router) {\n      _classCallCheck(this, AuthGuard);\n\n      this.authService = authService;\n      this.router = router;\n    }\n\n    _createClass(AuthGuard, [{\n      key: \"canActivate\",\n      value: function canActivate(route, state) {\n        var _this = this;\n\n        this.authService.getCurrentUser(function (result, firstTime) {\n          var permissions = JSON.parse(result.claims.tools);\n          console.log(\"permissions\", permissions);\n          console.log(\"url\", state.url);\n          var canAccess = permissions.filter(function (item) {\n            if (item.Route + \"/create\" == state.url && item.CanWrite) return true;\n\n            if (state.url.startsWith(item.Route + \"/edit/\") && item.CanWrite) {\n              console.log(\"canActivate edit\");\n              return true;\n            }\n\n            if (state.url.startsWith(item.Route + \"/details/\") && state.url && item.CanReadOne) return true;\n            if (state.url.startsWith(item.Route + \"/page/\") && state.url && item.CanReadOne) return true;\n            if (state.url.startsWith(item.Route + \"/print/\") && state.url && item.CanReadOne) return true;\n            return item.Route == state.url;\n          }).length > 0;\n\n          if (!canAccess) {\n            _this.router.navigate([\"/unauthorized\"]);\n\n            return false;\n          }\n        });\n        return this.authService.IsAuthApiVerify().pipe(map(function (response) {\n          if (response.status == 401 || response.status == 403) {\n            //this.router.navigate([\"/login\"]);\n            return false;\n          }\n\n          if (response.status == 403) {\n            _this.router.navigate([\"/unauthorized\"]);\n\n            return false;\n          }\n\n          return true;\n        }));\n      }\n    }]);\n\n    return AuthGuard;\n  }();\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}