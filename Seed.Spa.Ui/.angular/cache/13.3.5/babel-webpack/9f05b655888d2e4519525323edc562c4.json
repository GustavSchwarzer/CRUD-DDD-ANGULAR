{"ast":null,"code":"import _slicedToArray from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _inherits from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _toConsumableArray from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\n/**\n * @license Angular v7.2.16\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ɵgetDOM } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nimport * as ɵngcc0 from '@angular/core';\nvar BrowserXhr = /*#__PURE__*/(function () {\n  var BrowserXhr = /*#__PURE__*/function () {\n    function BrowserXhr() {\n      _classCallCheck(this, BrowserXhr);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(BrowserXhr, [{\n      key: \"build\",\n      value: function build() {\n        return (\n          /** @type {?} */\n          new XMLHttpRequest()\n        );\n      }\n    }]);\n\n    return BrowserXhr;\n  }();\n\n  BrowserXhr.ɵfac = function BrowserXhr_Factory(t) {\n    return new (t || BrowserXhr)();\n  };\n\n  BrowserXhr.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BrowserXhr,\n    factory: BrowserXhr.ɵfac\n  });\n  /** @nocollapse */\n\n  return BrowserXhr;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @enum {number} */\n\n\nvar RequestMethod = {\n  Get: 0,\n  Post: 1,\n  Put: 2,\n  Delete: 3,\n  Options: 4,\n  Head: 5,\n  Patch: 6\n};\nRequestMethod[RequestMethod.Get] = 'Get';\nRequestMethod[RequestMethod.Post] = 'Post';\nRequestMethod[RequestMethod.Put] = 'Put';\nRequestMethod[RequestMethod.Delete] = 'Delete';\nRequestMethod[RequestMethod.Options] = 'Options';\nRequestMethod[RequestMethod.Head] = 'Head';\nRequestMethod[RequestMethod.Patch] = 'Patch';\n/** @enum {number} */\n\nvar ReadyState = {\n  Unsent: 0,\n  Open: 1,\n  HeadersReceived: 2,\n  Loading: 3,\n  Done: 4,\n  Cancelled: 5\n};\nReadyState[ReadyState.Unsent] = 'Unsent';\nReadyState[ReadyState.Open] = 'Open';\nReadyState[ReadyState.HeadersReceived] = 'HeadersReceived';\nReadyState[ReadyState.Loading] = 'Loading';\nReadyState[ReadyState.Done] = 'Done';\nReadyState[ReadyState.Cancelled] = 'Cancelled';\n/** @enum {number} */\n\nvar ResponseType = {\n  Basic: 0,\n  Cors: 1,\n  Default: 2,\n  Error: 3,\n  Opaque: 4\n};\nResponseType[ResponseType.Basic] = 'Basic';\nResponseType[ResponseType.Cors] = 'Cors';\nResponseType[ResponseType.Default] = 'Default';\nResponseType[ResponseType.Error] = 'Error';\nResponseType[ResponseType.Opaque] = 'Opaque';\n/** @enum {number} */\n\nvar ContentType = {\n  NONE: 0,\n  JSON: 1,\n  FORM: 2,\n  FORM_DATA: 3,\n  TEXT: 4,\n  BLOB: 5,\n  ARRAY_BUFFER: 6\n};\nContentType[ContentType.NONE] = 'NONE';\nContentType[ContentType.JSON] = 'JSON';\nContentType[ContentType.FORM] = 'FORM';\nContentType[ContentType.FORM_DATA] = 'FORM_DATA';\nContentType[ContentType.TEXT] = 'TEXT';\nContentType[ContentType.BLOB] = 'BLOB';\nContentType[ContentType.ARRAY_BUFFER] = 'ARRAY_BUFFER';\n/** @enum {number} */\n\nvar ResponseContentType = {\n  Text: 0,\n  Json: 1,\n  ArrayBuffer: 2,\n  Blob: 3\n};\nResponseContentType[ResponseContentType.Text] = 'Text';\nResponseContentType[ResponseContentType.Json] = 'Json';\nResponseContentType[ResponseContentType.ArrayBuffer] = 'ArrayBuffer';\nResponseContentType[ResponseContentType.Blob] = 'Blob';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nvar Headers = /*#__PURE__*/function () {\n  // TODO(vicb): any -> string|string[]\n\n  /**\n   * @param {?=} headers\n   */\n  function Headers(headers) {\n    var _this = this;\n\n    _classCallCheck(this, Headers);\n\n    /**\n     * \\@internal header names are lower case\n     */\n    this._headers = new Map();\n    /**\n     * \\@internal map lower case names to actual names\n     */\n\n    this._normalizedNames = new Map();\n\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach(function (values, name) {\n        values.forEach(function (value) {\n          return _this.append(name, value);\n        });\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach(function (name) {\n      /** @type {?} */\n      var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n\n      _this.delete(name);\n\n      values.forEach(function (value) {\n        return _this.append(name, value);\n      });\n    });\n  }\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   * @param {?} headersString\n   * @return {?}\n   */\n\n\n  _createClass(Headers, [{\n    key: \"append\",\n    value:\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function append(name, value) {\n      /** @type {?} */\n      var values = this.getAll(name);\n\n      if (values === null) {\n        this.set(name, value);\n      } else {\n        values.push(value);\n      }\n    }\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      /** @type {?} */\n      var lcName = name.toLowerCase();\n\n      this._normalizedNames.delete(lcName);\n\n      this._headers.delete(lcName);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this2 = this;\n\n      this._headers.forEach(function (values, lcName) {\n        return fn(values, _this2._normalizedNames.get(lcName), _this2._headers);\n      });\n    }\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      /** @type {?} */\n      var values = this.getAll(name);\n\n      if (values === null) {\n        return null;\n      }\n\n      return values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this._headers.has(name.toLowerCase());\n    }\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return Array.from(this._normalizedNames.values());\n    }\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      if (Array.isArray(value)) {\n        if (value.length) {\n          this._headers.set(name.toLowerCase(), [value.join(',')]);\n        }\n      } else {\n        this._headers.set(name.toLowerCase(), [value]);\n      }\n\n      this.mayBeSetNormalizedName(name);\n    }\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n\n  }, {\n    key: \"values\",\n    value: function values() {\n      return Array.from(this._headers.values());\n    }\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _this3 = this;\n\n      /** @type {?} */\n      var serialized = {};\n\n      this._headers.forEach(function (values, name) {\n        /** @type {?} */\n        var split = [];\n        values.forEach(function (v) {\n          return split.push.apply(split, _toConsumableArray(v.split(',')));\n        });\n        serialized[\n        /** @type {?} */\n        _this3._normalizedNames.get(name)] = split;\n      });\n\n      return serialized;\n    }\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    }\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      throw new Error('\"entries\" method is not implemented on Headers class');\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"mayBeSetNormalizedName\",\n    value: function mayBeSetNormalizedName(name) {\n      /** @type {?} */\n      var lcName = name.toLowerCase();\n\n      if (!this._normalizedNames.has(lcName)) {\n        this._normalizedNames.set(lcName, name);\n      }\n    }\n  }], [{\n    key: \"fromResponseHeaderString\",\n    value: function fromResponseHeaderString(headersString) {\n      /** @type {?} */\n      var headers = new Headers();\n      headersString.split('\\n').forEach(function (line) {\n        /** @type {?} */\n        var index = line.indexOf(':');\n\n        if (index > 0) {\n          /** @type {?} */\n          var name = line.slice(0, index);\n          /** @type {?} */\n\n          var value = line.slice(index + 1).trim();\n          headers.set(name, value);\n        }\n      });\n      return headers;\n    }\n  }]);\n\n  return Headers;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar ResponseOptions = /*#__PURE__*/function () {\n  /**\n   * @param {?=} opts\n   */\n  function ResponseOptions() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ResponseOptions);\n\n    var body = opts.body,\n        status = opts.status,\n        headers = opts.headers,\n        statusText = opts.statusText,\n        type = opts.type,\n        url = opts.url;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '\\@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(ResponseOptions, [{\n    key: \"merge\",\n    value: function merge(options) {\n      return new ResponseOptions({\n        body: options && options.body != null ? options.body : this.body,\n        status: options && options.status != null ? options.status : this.status,\n        headers: options && options.headers != null ? options.headers : this.headers,\n        statusText: options && options.statusText != null ? options.statusText : this.statusText,\n        type: options && options.type != null ? options.type : this.type,\n        url: options && options.url != null ? options.url : this.url\n      });\n    }\n  }]);\n\n  return ResponseOptions;\n}();\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar BaseResponseOptions = /*#__PURE__*/(function () {\n  var BaseResponseOptions = /*#__PURE__*/function (_ResponseOptions) {\n    _inherits(BaseResponseOptions, _ResponseOptions);\n\n    var _super = _createSuper(BaseResponseOptions);\n\n    function BaseResponseOptions() {\n      _classCallCheck(this, BaseResponseOptions);\n\n      return _super.call(this, {\n        status: 200,\n        statusText: 'Ok',\n        type: ResponseType.Default,\n        headers: new Headers()\n      });\n    }\n\n    return _createClass(BaseResponseOptions);\n  }(ResponseOptions);\n\n  BaseResponseOptions.ɵfac = function BaseResponseOptions_Factory(t) {\n    return new (t || BaseResponseOptions)();\n  };\n\n  BaseResponseOptions.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BaseResponseOptions,\n    factory: BaseResponseOptions.ɵfac\n  });\n  /** @nocollapse */\n\n  return BaseResponseOptions;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\n\n\nvar ConnectionBackend = /*#__PURE__*/_createClass(function ConnectionBackend() {\n  _classCallCheck(this, ConnectionBackend);\n});\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\n\n\nvar Connection = /*#__PURE__*/_createClass(function Connection() {\n  _classCallCheck(this, Connection);\n});\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\n\n\nvar XSRFStrategy = /*#__PURE__*/_createClass(function XSRFStrategy() {\n  _classCallCheck(this, XSRFStrategy);\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} method\n * @return {?}\n */\n\n\nfunction normalizeMethodName(method) {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n\n    case 'POST':\n      return RequestMethod.Post;\n\n    case 'PUT':\n      return RequestMethod.Put;\n\n    case 'DELETE':\n      return RequestMethod.Delete;\n\n    case 'OPTIONS':\n      return RequestMethod.Options;\n\n    case 'HEAD':\n      return RequestMethod.Head;\n\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n\n  throw new Error(\"Invalid request method. The method \\\"\".concat(method, \"\\\" is not supported.\"));\n}\n/** @type {?} */\n\n\nvar isSuccess = function isSuccess(status) {\n  return status >= 200 && status < 300;\n};\n/**\n * @param {?} xhr\n * @return {?}\n */\n\n\nfunction getResponseURL(xhr) {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n\nfunction stringToArrayBuffer(input) {\n  /** @type {?} */\n  var view = new Uint16Array(input.length);\n\n  for (var i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n\n  return view.buffer;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @param {?=} rawParams\n * @return {?}\n */\n\n\nfunction paramParser() {\n  var rawParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  /** @type {?} */\n  var map = new Map();\n\n  if (rawParams.length > 0) {\n    /** @type {?} */\n    var params = rawParams.split('&');\n    params.forEach(function (param) {\n      /** @type {?} */\n      var eqIdx = param.indexOf('=');\n\n      var _ref = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)],\n          _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          val = _ref2[1];\n      /** @type {?} */\n\n\n      var list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n *\n */\n\n\nvar QueryEncoder = /*#__PURE__*/function () {\n  function QueryEncoder() {\n    _classCallCheck(this, QueryEncoder);\n  }\n\n  _createClass(QueryEncoder, [{\n    key: \"encodeKey\",\n    value:\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    function encodeKey(key) {\n      return standardEncoding(key);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"encodeValue\",\n    value: function encodeValue(value) {\n      return standardEncoding(value);\n    }\n  }]);\n\n  return QueryEncoder;\n}();\n/**\n * @param {?} v\n * @return {?}\n */\n\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar URLSearchParams = /*#__PURE__*/function () {\n  /**\n   * @param {?=} rawParams\n   * @param {?=} queryEncoder\n   */\n  function URLSearchParams() {\n    var rawParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var queryEncoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new QueryEncoder();\n\n    _classCallCheck(this, URLSearchParams);\n\n    this.rawParams = rawParams;\n    this.queryEncoder = queryEncoder;\n    this.paramsMap = paramParser(rawParams);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(URLSearchParams, [{\n    key: \"clone\",\n    value: function clone() {\n      /** @type {?} */\n      var clone = new URLSearchParams('', this.queryEncoder);\n      clone.appendAll(this);\n      return clone;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(param) {\n      return this.paramsMap.has(param);\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(param) {\n      /** @type {?} */\n      var storedParam = this.paramsMap.get(param);\n      return Array.isArray(storedParam) ? storedParam[0] : null;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(param) {\n      return this.paramsMap.get(param) || [];\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(param, val) {\n      if (val === void 0 || val === null) {\n        this.delete(param);\n        return;\n      }\n      /** @type {?} */\n\n\n      var list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(val);\n      this.paramsMap.set(param, list);\n    } // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"setAll\",\n    value: function setAll(searchParams) {\n      var _this4 = this;\n\n      searchParams.paramsMap.forEach(function (value, param) {\n        /** @type {?} */\n        var list = _this4.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(value[0]);\n\n        _this4.paramsMap.set(param, list);\n      });\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(param, val) {\n      if (val === void 0 || val === null) return;\n      /** @type {?} */\n\n      var list = this.paramsMap.get(param) || [];\n      list.push(val);\n      this.paramsMap.set(param, list);\n    } // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"appendAll\",\n    value: function appendAll(searchParams) {\n      var _this5 = this;\n\n      searchParams.paramsMap.forEach(function (value, param) {\n        /** @type {?} */\n        var list = _this5.paramsMap.get(param) || [];\n\n        for (var i = 0; i < value.length; ++i) {\n          list.push(value[i]);\n        }\n\n        _this5.paramsMap.set(param, list);\n      });\n    } // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"replaceAll\",\n    value: function replaceAll(searchParams) {\n      var _this6 = this;\n\n      searchParams.paramsMap.forEach(function (value, param) {\n        /** @type {?} */\n        var list = _this6.paramsMap.get(param) || [];\n        list.length = 0;\n\n        for (var i = 0; i < value.length; ++i) {\n          list.push(value[i]);\n        }\n\n        _this6.paramsMap.set(param, list);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var _this7 = this;\n\n      /** @type {?} */\n      var paramsList = [];\n      this.paramsMap.forEach(function (values, k) {\n        values.forEach(function (v) {\n          return paramsList.push(_this7.queryEncoder.encodeKey(k) + '=' + _this7.queryEncoder.encodeValue(v));\n        });\n      });\n      return paramsList.join('&');\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(param) {\n      this.paramsMap.delete(param);\n    }\n  }]);\n\n  return URLSearchParams;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\n\n\nvar Body = /*#__PURE__*/function () {\n  function Body() {\n    _classCallCheck(this, Body);\n  }\n\n  _createClass(Body, [{\n    key: \"json\",\n    value:\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    function json() {\n      if (typeof this._body === 'string') {\n        return JSON.parse(\n        /** @type {?} */\n        this._body);\n      }\n\n      if (this._body instanceof ArrayBuffer) {\n        return JSON.parse(this.text());\n      }\n\n      return this._body;\n    }\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n\n  }, {\n    key: \"text\",\n    value: function text() {\n      var encodingHint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'legacy';\n\n      if (this._body instanceof URLSearchParams) {\n        return this._body.toString();\n      }\n\n      if (this._body instanceof ArrayBuffer) {\n        switch (encodingHint) {\n          case 'legacy':\n            return String.fromCharCode.apply(null, new Uint16Array(\n            /** @type {?} */\n            this._body));\n\n          case 'iso-8859':\n            return String.fromCharCode.apply(null, new Uint8Array(\n            /** @type {?} */\n            this._body));\n\n          default:\n            throw new Error(\"Invalid value for encodingHint: \".concat(encodingHint));\n        }\n      }\n\n      if (this._body == null) {\n        return '';\n      }\n\n      if (typeof this._body === 'object') {\n        return JSON.stringify(this._body, null, 2);\n      }\n\n      return this._body.toString();\n    }\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n\n  }, {\n    key: \"arrayBuffer\",\n    value: function arrayBuffer() {\n      if (this._body instanceof ArrayBuffer) {\n        return (\n          /** @type {?} */\n          this._body\n        );\n      }\n\n      return stringToArrayBuffer(this.text());\n    }\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n\n  }, {\n    key: \"blob\",\n    value: function blob() {\n      if (this._body instanceof Blob) {\n        return (\n          /** @type {?} */\n          this._body\n        );\n      }\n\n      if (this._body instanceof ArrayBuffer) {\n        return new Blob([this._body]);\n      }\n\n      throw new Error('The request body isn\\'t either a blob or an array buffer');\n    }\n  }]);\n\n  return Body;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar Response = /*#__PURE__*/function (_Body) {\n  _inherits(Response, _Body);\n\n  var _super2 = _createSuper(Response);\n\n  /**\n   * @param {?} responseOptions\n   */\n  function Response(responseOptions) {\n    var _this8;\n\n    _classCallCheck(this, Response);\n\n    _this8 = _super2.call(this);\n    _this8._body = responseOptions.body;\n    _this8.status =\n    /** @type {?} */\n    responseOptions.status;\n    _this8.ok = _this8.status >= 200 && _this8.status <= 299;\n    _this8.statusText = responseOptions.statusText;\n    _this8.headers = responseOptions.headers;\n    _this8.type =\n    /** @type {?} */\n    responseOptions.type;\n    _this8.url =\n    /** @type {?} */\n    responseOptions.url;\n    return _this8;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(Response, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"Response with status: \".concat(this.status, \" \").concat(this.statusText, \" for URL: \").concat(this.url);\n    }\n  }]);\n\n  return Response;\n}(Body);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar _nextRequestId = 0;\n/** @type {?} */\n\nvar JSONP_HOME = '__ng_jsonp__';\n/** @type {?} */\n\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\n\nfunction _getJsonpConnections() {\n  /** @type {?} */\n  var w = typeof window == 'object' ? window : {};\n\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n\n  return _jsonpConnections;\n} // Make sure not to evaluate this in a non-browser environment!\n\n\nvar BrowserJsonp = /*#__PURE__*/(function () {\n  var BrowserJsonp = /*#__PURE__*/function () {\n    function BrowserJsonp() {\n      _classCallCheck(this, BrowserJsonp);\n    }\n\n    _createClass(BrowserJsonp, [{\n      key: \"build\",\n      value: // Construct a <script> element with the specified URL\n\n      /**\n       * @param {?} url\n       * @return {?}\n       */\n      function build(url) {\n        /** @type {?} */\n        var node = document.createElement('script');\n        node.src = url;\n        return node;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"nextRequestID\",\n      value: function nextRequestID() {\n        return \"__req\".concat(_nextRequestId++);\n      }\n      /**\n       * @param {?} id\n       * @return {?}\n       */\n\n    }, {\n      key: \"requestCallback\",\n      value: function requestCallback(id) {\n        return \"\".concat(JSONP_HOME, \".\").concat(id, \".finished\");\n      }\n      /**\n       * @param {?} id\n       * @param {?} connection\n       * @return {?}\n       */\n\n    }, {\n      key: \"exposeConnection\",\n      value: function exposeConnection(id, connection) {\n        /** @type {?} */\n        var connections = _getJsonpConnections();\n\n        connections[id] = connection;\n      }\n      /**\n       * @param {?} id\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeConnection\",\n      value: function removeConnection(id) {\n        /** @type {?} */\n        var connections = _getJsonpConnections();\n\n        connections[id] = null;\n      } // Attach the <script> element to the DOM\n\n      /**\n       * @param {?} node\n       * @return {?}\n       */\n\n    }, {\n      key: \"send\",\n      value: function send(node) {\n        document.body.appendChild(\n        /** @type {?} */\n        node);\n      } // Remove <script> element from the DOM\n\n      /**\n       * @param {?} node\n       * @return {?}\n       */\n\n    }, {\n      key: \"cleanup\",\n      value: function cleanup(node) {\n        if (node.parentNode) {\n          node.parentNode.removeChild(\n          /** @type {?} */\n          node);\n        }\n      }\n    }]);\n\n    return BrowserJsonp;\n  }();\n\n  BrowserJsonp.ɵfac = function BrowserJsonp_Factory(t) {\n    return new (t || BrowserJsonp)();\n  };\n\n  BrowserJsonp.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BrowserJsonp,\n    factory: BrowserJsonp.ɵfac\n  });\n  return BrowserJsonp;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n/** @type {?} */\n\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nvar JSONPConnection = /*#__PURE__*/function () {\n  /**\n   * \\@internal\n   * @param {?} req\n   * @param {?} _dom\n   * @param {?=} baseResponseOptions\n   */\n  function JSONPConnection(req, _dom, baseResponseOptions) {\n    var _this9 = this;\n\n    _classCallCheck(this, JSONPConnection);\n\n    this._dom = _dom;\n    this.baseResponseOptions = baseResponseOptions;\n    this._finished = false;\n\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n\n    this.request = req;\n    this.response = new Observable(function (responseObserver) {\n      _this9.readyState = ReadyState.Loading;\n      /** @type {?} */\n\n      var id = _this9._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, _this9); // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n\n      /** @type {?} */\n\n\n      var callback = _dom.requestCallback(_this9._id);\n      /** @type {?} */\n\n\n      var url = req.url;\n\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', \"=\".concat(callback, \"&\"));\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + \"=\".concat(callback);\n      }\n      /** @type {?} */\n\n\n      var script = _this9._script = _dom.build(url);\n      /** @type {?} */\n\n\n      var onLoad = function onLoad(event) {\n        if (_this9.readyState === ReadyState.Cancelled) return;\n        _this9.readyState = ReadyState.Done;\n\n        _dom.cleanup(script);\n\n        if (!_this9._finished) {\n          /** @type {?} */\n          var _responseOptions = new ResponseOptions({\n            body: JSONP_ERR_NO_CALLBACK,\n            type: ResponseType.Error,\n            url: url\n          });\n\n          if (baseResponseOptions) {\n            _responseOptions = baseResponseOptions.merge(_responseOptions);\n          }\n\n          responseObserver.error(new Response(_responseOptions));\n          return;\n        }\n        /** @type {?} */\n\n\n        var responseOptions = new ResponseOptions({\n          body: _this9._responseData,\n          url: url\n        });\n\n        if (_this9.baseResponseOptions) {\n          responseOptions = _this9.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n      /** @type {?} */\n\n\n      var onError = function onError(error) {\n        if (_this9.readyState === ReadyState.Cancelled) return;\n        _this9.readyState = ReadyState.Done;\n\n        _dom.cleanup(script);\n        /** @type {?} */\n\n\n        var responseOptions = new ResponseOptions({\n          body: error.message,\n          type: ResponseType.Error\n        });\n\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return function () {\n        _this9.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n\n        _this9._dom.cleanup(script);\n      };\n    });\n  }\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   * @param {?=} data\n   * @return {?}\n   */\n\n\n  _createClass(JSONPConnection, [{\n    key: \"finished\",\n    value: function finished(data) {\n      // Don't leak connections\n      this._finished = true;\n\n      this._dom.removeConnection(this._id);\n\n      if (this.readyState === ReadyState.Cancelled) return;\n      this._responseData = data;\n    }\n  }]);\n\n  return JSONPConnection;\n}();\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar JSONPBackend = /*#__PURE__*/(function () {\n  var JSONPBackend = /*#__PURE__*/function (_ConnectionBackend) {\n    _inherits(JSONPBackend, _ConnectionBackend);\n\n    var _super3 = _createSuper(JSONPBackend);\n\n    /**\n     * \\@internal\n     * @param {?} _browserJSONP\n     * @param {?} _baseResponseOptions\n     */\n    function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n      var _this10;\n\n      _classCallCheck(this, JSONPBackend);\n\n      _this10 = _super3.call(this);\n      _this10._browserJSONP = _browserJSONP;\n      _this10._baseResponseOptions = _baseResponseOptions;\n      return _this10;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n\n\n    _createClass(JSONPBackend, [{\n      key: \"createConnection\",\n      value: function createConnection(request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n      }\n    }]);\n\n    return JSONPBackend;\n  }(ConnectionBackend);\n\n  JSONPBackend.ɵfac = function JSONPBackend_Factory(t) {\n    return new (t || JSONPBackend)(ɵngcc0.ɵɵinject(BrowserJsonp), ɵngcc0.ɵɵinject(ResponseOptions));\n  };\n\n  JSONPBackend.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: JSONPBackend,\n    factory: JSONPBackend.ɵfac\n  });\n  /** @nocollapse */\n\n  return JSONPBackend;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nvar XHRConnection = /*#__PURE__*/function () {\n  /**\n   * @param {?} req\n   * @param {?} browserXHR\n   * @param {?=} baseResponseOptions\n   */\n  function XHRConnection(req, browserXHR, baseResponseOptions) {\n    var _this11 = this;\n\n    _classCallCheck(this, XHRConnection);\n\n    this.request = req;\n    this.response = new Observable(function (responseObserver) {\n      /** @type {?} */\n      var _xhr = browserXHR.build();\n\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      } // load event handler\n\n      /** @type {?} */\n\n\n      var onLoad = function onLoad() {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n\n        /** @type {?} */\n        var status = _xhr.status === 1223 ? 204 : _xhr.status;\n        /** @type {?} */\n\n        var body = null; // HTTP 204 means no content\n\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = typeof _xhr.response === 'undefined' ? _xhr.responseText : _xhr.response; // Implicitly strip a potential XSSI prefix.\n\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        } // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n\n\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n        /** @type {?} */\n\n\n        var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders()); // IE 9 does not provide the way to get URL of response\n\n        /** @type {?} */\n\n        var url = getResponseURL(_xhr) || req.url;\n        /** @type {?} */\n\n        var statusText = _xhr.statusText || 'OK';\n        /** @type {?} */\n\n        var responseOptions = new ResponseOptions({\n          body: body,\n          status: status,\n          headers: headers,\n          statusText: statusText,\n          url: url\n        });\n\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        /** @type {?} */\n\n\n        var response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n\n        if (response.ok) {\n          responseObserver.next(response); // TODO(gdi2290): defer complete if array buffer until done\n\n          responseObserver.complete();\n          return;\n        }\n\n        responseObserver.error(response);\n      }; // error event handler\n\n      /** @type {?} */\n\n\n      var onError = function onError(err) {\n        /** @type {?} */\n        var responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText\n        });\n\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      _this11.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n\n      req.headers.forEach(function (values, name) {\n        return _xhr.setRequestHeader(\n        /** @type {?} */\n        name, values.join(','));\n      }); // Select the correct buffer type to store the response\n\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(_this11.request.getBody());\n\n      return function () {\n        _xhr.removeEventListener('load', onLoad);\n\n        _xhr.removeEventListener('error', onError);\n\n        _xhr.abort();\n      };\n    });\n  }\n  /**\n   * @param {?} req\n   * @param {?} _xhr\n   * @return {?}\n   */\n\n\n  _createClass(XHRConnection, [{\n    key: \"setDetectedContentType\",\n    value: function setDetectedContentType(req\n    /** TODO Request */\n    , _xhr\n    /** XMLHttpRequest */\n    ) {\n      // Skip if a custom Content-Type header is provided\n      if (req.headers != null && req.headers.get('Content-Type') != null) {\n        return;\n      } // Set the detected content type\n\n\n      switch (req.contentType) {\n        case ContentType.NONE:\n          break;\n\n        case ContentType.JSON:\n          _xhr.setRequestHeader('content-type', 'application/json');\n\n          break;\n\n        case ContentType.FORM:\n          _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n\n          break;\n\n        case ContentType.TEXT:\n          _xhr.setRequestHeader('content-type', 'text/plain');\n\n          break;\n\n        case ContentType.BLOB:\n          /** @type {?} */\n          var blob = req.blob();\n\n          if (blob.type) {\n            _xhr.setRequestHeader('content-type', blob.type);\n          }\n\n          break;\n      }\n    }\n  }]);\n\n  return XHRConnection;\n}();\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar CookieXSRFStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?=} _cookieName\n   * @param {?=} _headerName\n   */\n  function CookieXSRFStrategy() {\n    var _cookieName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'XSRF-TOKEN';\n\n    var _headerName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'X-XSRF-TOKEN';\n\n    _classCallCheck(this, CookieXSRFStrategy);\n\n    this._cookieName = _cookieName;\n    this._headerName = _headerName;\n  }\n  /**\n   * @param {?} req\n   * @return {?}\n   */\n\n\n  _createClass(CookieXSRFStrategy, [{\n    key: \"configureRequest\",\n    value: function configureRequest(req) {\n      /** @type {?} */\n      var xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n\n      if (xsrfToken) {\n        req.headers.set(this._headerName, xsrfToken);\n      }\n    }\n  }]);\n\n  return CookieXSRFStrategy;\n}();\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar XHRBackend = /*#__PURE__*/(function () {\n  var XHRBackend = /*#__PURE__*/function () {\n    /**\n     * @param {?} _browserXHR\n     * @param {?} _baseResponseOptions\n     * @param {?} _xsrfStrategy\n     */\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n      _classCallCheck(this, XHRBackend);\n\n      this._browserXHR = _browserXHR;\n      this._baseResponseOptions = _baseResponseOptions;\n      this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n\n\n    _createClass(XHRBackend, [{\n      key: \"createConnection\",\n      value: function createConnection(request) {\n        this._xsrfStrategy.configureRequest(request);\n\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n      }\n    }]);\n\n    return XHRBackend;\n  }();\n\n  XHRBackend.ɵfac = function XHRBackend_Factory(t) {\n    return new (t || XHRBackend)(ɵngcc0.ɵɵinject(BrowserXhr), ɵngcc0.ɵɵinject(ResponseOptions), ɵngcc0.ɵɵinject(XSRFStrategy));\n  };\n\n  XHRBackend.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: XHRBackend,\n    factory: XHRBackend.ɵfac\n  });\n  /** @nocollapse */\n\n  return XHRBackend;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar RequestOptions = /*#__PURE__*/function () {\n  // TODO(Dzmitry): remove search when this.search is removed\n\n  /**\n   * @param {?=} opts\n   */\n  function RequestOptions() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RequestOptions);\n\n    var method = opts.method,\n        headers = opts.headers,\n        body = opts.body,\n        url = opts.url,\n        search = opts.search,\n        params = opts.params,\n        withCredentials = opts.withCredentials,\n        responseType = opts.responseType;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(RequestOptions, [{\n    key: \"search\",\n    get:\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @return {?}\n     */\n    function get() {\n      return this.params;\n    }\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @param {?} params\n     * @return {?}\n     */\n    ,\n    set: function set(params) {\n      this.params = params;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(options) {\n      return new RequestOptions({\n        method: options && options.method != null ? options.method : this.method,\n        headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n        body: options && options.body != null ? options.body : this.body,\n        url: options && options.url != null ? options.url : this.url,\n        params: options && this._mergeSearchParams(options.params || options.search),\n        withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,\n        responseType: options && options.responseType != null ? options.responseType : this.responseType\n      });\n    }\n    /**\n     * @private\n     * @param {?=} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"_mergeSearchParams\",\n    value: function _mergeSearchParams(params) {\n      if (!params) return this.params;\n\n      if (params instanceof URLSearchParams) {\n        return params.clone();\n      }\n\n      if (typeof params === 'string') {\n        return new URLSearchParams(params);\n      }\n\n      return this._parseParams(params);\n    }\n    /**\n     * @private\n     * @param {?=} objParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"_parseParams\",\n    value: function _parseParams() {\n      var _this12 = this;\n\n      var objParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /** @type {?} */\n      var params = new URLSearchParams();\n      Object.keys(objParams).forEach(function (key) {\n        /** @type {?} */\n        var value = objParams[key];\n\n        if (Array.isArray(value)) {\n          value.forEach(function (item) {\n            return _this12._appendParam(key, item, params);\n          });\n        } else {\n          _this12._appendParam(key, value, params);\n        }\n      });\n      return params;\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"_appendParam\",\n    value: function _appendParam(key, value, params) {\n      if (typeof value !== 'string') {\n        value = JSON.stringify(value);\n      }\n\n      params.append(key, value);\n    }\n  }]);\n\n  return RequestOptions;\n}();\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar BaseRequestOptions = /*#__PURE__*/(function () {\n  var BaseRequestOptions = /*#__PURE__*/function (_RequestOptions) {\n    _inherits(BaseRequestOptions, _RequestOptions);\n\n    var _super4 = _createSuper(BaseRequestOptions);\n\n    function BaseRequestOptions() {\n      _classCallCheck(this, BaseRequestOptions);\n\n      return _super4.call(this, {\n        method: RequestMethod.Get,\n        headers: new Headers()\n      });\n    }\n\n    return _createClass(BaseRequestOptions);\n  }(RequestOptions);\n\n  BaseRequestOptions.ɵfac = function BaseRequestOptions_Factory(t) {\n    return new (t || BaseRequestOptions)();\n  };\n\n  BaseRequestOptions.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BaseRequestOptions,\n    factory: BaseRequestOptions.ɵfac\n  });\n  /** @nocollapse */\n\n  return BaseRequestOptions;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jeffbcross): properly implement body accessors\n\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar Request = /*#__PURE__*/function (_Body2) {\n  _inherits(Request, _Body2);\n\n  var _super5 = _createSuper(Request);\n\n  /**\n   * @param {?} requestOptions\n   */\n  function Request(requestOptions) {\n    var _this13;\n\n    _classCallCheck(this, Request);\n\n    _this13 = _super5.call(this); // TODO: assert that url is present\n\n    /** @type {?} */\n\n    var url = requestOptions.url;\n    _this13.url =\n    /** @type {?} */\n    requestOptions.url;\n    /** @type {?} */\n\n    var paramsArg = requestOptions.params || requestOptions.search;\n\n    if (paramsArg) {\n      /** @type {?} */\n      var params;\n\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n\n      if (params.length > 0) {\n        /** @type {?} */\n        var prefix = '?';\n\n        if (_this13.url.indexOf('?') != -1) {\n          prefix = _this13.url[_this13.url.length - 1] == '&' ? '' : '&';\n        } // TODO: just delete search-query-looking string in url?\n\n\n        _this13.url = url + prefix + params;\n      }\n    }\n\n    _this13._body = requestOptions.body;\n    _this13.method = normalizeMethodName(\n    /** @type {?} */\n    requestOptions.method); // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n\n    _this13.headers = new Headers(requestOptions.headers);\n    _this13.contentType = _this13.detectContentType();\n    _this13.withCredentials =\n    /** @type {?} */\n    requestOptions.withCredentials;\n    _this13.responseType =\n    /** @type {?} */\n    requestOptions.responseType;\n    return _this13;\n  }\n  /**\n   * Returns the content type enum based on header options.\n   * @return {?}\n   */\n\n\n  _createClass(Request, [{\n    key: \"detectContentType\",\n    value: function detectContentType() {\n      switch (this.headers.get('content-type')) {\n        case 'application/json':\n          return ContentType.JSON;\n\n        case 'application/x-www-form-urlencoded':\n          return ContentType.FORM;\n\n        case 'multipart/form-data':\n          return ContentType.FORM_DATA;\n\n        case 'text/plain':\n        case 'text/html':\n          return ContentType.TEXT;\n\n        case 'application/octet-stream':\n          return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n\n        default:\n          return this.detectContentTypeFromBody();\n      }\n    }\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detectContentTypeFromBody\",\n    value: function detectContentTypeFromBody() {\n      if (this._body == null) {\n        return ContentType.NONE;\n      } else if (this._body instanceof URLSearchParams) {\n        return ContentType.FORM;\n      } else if (this._body instanceof FormData) {\n        return ContentType.FORM_DATA;\n      } else if (this._body instanceof Blob$1) {\n        return ContentType.BLOB;\n      } else if (this._body instanceof ArrayBuffer$1) {\n        return ContentType.ARRAY_BUFFER;\n      } else if (this._body && typeof this._body === 'object') {\n        return ContentType.JSON;\n      } else {\n        return ContentType.TEXT;\n      }\n    }\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getBody\",\n    value: function getBody() {\n      switch (this.contentType) {\n        case ContentType.JSON:\n          return this.text();\n\n        case ContentType.FORM:\n          return this.text();\n\n        case ContentType.FORM_DATA:\n          return this._body;\n\n        case ContentType.TEXT:\n          return this.text();\n\n        case ContentType.BLOB:\n          return this.blob();\n\n        case ContentType.ARRAY_BUFFER:\n          return this.arrayBuffer();\n\n        default:\n          return null;\n      }\n    }\n  }]);\n\n  return Request;\n}(Body);\n/**\n * @param {?} params\n * @return {?}\n */\n\n\nfunction urlEncodeParams(params) {\n  /** @type {?} */\n  var searchParams = new URLSearchParams();\n  Object.keys(params).forEach(function (key) {\n    /** @type {?} */\n    var value = params[key];\n\n    if (value && Array.isArray(value)) {\n      value.forEach(function (element) {\n        return searchParams.append(key, element.toString());\n      });\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n/** @type {?} */\n\n\nvar noop = function noop() {};\n/** @type {?} */\n\n\nvar w = typeof window == 'object' ? window : noop;\n/** @type {?} */\n\nvar FormData =\n/** @type {?} */\nw['FormData'] || noop;\n/** @type {?} */\n\nvar Blob$1 =\n/** @type {?} */\nw['Blob'] || noop;\n/** @type {?} */\n\nvar ArrayBuffer$1 =\n/** @type {?} */\nw['ArrayBuffer'] || noop;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\n\nfunction httpRequest(backend, request) {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\n\n\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n  /** @type {?} */\n  var newOptions = defaultOpts;\n\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return (\n      /** @type {?} */\n      newOptions.merge(new RequestOptions({\n        method: providedOpts.method || method,\n        url: providedOpts.url || url,\n        search: providedOpts.search,\n        params: providedOpts.params,\n        headers: providedOpts.headers,\n        body: providedOpts.body,\n        withCredentials: providedOpts.withCredentials,\n        responseType: providedOpts.responseType\n      }))\n    );\n  }\n\n  return (\n    /** @type {?} */\n    newOptions.merge(new RequestOptions({\n      method: method,\n      url: url\n    }))\n  );\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar Http = /*#__PURE__*/(function () {\n  var Http = /*#__PURE__*/function () {\n    /**\n     * @param {?} _backend\n     * @param {?} _defaultOptions\n     */\n    function Http(_backend, _defaultOptions) {\n      _classCallCheck(this, Http);\n\n      this._backend = _backend;\n      this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n\n    _createClass(Http, [{\n      key: \"request\",\n      value: function request(url, options) {\n        /** @type {?} */\n        var responseObservable;\n\n        if (typeof url === 'string') {\n          responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get,\n          /** @type {?} */\n          url)));\n        } else if (url instanceof Request) {\n          responseObservable = httpRequest(this._backend, url);\n        } else {\n          throw new Error('First argument must be a url string or Request instance.');\n        }\n\n        return responseObservable;\n      }\n      /**\n       * Performs a request with `get` http method.\n       * @param {?} url\n       * @param {?=} options\n       * @return {?}\n       */\n\n    }, {\n      key: \"get\",\n      value: function get(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n      }\n      /**\n       * Performs a request with `post` http method.\n       * @param {?} url\n       * @param {?} body\n       * @param {?=} options\n       * @return {?}\n       */\n\n    }, {\n      key: \"post\",\n      value: function post(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n          body: body\n        })), options, RequestMethod.Post, url)));\n      }\n      /**\n       * Performs a request with `put` http method.\n       * @param {?} url\n       * @param {?} body\n       * @param {?=} options\n       * @return {?}\n       */\n\n    }, {\n      key: \"put\",\n      value: function put(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n          body: body\n        })), options, RequestMethod.Put, url)));\n      }\n      /**\n       * Performs a request with `delete` http method.\n       * @param {?} url\n       * @param {?=} options\n       * @return {?}\n       */\n\n    }, {\n      key: \"delete\",\n      value: function _delete(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n      }\n      /**\n       * Performs a request with `patch` http method.\n       * @param {?} url\n       * @param {?} body\n       * @param {?=} options\n       * @return {?}\n       */\n\n    }, {\n      key: \"patch\",\n      value: function patch(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n          body: body\n        })), options, RequestMethod.Patch, url)));\n      }\n      /**\n       * Performs a request with `head` http method.\n       * @param {?} url\n       * @param {?=} options\n       * @return {?}\n       */\n\n    }, {\n      key: \"head\",\n      value: function head(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n      }\n      /**\n       * Performs a request with `options` http method.\n       * @param {?} url\n       * @param {?=} options\n       * @return {?}\n       */\n\n    }, {\n      key: \"options\",\n      value: function options(url, _options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, _options, RequestMethod.Options, url)));\n      }\n    }]);\n\n    return Http;\n  }();\n\n  Http.ɵfac = function Http_Factory(t) {\n    return new (t || Http)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions));\n  };\n\n  Http.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Http,\n    factory: Http.ɵfac\n  });\n  /** @nocollapse */\n\n  return Http;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar Jsonp = /*#__PURE__*/(function () {\n  var Jsonp = /*#__PURE__*/function (_Http) {\n    _inherits(Jsonp, _Http);\n\n    var _super6 = _createSuper(Jsonp);\n\n    /**\n     * @param {?} backend\n     * @param {?} defaultOptions\n     */\n    function Jsonp(backend, defaultOptions) {\n      _classCallCheck(this, Jsonp);\n\n      return _super6.call(this, backend, defaultOptions);\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n\n    _createClass(Jsonp, [{\n      key: \"request\",\n      value: function request(url, options) {\n        /** @type {?} */\n        var responseObservable;\n\n        if (typeof url === 'string') {\n          url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get,\n          /** @type {?} */\n          url));\n        }\n\n        if (url instanceof Request) {\n          if (url.method !== RequestMethod.Get) {\n            throw new Error('JSONP requests must use GET request method.');\n          }\n\n          responseObservable = httpRequest(this._backend, url);\n        } else {\n          throw new Error('First argument must be a url string or Request instance.');\n        }\n\n        return responseObservable;\n      }\n    }]);\n\n    return Jsonp;\n  }(Http);\n\n  Jsonp.ɵfac = function Jsonp_Factory(t) {\n    return new (t || Jsonp)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions));\n  };\n\n  Jsonp.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Jsonp,\n    factory: Jsonp.ɵfac\n  });\n  /** @nocollapse */\n\n  return Jsonp;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\n\n\nfunction httpFactory(xhrBackend, requestOptions) {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\n\n\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar HttpModule = /*#__PURE__*/(function () {\n  var HttpModule = /*#__PURE__*/_createClass(function HttpModule() {\n    _classCallCheck(this, HttpModule);\n  });\n\n  HttpModule.ɵfac = function HttpModule_Factory(t) {\n    return new (t || HttpModule)();\n  };\n\n  HttpModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: HttpModule\n  });\n  HttpModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [// TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {\n      provide: Http,\n      useFactory: httpFactory,\n      deps: [XHRBackend, RequestOptions]\n    }, BrowserXhr, {\n      provide: RequestOptions,\n      useClass: BaseRequestOptions\n    }, {\n      provide: ResponseOptions,\n      useClass: BaseResponseOptions\n    }, XHRBackend, {\n      provide: XSRFStrategy,\n      useFactory: _createDefaultCookieXSRFStrategy\n    }]\n  });\n  return HttpModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\n * \\@publicApi\n */\n\n\nvar JsonpModule = /*#__PURE__*/(function () {\n  var JsonpModule = /*#__PURE__*/_createClass(function JsonpModule() {\n    _classCallCheck(this, JsonpModule);\n  });\n\n  JsonpModule.ɵfac = function JsonpModule_Factory(t) {\n    return new (t || JsonpModule)();\n  };\n\n  JsonpModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: JsonpModule\n  });\n  JsonpModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [// TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {\n      provide: Jsonp,\n      useFactory: jsonpFactory,\n      deps: [JSONPBackend, RequestOptions]\n    }, BrowserJsonp, {\n      provide: RequestOptions,\n      useClass: BaseRequestOptions\n    }, {\n      provide: ResponseOptions,\n      useClass: BaseResponseOptions\n    }, JSONPBackend]\n  });\n  return JsonpModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @type {?}\n */\n\n\nvar VERSION = /*#__PURE__*/new Version('7.2.16');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserJsonp as ɵangular_packages_http_http_e, Body as ɵangular_packages_http_http_f, _createDefaultCookieXSRFStrategy as ɵangular_packages_http_http_a, httpFactory as ɵangular_packages_http_http_b, jsonpFactory as ɵangular_packages_http_http_c, BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION }; //# sourceMappingURL=http.js.map","map":null,"metadata":{},"sourceType":"module"}