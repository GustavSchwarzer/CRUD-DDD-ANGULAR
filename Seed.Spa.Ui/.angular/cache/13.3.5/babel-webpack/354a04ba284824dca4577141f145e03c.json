{"ast":null,"code":"import _classCallCheck from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\seed-dotnet6.0angular13\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { ElementRef, EventEmitter } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { ApiService } from '../services/api.service';\nimport { GlobalService } from \"../../global.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/api.service\";\nimport * as i2 from \"@angular/forms\";\nexport var DataSourceAuxDirective = /*#__PURE__*/(function () {\n  var DataSourceAuxDirective = /*#__PURE__*/function () {\n    function DataSourceAuxDirective(_elemetRef, api, ngModel, controlName) {\n      _classCallCheck(this, DataSourceAuxDirective);\n\n      this._elemetRef = _elemetRef;\n      this.api = api;\n      this.ngModel = ngModel;\n      this.controlName = controlName;\n      this.change = new EventEmitter();\n      this.labelInitial = \"Selecione\";\n    }\n\n    _createClass(DataSourceAuxDirective, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this = this;\n\n        if (!this.disabledOnInit) this.datasource(this._elemetRef.nativeElement);\n        this._notificationEmitter = GlobalService.notification.subscribe(function (not) {\n          if (not.event == \"create\" || not.event == \"edit\" || not.event == \"init\") {\n            _this.init();\n          }\n\n          if (not.event == \"change\") {\n            if (not.data.dataitem == _this.dataitem) {\n              _this.datasource(_this._elemetRef.nativeElement, not.data.parentFilter);\n            }\n          }\n        });\n      }\n    }, {\n      key: \"init\",\n      value: function init() {\n        var _this2 = this;\n\n        $(this._elemetRef.nativeElement).val(null).trigger('change');\n        setTimeout(function () {\n          _this2.datasource(_this2._elemetRef.nativeElement);\n        }, 250);\n      }\n    }, {\n      key: \"control\",\n      get: function get() {\n        if (!this.controlName) {\n          return null;\n        }\n\n        return this.controlName.control;\n      }\n    }, {\n      key: \"hasFormControl\",\n      value: function hasFormControl() {\n        return this.controlName && this.controlName.control;\n      }\n    }, {\n      key: \"datasource\",\n      value: function datasource(el, parentFilter) {\n        el.options.length = 0;\n        var selectedValue = null;\n\n        if (this.ngModel.valueAccessor) {\n          this.accessor = this.ngModel.valueAccessor;\n\n          if (this.accessor.value) {\n            selectedValue = this.accessor.value;\n          }\n        }\n\n        if (!this.existsDefaultItem(el)) this.addOption(el, undefined, this.labelInitial);\n        this.select(el, selectedValue);\n      }\n    }, {\n      key: \"select\",\n      value: function select(el, selectedValue) {\n        for (var i = 0; i < this.dataAux.length; i++) {\n          this.addOption(el, this.dataAux[i].id, this.dataAux[i].name);\n        }\n\n        if (selectedValue) el.value = this.accessor.value;\n      }\n    }, {\n      key: \"addOption\",\n      value: function addOption(el, value, text) {\n        if (this.existsItem(el, value)) return;\n        var option = document.createElement(\"option\");\n        option.text = text;\n        option.value = value;\n        el.add(option);\n      }\n    }, {\n      key: \"existsItem\",\n      value: function existsItem(el, value) {\n        var found = false;\n\n        if (el.options) {\n          for (var i = 0; i < el.options.length; i++) {\n            if (el.options[i].value == value) found = true;\n          }\n        }\n\n        return found;\n      }\n    }, {\n      key: \"existsDefaultItem\",\n      value: function existsDefaultItem(el) {\n        var found = false;\n\n        if (el.options) {\n          for (var i = 0; i < el.options.length; i++) {\n            if (el.options[i].text == this.labelInitial) found = true;\n          }\n        }\n\n        return found;\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._notificationEmitter) this._notificationEmitter.unsubscribe();\n      }\n    }]);\n\n    return DataSourceAuxDirective;\n  }();\n\n  DataSourceAuxDirective.ɵfac = function DataSourceAuxDirective_Factory(t) {\n    return new (t || DataSourceAuxDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.NgModel), i0.ɵɵdirectiveInject(i2.FormControlName, 10));\n  };\n\n  DataSourceAuxDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DataSourceAuxDirective,\n    selectors: [[\"\", \"datasourceaux\", \"\"]],\n    inputs: {\n      disabledOnInit: \"disabledOnInit\",\n      labelInitial: \"labelInitial\",\n      dataitem: \"dataitem\",\n      dataAux: \"dataAux\"\n    },\n    outputs: {\n      change: \"change\"\n    },\n    features: [i0.ɵɵProvidersFeature([NgModel])]\n  });\n  return DataSourceAuxDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}